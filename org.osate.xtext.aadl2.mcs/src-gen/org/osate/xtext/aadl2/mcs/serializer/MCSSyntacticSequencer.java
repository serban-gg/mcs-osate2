/*
 * generated by Xtext
 */
package org.osate.xtext.aadl2.mcs.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.osate.xtext.aadl2.mcs.services.MCSGrammarAccess;

@SuppressWarnings("all")
public class MCSSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MCSGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Constant_declaration_ConstKeyword_0_q;
	protected AbstractElementAlias match_Theorem_call_CheckKeyword_0_0_or_ProveKeyword_0_1;
	protected AbstractElementAlias match_Theorem_call___LessThanSignKeyword_2_0_NilKeyword_2_1_0_GreaterThanSignKeyword_2_2__q;
	protected AbstractElementAlias match_UnnamedBooleanType_AadlbooleanKeyword_1_0_or_BoolKeyword_1_1;
	protected AbstractElementAlias match_UnnamedEnumerationType_EnumKeyword_0_1_or_EnumerationKeyword_0_0;
	protected AbstractElementAlias match_UnnamedIntegerType_AadlintegerKeyword_1_0_or_IntKeyword_1_1;
	protected AbstractElementAlias match_UnnamedRealType_AadlrealKeyword_1_0_or_RealKeyword_1_1;
	protected AbstractElementAlias match_UnnamedStringType_AadlstringKeyword_1_0_or_StringKeyword_1_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MCSGrammarAccess) access;
		match_Constant_declaration_ConstKeyword_0_q = new TokenAlias(false, true, grammarAccess.getConstant_declarationAccess().getConstKeyword_0());
		match_Theorem_call_CheckKeyword_0_0_or_ProveKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTheorem_callAccess().getCheckKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getTheorem_callAccess().getProveKeyword_0_1()));
		match_Theorem_call___LessThanSignKeyword_2_0_NilKeyword_2_1_0_GreaterThanSignKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTheorem_callAccess().getLessThanSignKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getTheorem_callAccess().getNilKeyword_2_1_0()), new TokenAlias(false, false, grammarAccess.getTheorem_callAccess().getGreaterThanSignKeyword_2_2()));
		match_UnnamedBooleanType_AadlbooleanKeyword_1_0_or_BoolKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getUnnamedBooleanTypeAccess().getAadlbooleanKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getUnnamedBooleanTypeAccess().getBoolKeyword_1_1()));
		match_UnnamedEnumerationType_EnumKeyword_0_1_or_EnumerationKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getUnnamedEnumerationTypeAccess().getEnumKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getUnnamedEnumerationTypeAccess().getEnumerationKeyword_0_0()));
		match_UnnamedIntegerType_AadlintegerKeyword_1_0_or_IntKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getUnnamedIntegerTypeAccess().getAadlintegerKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getUnnamedIntegerTypeAccess().getIntKeyword_1_1()));
		match_UnnamedRealType_AadlrealKeyword_1_0_or_RealKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getUnnamedRealTypeAccess().getAadlrealKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getUnnamedRealTypeAccess().getRealKeyword_1_1()));
		match_UnnamedStringType_AadlstringKeyword_1_0_or_StringKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getUnnamedStringTypeAccess().getAadlstringKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getUnnamedStringTypeAccess().getStringKeyword_1_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getSTARRule())
			return getSTARToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * STAR : '*';
	 */
	protected String getSTARToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Constant_declaration_ConstKeyword_0_q.equals(syntax))
				emit_Constant_declaration_ConstKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Theorem_call_CheckKeyword_0_0_or_ProveKeyword_0_1.equals(syntax))
				emit_Theorem_call_CheckKeyword_0_0_or_ProveKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Theorem_call___LessThanSignKeyword_2_0_NilKeyword_2_1_0_GreaterThanSignKeyword_2_2__q.equals(syntax))
				emit_Theorem_call___LessThanSignKeyword_2_0_NilKeyword_2_1_0_GreaterThanSignKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_UnnamedBooleanType_AadlbooleanKeyword_1_0_or_BoolKeyword_1_1.equals(syntax))
				emit_UnnamedBooleanType_AadlbooleanKeyword_1_0_or_BoolKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_UnnamedEnumerationType_EnumKeyword_0_1_or_EnumerationKeyword_0_0.equals(syntax))
				emit_UnnamedEnumerationType_EnumKeyword_0_1_or_EnumerationKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_UnnamedIntegerType_AadlintegerKeyword_1_0_or_IntKeyword_1_1.equals(syntax))
				emit_UnnamedIntegerType_AadlintegerKeyword_1_0_or_IntKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_UnnamedRealType_AadlrealKeyword_1_0_or_RealKeyword_1_1.equals(syntax))
				emit_UnnamedRealType_AadlrealKeyword_1_0_or_RealKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_UnnamedStringType_AadlstringKeyword_1_0_or_StringKeyword_1_1.equals(syntax))
				emit_UnnamedStringType_AadlstringKeyword_1_0_or_StringKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'const'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) const=McsTypedName
	 */
	protected void emit_Constant_declaration_ConstKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'check' | 'prove'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) tname=[Theorem|ID]
	 */
	protected void emit_Theorem_call_CheckKeyword_0_0_or_ProveKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('<' 'nil' '>')?
	 *
	 * This ambiguous syntax occurs at:
	 *     tname=[Theorem|ID] (ambiguity) '(' ')' (rule end)
	 *     tname=[Theorem|ID] (ambiguity) '(' actarg+=Expr
	 */
	protected void emit_Theorem_call___LessThanSignKeyword_2_0_NilKeyword_2_1_0_GreaterThanSignKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'aadlboolean' | 'bool'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_UnnamedBooleanType_AadlbooleanKeyword_1_0_or_BoolKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'enumeration' | 'enum'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ownedLiteral+=EnumerationLiteral
	 */
	protected void emit_UnnamedEnumerationType_EnumKeyword_0_1_or_EnumerationKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'aadlinteger' | 'int'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'units' referencedUnitsType=[UnitsType|QPREF]
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) ownedUnitsType=UnnamedUnitsType
	 *     (rule start) (ambiguity) range=IntegerRange
	 */
	protected void emit_UnnamedIntegerType_AadlintegerKeyword_1_0_or_IntKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'aadlreal' | 'real'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'units' referencedUnitsType=[UnitsType|QPREF]
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) ownedUnitsType=UnnamedUnitsType
	 *     (rule start) (ambiguity) range=RealRange
	 */
	protected void emit_UnnamedRealType_AadlrealKeyword_1_0_or_RealKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'aadlstring' | 'string'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_UnnamedStringType_AadlstringKeyword_1_0_or_StringKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
