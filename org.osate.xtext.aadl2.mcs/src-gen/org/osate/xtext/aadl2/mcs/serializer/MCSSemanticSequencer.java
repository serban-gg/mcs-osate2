/*
 * generated by Xtext
 */
package org.osate.xtext.aadl2.mcs.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.osate.aadl2.Aadl2Package;
import org.osate.aadl2.AadlBoolean;
import org.osate.aadl2.AadlInteger;
import org.osate.aadl2.AadlPackage;
import org.osate.aadl2.AadlReal;
import org.osate.aadl2.AadlString;
import org.osate.aadl2.AbstractFeature;
import org.osate.aadl2.AbstractImplementation;
import org.osate.aadl2.AbstractPrototype;
import org.osate.aadl2.AbstractSubcomponent;
import org.osate.aadl2.AbstractType;
import org.osate.aadl2.AccessConnection;
import org.osate.aadl2.AccessSpecification;
import org.osate.aadl2.ArrayDimension;
import org.osate.aadl2.ArrayRange;
import org.osate.aadl2.ArraySize;
import org.osate.aadl2.BasicProperty;
import org.osate.aadl2.BasicPropertyAssociation;
import org.osate.aadl2.BooleanLiteral;
import org.osate.aadl2.BusAccess;
import org.osate.aadl2.BusImplementation;
import org.osate.aadl2.BusPrototype;
import org.osate.aadl2.BusSubcomponent;
import org.osate.aadl2.BusType;
import org.osate.aadl2.ClassifierType;
import org.osate.aadl2.ClassifierValue;
import org.osate.aadl2.ComponentImplementationReference;
import org.osate.aadl2.ComponentPrototypeActual;
import org.osate.aadl2.ComponentPrototypeBinding;
import org.osate.aadl2.ComponentTypeRename;
import org.osate.aadl2.ComputedValue;
import org.osate.aadl2.ConnectedElement;
import org.osate.aadl2.ContainedNamedElement;
import org.osate.aadl2.ContainmentPathElement;
import org.osate.aadl2.DataAccess;
import org.osate.aadl2.DataImplementation;
import org.osate.aadl2.DataPort;
import org.osate.aadl2.DataPrototype;
import org.osate.aadl2.DataSubcomponent;
import org.osate.aadl2.DataType;
import org.osate.aadl2.DefaultAnnexLibrary;
import org.osate.aadl2.DefaultAnnexSubclause;
import org.osate.aadl2.DeviceImplementation;
import org.osate.aadl2.DevicePrototype;
import org.osate.aadl2.DeviceSubcomponent;
import org.osate.aadl2.DeviceType;
import org.osate.aadl2.EndToEndFlow;
import org.osate.aadl2.EndToEndFlowSegment;
import org.osate.aadl2.EnumerationLiteral;
import org.osate.aadl2.EnumerationType;
import org.osate.aadl2.EventDataPort;
import org.osate.aadl2.EventDataSource;
import org.osate.aadl2.EventPort;
import org.osate.aadl2.EventSource;
import org.osate.aadl2.FeatureConnection;
import org.osate.aadl2.FeatureGroup;
import org.osate.aadl2.FeatureGroupConnection;
import org.osate.aadl2.FeatureGroupPrototype;
import org.osate.aadl2.FeatureGroupPrototypeActual;
import org.osate.aadl2.FeatureGroupPrototypeBinding;
import org.osate.aadl2.FeatureGroupType;
import org.osate.aadl2.FeatureGroupTypeRename;
import org.osate.aadl2.FeaturePrototype;
import org.osate.aadl2.FeaturePrototypeBinding;
import org.osate.aadl2.FeaturePrototypeReference;
import org.osate.aadl2.FlowEnd;
import org.osate.aadl2.FlowImplementation;
import org.osate.aadl2.FlowSegment;
import org.osate.aadl2.FlowSpecification;
import org.osate.aadl2.GroupExtension;
import org.osate.aadl2.ImplementationExtension;
import org.osate.aadl2.IntegerLiteral;
import org.osate.aadl2.ListType;
import org.osate.aadl2.ListValue;
import org.osate.aadl2.MemoryImplementation;
import org.osate.aadl2.MemoryPrototype;
import org.osate.aadl2.MemorySubcomponent;
import org.osate.aadl2.MemoryType;
import org.osate.aadl2.MetaclassReference;
import org.osate.aadl2.ModalPropertyValue;
import org.osate.aadl2.Mode;
import org.osate.aadl2.ModeBinding;
import org.osate.aadl2.ModeTransition;
import org.osate.aadl2.ModeTransitionTrigger;
import org.osate.aadl2.NamedValue;
import org.osate.aadl2.NumericRange;
import org.osate.aadl2.Operation;
import org.osate.aadl2.PackageRename;
import org.osate.aadl2.ParameterConnection;
import org.osate.aadl2.PortConnection;
import org.osate.aadl2.PortProxy;
import org.osate.aadl2.PortSpecification;
import org.osate.aadl2.PrivatePackageSection;
import org.osate.aadl2.ProcessImplementation;
import org.osate.aadl2.ProcessPrototype;
import org.osate.aadl2.ProcessSubcomponent;
import org.osate.aadl2.ProcessType;
import org.osate.aadl2.ProcessorImplementation;
import org.osate.aadl2.ProcessorPrototype;
import org.osate.aadl2.ProcessorSubcomponent;
import org.osate.aadl2.ProcessorType;
import org.osate.aadl2.Property;
import org.osate.aadl2.PropertyAssociation;
import org.osate.aadl2.PropertyConstant;
import org.osate.aadl2.PropertySet;
import org.osate.aadl2.PublicPackageSection;
import org.osate.aadl2.RangeType;
import org.osate.aadl2.RangeValue;
import org.osate.aadl2.RealLiteral;
import org.osate.aadl2.Realization;
import org.osate.aadl2.RecordType;
import org.osate.aadl2.RecordValue;
import org.osate.aadl2.ReferenceType;
import org.osate.aadl2.ReferenceValue;
import org.osate.aadl2.StringLiteral;
import org.osate.aadl2.SubprogramAccess;
import org.osate.aadl2.SubprogramCall;
import org.osate.aadl2.SubprogramCallSequence;
import org.osate.aadl2.SubprogramGroupAccess;
import org.osate.aadl2.SubprogramGroupImplementation;
import org.osate.aadl2.SubprogramGroupPrototype;
import org.osate.aadl2.SubprogramGroupSubcomponent;
import org.osate.aadl2.SubprogramGroupType;
import org.osate.aadl2.SubprogramImplementation;
import org.osate.aadl2.SubprogramPrototype;
import org.osate.aadl2.SubprogramProxy;
import org.osate.aadl2.SubprogramSubcomponent;
import org.osate.aadl2.SubprogramType;
import org.osate.aadl2.SystemImplementation;
import org.osate.aadl2.SystemPrototype;
import org.osate.aadl2.SystemSubcomponent;
import org.osate.aadl2.SystemType;
import org.osate.aadl2.ThreadGroupImplementation;
import org.osate.aadl2.ThreadGroupPrototype;
import org.osate.aadl2.ThreadGroupSubcomponent;
import org.osate.aadl2.ThreadGroupType;
import org.osate.aadl2.ThreadImplementation;
import org.osate.aadl2.ThreadPrototype;
import org.osate.aadl2.ThreadSubcomponent;
import org.osate.aadl2.ThreadType;
import org.osate.aadl2.TypeExtension;
import org.osate.aadl2.UnitLiteral;
import org.osate.aadl2.UnitsType;
import org.osate.aadl2.VirtualBusImplementation;
import org.osate.aadl2.VirtualBusPrototype;
import org.osate.aadl2.VirtualBusSubcomponent;
import org.osate.aadl2.VirtualBusType;
import org.osate.aadl2.VirtualProcessorImplementation;
import org.osate.aadl2.VirtualProcessorPrototype;
import org.osate.aadl2.VirtualProcessorSubcomponent;
import org.osate.aadl2.VirtualProcessorType;
import org.osate.xtext.aadl2.mcs.mcs.Basic_type;
import org.osate.xtext.aadl2.mcs.mcs.BinaryExpr;
import org.osate.xtext.aadl2.mcs.mcs.BoolExpr;
import org.osate.xtext.aadl2.mcs.mcs.BuiltInFnCall;
import org.osate.xtext.aadl2.mcs.mcs.BuiltInFnCallExpr;
import org.osate.xtext.aadl2.mcs.mcs.ClaimArg;
import org.osate.xtext.aadl2.mcs.mcs.ClaimBody;
import org.osate.xtext.aadl2.mcs.mcs.ClaimString;
import org.osate.xtext.aadl2.mcs.mcs.Classifier_literal;
import org.osate.xtext.aadl2.mcs.mcs.Classifiers;
import org.osate.xtext.aadl2.mcs.mcs.CompExpr;
import org.osate.xtext.aadl2.mcs.mcs.Constant_declaration;
import org.osate.xtext.aadl2.mcs.mcs.Domain;
import org.osate.xtext.aadl2.mcs.mcs.Element_type;
import org.osate.xtext.aadl2.mcs.mcs.Empty;
import org.osate.xtext.aadl2.mcs.mcs.Expr;
import org.osate.xtext.aadl2.mcs.mcs.F_or_T;
import org.osate.xtext.aadl2.mcs.mcs.FilterMapExpr;
import org.osate.xtext.aadl2.mcs.mcs.FnCall;
import org.osate.xtext.aadl2.mcs.mcs.FnCallExpr;
import org.osate.xtext.aadl2.mcs.mcs.FunctionBody;
import org.osate.xtext.aadl2.mcs.mcs.Id_type_pair;
import org.osate.xtext.aadl2.mcs.mcs.IfThenElseExpr;
import org.osate.xtext.aadl2.mcs.mcs.InstanceOfExpr;
import org.osate.xtext.aadl2.mcs.mcs.Instances;
import org.osate.xtext.aadl2.mcs.mcs.IntExpr;
import org.osate.xtext.aadl2.mcs.mcs.LetExpr;
import org.osate.xtext.aadl2.mcs.mcs.Let_binding;
import org.osate.xtext.aadl2.mcs.mcs.List_type;
import org.osate.xtext.aadl2.mcs.mcs.MCSAnnexLibrary;
import org.osate.xtext.aadl2.mcs.mcs.MCSAnnexSubclause;
import org.osate.xtext.aadl2.mcs.mcs.MCSFileLibrary;
import org.osate.xtext.aadl2.mcs.mcs.MCSGrammarRoot;
import org.osate.xtext.aadl2.mcs.mcs.MCSNameExpr;
import org.osate.xtext.aadl2.mcs.mcs.Mapping_type;
import org.osate.xtext.aadl2.mcs.mcs.McsName;
import org.osate.xtext.aadl2.mcs.mcs.McsPackage;
import org.osate.xtext.aadl2.mcs.mcs.Mcs_name_ref;
import org.osate.xtext.aadl2.mcs.mcs.ParameterizedString;
import org.osate.xtext.aadl2.mcs.mcs.PkgExpr;
import org.osate.xtext.aadl2.mcs.mcs.PostCastExpr;
import org.osate.xtext.aadl2.mcs.mcs.QuantifiedExpr;
import org.osate.xtext.aadl2.mcs.mcs.Range;
import org.osate.xtext.aadl2.mcs.mcs.RealExpr;
import org.osate.xtext.aadl2.mcs.mcs.Record_type;
import org.osate.xtext.aadl2.mcs.mcs.RefExpr;
import org.osate.xtext.aadl2.mcs.mcs.RefTerm;
import org.osate.xtext.aadl2.mcs.mcs.SetExpr;
import org.osate.xtext.aadl2.mcs.mcs.Set_type;
import org.osate.xtext.aadl2.mcs.mcs.StringExpr;
import org.osate.xtext.aadl2.mcs.mcs.T_classifier_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.TheoremCall;
import org.osate.xtext.aadl2.mcs.mcs.Theorem_root;
import org.osate.xtext.aadl2.mcs.mcs.ThisExpr;
import org.osate.xtext.aadl2.mcs.mcs.Type_declaration;
import org.osate.xtext.aadl2.mcs.mcs.Type_expression;
import org.osate.xtext.aadl2.mcs.mcs.UnaryExpr;
import org.osate.xtext.aadl2.mcs.mcs.Union_type;
import org.osate.xtext.aadl2.mcs.mcs.t_access_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_component_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_connection_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_feature_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_flow_impl_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_flow_spec_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_instance_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_port_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_subcomponent_subtypes;
import org.osate.xtext.aadl2.mcs.services.MCSGrammarAccess;
import org.osate.xtext.aadl2.serializer.Aadl2SemanticSequencer;

@SuppressWarnings("all")
public class MCSSemanticSequencer extends Aadl2SemanticSequencer {

	@Inject
	private MCSGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Aadl2Package.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Aadl2Package.ENUMERATION_LITERAL:
				sequence_EnumerationLiteral(context, (EnumerationLiteral) semanticObject); 
				return; 
			case Aadl2Package.INTEGER_LITERAL:
				sequence_IntegerTerm(context, (IntegerLiteral) semanticObject); 
				return; 
			case Aadl2Package.NUMERIC_RANGE:
				sequence_Range(context, (NumericRange) semanticObject); 
				return; 
			case Aadl2Package.REAL_LITERAL:
				sequence_RealTerm(context, (RealLiteral) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == Aadl2Package.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Aadl2Package.AADL_BOOLEAN:
				if(context == grammarAccess.getBooleanTypeRule() ||
				   context == grammarAccess.getPropertyTypeRule()) {
					sequence_BooleanType(context, (AadlBoolean) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedBooleanTypeRule() ||
				   context == grammarAccess.getUnnamedPropertyTypeRule()) {
					sequence_UnnamedBooleanType(context, (AadlBoolean) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.AADL_INTEGER:
				if(context == grammarAccess.getIntegerTypeRule() ||
				   context == grammarAccess.getPropertyTypeRule()) {
					sequence_IntegerType(context, (AadlInteger) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedIntegerTypeRule() ||
				   context == grammarAccess.getUnnamedPropertyTypeRule()) {
					sequence_UnnamedIntegerType(context, (AadlInteger) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.AADL_PACKAGE:
				sequence_AadlPackage(context, (AadlPackage) semanticObject); 
				return; 
			case Aadl2Package.AADL_REAL:
				if(context == grammarAccess.getPropertyTypeRule() ||
				   context == grammarAccess.getRealTypeRule()) {
					sequence_RealType(context, (AadlReal) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedPropertyTypeRule() ||
				   context == grammarAccess.getUnnamedRealTypeRule()) {
					sequence_UnnamedRealType(context, (AadlReal) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.AADL_STRING:
				if(context == grammarAccess.getPropertyTypeRule() ||
				   context == grammarAccess.getStringTypeRule()) {
					sequence_StringType(context, (AadlString) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedPropertyTypeRule() ||
				   context == grammarAccess.getUnnamedStringTypeRule()) {
					sequence_UnnamedStringType(context, (AadlString) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.ABSTRACT_FEATURE:
				sequence_AbstractFeature(context, (AbstractFeature) semanticObject); 
				return; 
			case Aadl2Package.ABSTRACT_IMPLEMENTATION:
				sequence_AbstractImplementation(context, (AbstractImplementation) semanticObject); 
				return; 
			case Aadl2Package.ABSTRACT_PROTOTYPE:
				if(context == grammarAccess.getAbstractPrototypeRule() ||
				   context == grammarAccess.getComponentPrototypeRule()) {
					sequence_AbstractPrototype(context, (AbstractPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_AbstractPrototype_Prototype(context, (AbstractPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.ABSTRACT_SUBCOMPONENT:
				sequence_AbstractSubcomponent(context, (AbstractSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.ABSTRACT_TYPE:
				sequence_AbstractType(context, (AbstractType) semanticObject); 
				return; 
			case Aadl2Package.ACCESS_CONNECTION:
				sequence_AccessConnection(context, (AccessConnection) semanticObject); 
				return; 
			case Aadl2Package.ACCESS_SPECIFICATION:
				sequence_AccessSpecification(context, (AccessSpecification) semanticObject); 
				return; 
			case Aadl2Package.ARRAY_DIMENSION:
				sequence_ArrayDimension(context, (ArrayDimension) semanticObject); 
				return; 
			case Aadl2Package.ARRAY_RANGE:
				sequence_ArrayRange(context, (ArrayRange) semanticObject); 
				return; 
			case Aadl2Package.ARRAY_SIZE:
				sequence_ArraySize(context, (ArraySize) semanticObject); 
				return; 
			case Aadl2Package.BASIC_PROPERTY:
				sequence_RecordField(context, (BasicProperty) semanticObject); 
				return; 
			case Aadl2Package.BASIC_PROPERTY_ASSOCIATION:
				sequence_FieldPropertyAssociation(context, (BasicPropertyAssociation) semanticObject); 
				return; 
			case Aadl2Package.BOOLEAN_LITERAL:
				sequence_BooleanLiteral(context, (BooleanLiteral) semanticObject); 
				return; 
			case Aadl2Package.BUS_ACCESS:
				sequence_BusAccess(context, (BusAccess) semanticObject); 
				return; 
			case Aadl2Package.BUS_IMPLEMENTATION:
				sequence_BusImplementation(context, (BusImplementation) semanticObject); 
				return; 
			case Aadl2Package.BUS_PROTOTYPE:
				if(context == grammarAccess.getBusPrototypeRule() ||
				   context == grammarAccess.getComponentPrototypeRule()) {
					sequence_BusPrototype(context, (BusPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_BusPrototype_Prototype(context, (BusPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.BUS_SUBCOMPONENT:
				sequence_BusSubcomponent(context, (BusSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.BUS_TYPE:
				sequence_BusType(context, (BusType) semanticObject); 
				return; 
			case Aadl2Package.CLASSIFIER_TYPE:
				if(context == grammarAccess.getClassifierTypeRule() ||
				   context == grammarAccess.getPropertyTypeRule()) {
					sequence_ClassifierType(context, (ClassifierType) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedClassifierTypeRule() ||
				   context == grammarAccess.getUnnamedPropertyTypeRule()) {
					sequence_UnnamedClassifierType(context, (ClassifierType) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.CLASSIFIER_VALUE:
				if(context == grammarAccess.getComponentClassifierTermRule() ||
				   context == grammarAccess.getConstantPropertyExpressionRule() ||
				   context == grammarAccess.getPropertyExpressionRule()) {
					sequence_ComponentClassifierTerm(context, (ClassifierValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPropertyOwnerRule() ||
				   context == grammarAccess.getQCReferenceRule()) {
					sequence_QCReference(context, (ClassifierValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.COMPONENT_IMPLEMENTATION_REFERENCE:
				sequence_ComponentImplementationReference(context, (ComponentImplementationReference) semanticObject); 
				return; 
			case Aadl2Package.COMPONENT_PROTOTYPE_ACTUAL:
				sequence_ComponentReference(context, (ComponentPrototypeActual) semanticObject); 
				return; 
			case Aadl2Package.COMPONENT_PROTOTYPE_BINDING:
				sequence_ComponentPrototypeBinding(context, (ComponentPrototypeBinding) semanticObject); 
				return; 
			case Aadl2Package.COMPONENT_TYPE_RENAME:
				sequence_CTRename(context, (ComponentTypeRename) semanticObject); 
				return; 
			case Aadl2Package.COMPUTED_VALUE:
				sequence_ComputedTerm(context, (ComputedValue) semanticObject); 
				return; 
			case Aadl2Package.CONNECTED_ELEMENT:
				if(context == grammarAccess.getAbstractConnectionEndRule()) {
					sequence_AbstractConnectionEnd_ConnectedElement_InternalEvent_ProcessorPort(context, (ConnectedElement) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAccessConnectionEndRule()) {
					sequence_AccessConnectionEnd_ConnectedElement_ProcessorSubprogram(context, (ConnectedElement) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getConnectedElementRule()) {
					sequence_ConnectedElement(context, (ConnectedElement) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getProcessorConnectionEndRule()) {
					sequence_ConnectedElement_ProcessorConnectionEnd_ProcessorPort(context, (ConnectedElement) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getInternalEventRule()) {
					sequence_InternalEvent(context, (ConnectedElement) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getProcessorPortRule()) {
					sequence_ProcessorPort(context, (ConnectedElement) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getProcessorSubprogramRule()) {
					sequence_ProcessorSubprogram(context, (ConnectedElement) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.CONTAINED_NAMED_ELEMENT:
				sequence_ContainmentPath(context, (ContainedNamedElement) semanticObject); 
				return; 
			case Aadl2Package.CONTAINMENT_PATH_ELEMENT:
				sequence_ContainmentPathElement(context, (ContainmentPathElement) semanticObject); 
				return; 
			case Aadl2Package.DATA_ACCESS:
				sequence_DataAccess(context, (DataAccess) semanticObject); 
				return; 
			case Aadl2Package.DATA_IMPLEMENTATION:
				sequence_DataImplementation(context, (DataImplementation) semanticObject); 
				return; 
			case Aadl2Package.DATA_PORT:
				sequence_DataPort(context, (DataPort) semanticObject); 
				return; 
			case Aadl2Package.DATA_PROTOTYPE:
				if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getDataPrototypeRule()) {
					sequence_DataPrototype(context, (DataPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_DataPrototype_Prototype(context, (DataPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.DATA_SUBCOMPONENT:
				sequence_DataSubcomponent(context, (DataSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case Aadl2Package.DEFAULT_ANNEX_LIBRARY:
				sequence_DefaultAnnexLibrary(context, (DefaultAnnexLibrary) semanticObject); 
				return; 
			case Aadl2Package.DEFAULT_ANNEX_SUBCLAUSE:
				sequence_DefaultAnnexSubclause(context, (DefaultAnnexSubclause) semanticObject); 
				return; 
			case Aadl2Package.DEVICE_IMPLEMENTATION:
				sequence_DeviceImplementation(context, (DeviceImplementation) semanticObject); 
				return; 
			case Aadl2Package.DEVICE_PROTOTYPE:
				if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getDevicePrototypeRule()) {
					sequence_DevicePrototype(context, (DevicePrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_DevicePrototype_Prototype(context, (DevicePrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.DEVICE_SUBCOMPONENT:
				sequence_DeviceSubcomponent(context, (DeviceSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.DEVICE_TYPE:
				sequence_DeviceType(context, (DeviceType) semanticObject); 
				return; 
			case Aadl2Package.END_TO_END_FLOW:
				sequence_EndToEndFlow(context, (EndToEndFlow) semanticObject); 
				return; 
			case Aadl2Package.END_TO_END_FLOW_SEGMENT:
				if(context == grammarAccess.getETEConnectionFlowRule()) {
					sequence_ETEConnectionFlow(context, (EndToEndFlowSegment) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getETESubcomponentFlowRule()) {
					sequence_ETESubcomponentFlow(context, (EndToEndFlowSegment) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.ENUMERATION_TYPE:
				if(context == grammarAccess.getEnumerationTypeRule() ||
				   context == grammarAccess.getPropertyTypeRule()) {
					sequence_EnumerationType(context, (EnumerationType) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedEnumerationTypeRule() ||
				   context == grammarAccess.getUnnamedPropertyTypeRule()) {
					sequence_UnnamedEnumerationType(context, (EnumerationType) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.EVENT_DATA_PORT:
				sequence_EventDataPort(context, (EventDataPort) semanticObject); 
				return; 
			case Aadl2Package.EVENT_DATA_SOURCE:
				sequence_EventDataSource(context, (EventDataSource) semanticObject); 
				return; 
			case Aadl2Package.EVENT_PORT:
				sequence_EventPort(context, (EventPort) semanticObject); 
				return; 
			case Aadl2Package.EVENT_SOURCE:
				sequence_EventSource(context, (EventSource) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_CONNECTION:
				sequence_FeatureConnection(context, (FeatureConnection) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_GROUP:
				sequence_FeatureGroup(context, (FeatureGroup) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_GROUP_CONNECTION:
				sequence_FeatureGroupConnection(context, (FeatureGroupConnection) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_GROUP_PROTOTYPE:
				if(context == grammarAccess.getFeatureGroupPrototypeRule()) {
					sequence_FeatureGroupPrototype(context, (FeatureGroupPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_FeatureGroupPrototype_Prototype(context, (FeatureGroupPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.FEATURE_GROUP_PROTOTYPE_ACTUAL:
				sequence_FeatureGroupPrototypeActual(context, (FeatureGroupPrototypeActual) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_GROUP_PROTOTYPE_BINDING:
				sequence_FeatureGroupPrototypeBinding(context, (FeatureGroupPrototypeBinding) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_GROUP_TYPE:
				sequence_FeatureGroupType(context, (FeatureGroupType) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_GROUP_TYPE_RENAME:
				sequence_FGTRename(context, (FeatureGroupTypeRename) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_PROTOTYPE:
				if(context == grammarAccess.getFeaturePrototypeRule()) {
					sequence_FeaturePrototype(context, (FeaturePrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_FeaturePrototype_Prototype(context, (FeaturePrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.FEATURE_PROTOTYPE_BINDING:
				sequence_FeaturePrototypeBinding(context, (FeaturePrototypeBinding) semanticObject); 
				return; 
			case Aadl2Package.FEATURE_PROTOTYPE_REFERENCE:
				sequence_FeaturePrototypeReference(context, (FeaturePrototypeReference) semanticObject); 
				return; 
			case Aadl2Package.FLOW_END:
				sequence_FlowEnd(context, (FlowEnd) semanticObject); 
				return; 
			case Aadl2Package.FLOW_IMPLEMENTATION:
				if(context == grammarAccess.getFlowImplementationRule()) {
					sequence_FlowImplementation_FlowPathImpl_FlowSinkImpl_FlowSourceImpl(context, (FlowImplementation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFlowPathImplRule()) {
					sequence_FlowPathImpl(context, (FlowImplementation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFlowSinkImplRule()) {
					sequence_FlowSinkImpl(context, (FlowImplementation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFlowSourceImplRule()) {
					sequence_FlowSourceImpl(context, (FlowImplementation) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.FLOW_SEGMENT:
				if(context == grammarAccess.getConnectionFlowRule()) {
					sequence_ConnectionFlow(context, (FlowSegment) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getSubcomponentFlowRule()) {
					sequence_SubcomponentFlow(context, (FlowSegment) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.FLOW_SPECIFICATION:
				if(context == grammarAccess.getFlowSpecificationRule()) {
					sequence_FlowPathSpec_FlowSinkSpec_FlowSourceSpec_FlowSpecRefinement_FlowSpecification(context, (FlowSpecification) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFlowPathSpecRule()) {
					sequence_FlowPathSpec(context, (FlowSpecification) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFlowSinkSpecRule()) {
					sequence_FlowSinkSpec(context, (FlowSpecification) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFlowSourceSpecRule()) {
					sequence_FlowSourceSpec(context, (FlowSpecification) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getFlowSpecRefinementRule()) {
					sequence_FlowSpecRefinement(context, (FlowSpecification) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.GROUP_EXTENSION:
				sequence_GroupExtension(context, (GroupExtension) semanticObject); 
				return; 
			case Aadl2Package.IMPLEMENTATION_EXTENSION:
				sequence_ImplementationExtension(context, (ImplementationExtension) semanticObject); 
				return; 
			case Aadl2Package.INTEGER_LITERAL:
				sequence_IntegerLit(context, (IntegerLiteral) semanticObject); 
				return; 
			case Aadl2Package.LIST_TYPE:
				sequence_ListType(context, (ListType) semanticObject); 
				return; 
			case Aadl2Package.LIST_VALUE:
				sequence_ListTerm(context, (ListValue) semanticObject); 
				return; 
			case Aadl2Package.MEMORY_IMPLEMENTATION:
				sequence_MemoryImplementation(context, (MemoryImplementation) semanticObject); 
				return; 
			case Aadl2Package.MEMORY_PROTOTYPE:
				if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getMemoryPrototypeRule()) {
					sequence_MemoryPrototype(context, (MemoryPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_MemoryPrototype_Prototype(context, (MemoryPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.MEMORY_SUBCOMPONENT:
				sequence_MemorySubcomponent(context, (MemorySubcomponent) semanticObject); 
				return; 
			case Aadl2Package.MEMORY_TYPE:
				sequence_MemoryType(context, (MemoryType) semanticObject); 
				return; 
			case Aadl2Package.METACLASS_REFERENCE:
				if(context == grammarAccess.getAllReferenceRule()) {
					sequence_AllReference(context, (MetaclassReference) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPropertyOwnerRule() ||
				   context == grammarAccess.getQMReferenceRule()) {
					sequence_QMReference(context, (MetaclassReference) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.MODAL_PROPERTY_VALUE:
				if(context == grammarAccess.getModalPropertyValueRule()) {
					sequence_ModalPropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getOptionalModalPropertyValueRule()) {
					sequence_OptionalModalPropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPropertyValueRule()) {
					sequence_PropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.MODE:
				sequence_Mode(context, (Mode) semanticObject); 
				return; 
			case Aadl2Package.MODE_BINDING:
				sequence_ModeRef(context, (ModeBinding) semanticObject); 
				return; 
			case Aadl2Package.MODE_TRANSITION:
				sequence_ModeTransition(context, (ModeTransition) semanticObject); 
				return; 
			case Aadl2Package.MODE_TRANSITION_TRIGGER:
				sequence_Trigger(context, (ModeTransitionTrigger) semanticObject); 
				return; 
			case Aadl2Package.NAMED_VALUE:
				if(context == grammarAccess.getConstantValueRule() ||
				   context == grammarAccess.getNumAltRule()) {
					sequence_ConstantValue(context, (NamedValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getConstantPropertyExpressionRule() ||
				   context == grammarAccess.getLiteralorReferenceTermRule() ||
				   context == grammarAccess.getPropertyExpressionRule()) {
					sequence_LiteralorReferenceTerm(context, (NamedValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.NUMERIC_RANGE:
				if(context == grammarAccess.getIntegerRangeRule()) {
					sequence_IntegerRange(context, (NumericRange) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getRealRangeRule()) {
					sequence_RealRange(context, (NumericRange) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.OPERATION:
				sequence_SignedConstant(context, (Operation) semanticObject); 
				return; 
			case Aadl2Package.PACKAGE_RENAME:
				if(context == grammarAccess.getPackageRenameRule()) {
					sequence_PackageRename(context, (PackageRename) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getRenameAllRule()) {
					sequence_RenameAll(context, (PackageRename) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.PARAMETER_CONNECTION:
				sequence_ParameterConnection(context, (ParameterConnection) semanticObject); 
				return; 
			case Aadl2Package.PORT_CONNECTION:
				sequence_PortConnection(context, (PortConnection) semanticObject); 
				return; 
			case Aadl2Package.PORT_PROXY:
				sequence_PortProxy(context, (PortProxy) semanticObject); 
				return; 
			case Aadl2Package.PORT_SPECIFICATION:
				sequence_PortSpecification(context, (PortSpecification) semanticObject); 
				return; 
			case Aadl2Package.PRIVATE_PACKAGE_SECTION:
				sequence_PrivatePackageSection(context, (PrivatePackageSection) semanticObject); 
				return; 
			case Aadl2Package.PROCESS_IMPLEMENTATION:
				sequence_ProcessImplementation(context, (ProcessImplementation) semanticObject); 
				return; 
			case Aadl2Package.PROCESS_PROTOTYPE:
				if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getProcessPrototypeRule()) {
					sequence_ProcessPrototype(context, (ProcessPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_ProcessPrototype_Prototype(context, (ProcessPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.PROCESS_SUBCOMPONENT:
				sequence_ProcessSubcomponent(context, (ProcessSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.PROCESS_TYPE:
				sequence_ProcessType(context, (ProcessType) semanticObject); 
				return; 
			case Aadl2Package.PROCESSOR_IMPLEMENTATION:
				sequence_ProcessorImplementation(context, (ProcessorImplementation) semanticObject); 
				return; 
			case Aadl2Package.PROCESSOR_PROTOTYPE:
				if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getProcessorPrototypeRule()) {
					sequence_ProcessorPrototype(context, (ProcessorPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrototypeRule()) {
					sequence_ProcessorPrototype_Prototype(context, (ProcessorPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.PROCESSOR_SUBCOMPONENT:
				sequence_ProcessorSubcomponent(context, (ProcessorSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.PROCESSOR_TYPE:
				sequence_ProcessorType(context, (ProcessorType) semanticObject); 
				return; 
			case Aadl2Package.PROPERTY:
				sequence_PropertyDefinition(context, (Property) semanticObject); 
				return; 
			case Aadl2Package.PROPERTY_ASSOCIATION:
				if(context == grammarAccess.getBasicPropertyAssociationRule()) {
					sequence_BasicPropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getContainedPropertyAssociationRule() ||
				   context == grammarAccess.getPModelRule()) {
					sequence_ContainedPropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPropertyAssociationRule()) {
					sequence_PropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.PROPERTY_CONSTANT:
				sequence_PropertyConstant(context, (PropertyConstant) semanticObject); 
				return; 
			case Aadl2Package.PROPERTY_SET:
				sequence_PropertySet(context, (PropertySet) semanticObject); 
				return; 
			case Aadl2Package.PUBLIC_PACKAGE_SECTION:
				sequence_PublicPackageSection(context, (PublicPackageSection) semanticObject); 
				return; 
			case Aadl2Package.RANGE_TYPE:
				if(context == grammarAccess.getPropertyTypeRule() ||
				   context == grammarAccess.getRangeTypeRule()) {
					sequence_RangeType(context, (RangeType) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedPropertyTypeRule() ||
				   context == grammarAccess.getUnnamedRangeTypeRule()) {
					sequence_UnnamedRangeType(context, (RangeType) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.RANGE_VALUE:
				sequence_NumericRangeTerm(context, (RangeValue) semanticObject); 
				return; 
			case Aadl2Package.REAL_LITERAL:
				sequence_RealLit(context, (RealLiteral) semanticObject); 
				return; 
			case Aadl2Package.REALIZATION:
				sequence_Realization(context, (Realization) semanticObject); 
				return; 
			case Aadl2Package.RECORD_TYPE:
				if(context == grammarAccess.getPropertyTypeRule() ||
				   context == grammarAccess.getRecordTypeRule()) {
					sequence_RecordType(context, (RecordType) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedPropertyTypeRule() ||
				   context == grammarAccess.getUnnamedRecordTypeRule()) {
					sequence_UnnamedRecordType(context, (RecordType) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.RECORD_VALUE:
				if(context == grammarAccess.getOldRecordTermRule()) {
					sequence_OldRecordTerm(context, (RecordValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getConstantPropertyExpressionRule() ||
				   context == grammarAccess.getPropertyExpressionRule() ||
				   context == grammarAccess.getRecordTermRule()) {
					sequence_RecordTerm(context, (RecordValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.REFERENCE_TYPE:
				if(context == grammarAccess.getPropertyTypeRule() ||
				   context == grammarAccess.getReferenceTypeRule()) {
					sequence_ReferenceType(context, (ReferenceType) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedPropertyTypeRule() ||
				   context == grammarAccess.getUnnamedReferenceTypeRule()) {
					sequence_UnnamedReferenceType(context, (ReferenceType) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.REFERENCE_VALUE:
				sequence_ReferenceTerm(context, (ReferenceValue) semanticObject); 
				return; 
			case Aadl2Package.STRING_LITERAL:
				sequence_StringTerm(context, (StringLiteral) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_ACCESS:
				sequence_SubprogramAccess(context, (SubprogramAccess) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_CALL:
				sequence_SubprogramCall(context, (SubprogramCall) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_CALL_SEQUENCE:
				sequence_SubprogramCallSequence(context, (SubprogramCallSequence) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_GROUP_ACCESS:
				sequence_SubprogramGroupAccess(context, (SubprogramGroupAccess) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_GROUP_IMPLEMENTATION:
				sequence_SubprogramGroupImplementation(context, (SubprogramGroupImplementation) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_GROUP_PROTOTYPE:
				if(context == grammarAccess.getPrototypeRule()) {
					sequence_Prototype_SubprogramGroupPrototype(context, (SubprogramGroupPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getSubprogramGroupPrototypeRule()) {
					sequence_SubprogramGroupPrototype(context, (SubprogramGroupPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.SUBPROGRAM_GROUP_SUBCOMPONENT:
				sequence_SubprogramGroupSubcomponent(context, (SubprogramGroupSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_GROUP_TYPE:
				sequence_SubprogramGroupType(context, (SubprogramGroupType) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_IMPLEMENTATION:
				sequence_SubprogramImplementation(context, (SubprogramImplementation) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_PROTOTYPE:
				if(context == grammarAccess.getPrototypeRule()) {
					sequence_Prototype_SubprogramPrototype(context, (SubprogramPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getSubprogramPrototypeRule()) {
					sequence_SubprogramPrototype(context, (SubprogramPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.SUBPROGRAM_PROXY:
				sequence_SubprogramProxy(context, (SubprogramProxy) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_SUBCOMPONENT:
				sequence_SubprogramSubcomponent(context, (SubprogramSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.SUBPROGRAM_TYPE:
				sequence_SubprogramType(context, (SubprogramType) semanticObject); 
				return; 
			case Aadl2Package.SYSTEM_IMPLEMENTATION:
				sequence_SystemImplementation(context, (SystemImplementation) semanticObject); 
				return; 
			case Aadl2Package.SYSTEM_PROTOTYPE:
				if(context == grammarAccess.getPrototypeRule()) {
					sequence_Prototype_SystemPrototype(context, (SystemPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getSystemPrototypeRule()) {
					sequence_SystemPrototype(context, (SystemPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.SYSTEM_SUBCOMPONENT:
				sequence_SystemSubcomponent(context, (SystemSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.SYSTEM_TYPE:
				sequence_SystemType(context, (SystemType) semanticObject); 
				return; 
			case Aadl2Package.THREAD_GROUP_IMPLEMENTATION:
				sequence_ThreadGroupImplementation(context, (ThreadGroupImplementation) semanticObject); 
				return; 
			case Aadl2Package.THREAD_GROUP_PROTOTYPE:
				if(context == grammarAccess.getPrototypeRule()) {
					sequence_Prototype_ThreadGroupPrototype(context, (ThreadGroupPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getThreadGroupPrototypeRule()) {
					sequence_ThreadGroupPrototype(context, (ThreadGroupPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.THREAD_GROUP_SUBCOMPONENT:
				sequence_ThreadGroupSubcomponent(context, (ThreadGroupSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.THREAD_GROUP_TYPE:
				sequence_ThreadGroupType(context, (ThreadGroupType) semanticObject); 
				return; 
			case Aadl2Package.THREAD_IMPLEMENTATION:
				sequence_ThreadImplementation(context, (ThreadImplementation) semanticObject); 
				return; 
			case Aadl2Package.THREAD_PROTOTYPE:
				if(context == grammarAccess.getPrototypeRule()) {
					sequence_Prototype_ThreadPrototype(context, (ThreadPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getThreadPrototypeRule()) {
					sequence_ThreadPrototype(context, (ThreadPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.THREAD_SUBCOMPONENT:
				sequence_ThreadSubcomponent(context, (ThreadSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.THREAD_TYPE:
				sequence_ThreadType(context, (ThreadType) semanticObject); 
				return; 
			case Aadl2Package.TYPE_EXTENSION:
				sequence_TypeExtension(context, (TypeExtension) semanticObject); 
				return; 
			case Aadl2Package.UNIT_LITERAL:
				if(context == grammarAccess.getUnitLiteralConversionRule()) {
					sequence_UnitLiteralConversion(context, (UnitLiteral) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnitLiteralRule()) {
					sequence_UnitLiteral(context, (UnitLiteral) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.UNITS_TYPE:
				if(context == grammarAccess.getPropertyTypeRule() ||
				   context == grammarAccess.getUnitsTypeRule()) {
					sequence_UnitsType(context, (UnitsType) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnnamedPropertyTypeRule() ||
				   context == grammarAccess.getUnnamedUnitsTypeRule()) {
					sequence_UnnamedUnitsType(context, (UnitsType) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.VIRTUAL_BUS_IMPLEMENTATION:
				sequence_VirtualBusImplementation(context, (VirtualBusImplementation) semanticObject); 
				return; 
			case Aadl2Package.VIRTUAL_BUS_PROTOTYPE:
				if(context == grammarAccess.getPrototypeRule()) {
					sequence_Prototype_VirtualBusPrototype(context, (VirtualBusPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getVirtualBusPrototypeRule()) {
					sequence_VirtualBusPrototype(context, (VirtualBusPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.VIRTUAL_BUS_SUBCOMPONENT:
				sequence_VirtualBusSubcomponent(context, (VirtualBusSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.VIRTUAL_BUS_TYPE:
				sequence_VirtualBusType(context, (VirtualBusType) semanticObject); 
				return; 
			case Aadl2Package.VIRTUAL_PROCESSOR_IMPLEMENTATION:
				sequence_VirtualProcessorImplementation(context, (VirtualProcessorImplementation) semanticObject); 
				return; 
			case Aadl2Package.VIRTUAL_PROCESSOR_PROTOTYPE:
				if(context == grammarAccess.getPrototypeRule()) {
					sequence_Prototype_VirtualProcessorPrototype(context, (VirtualProcessorPrototype) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getComponentPrototypeRule() ||
				   context == grammarAccess.getVirtualProcessorPrototypeRule()) {
					sequence_VirtualProcessorPrototype(context, (VirtualProcessorPrototype) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.VIRTUAL_PROCESSOR_SUBCOMPONENT:
				sequence_VirtualProcessorSubcomponent(context, (VirtualProcessorSubcomponent) semanticObject); 
				return; 
			case Aadl2Package.VIRTUAL_PROCESSOR_TYPE:
				sequence_VirtualProcessorType(context, (VirtualProcessorType) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == McsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case McsPackage.BASIC_TYPE:
				sequence_Basic_type(context, (Basic_type) semanticObject); 
				return; 
			case McsPackage.BINARY_EXPR:
				if(context == grammarAccess.getExpression_termRule()) {
					sequence_AndExpr_Expression_term_ImpliesExpr_OrExpr_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(context, (BinaryExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getExprRule() ||
				   context == grammarAccess.getImpliesExprRule()) {
					sequence_AndExpr_ImpliesExpr_OrExpr_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(context, (BinaryExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getOrExprRule() ||
				   context == grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0()) {
					sequence_AndExpr_OrExpr_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(context, (BinaryExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAndExprRule() ||
				   context == grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0()) {
					sequence_AndExpr_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(context, (BinaryExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getInstanceOfExprRule() ||
				   context == grammarAccess.getInstanceOfExprAccess().getInstanceOfExprExprAction_1_0_0_0() ||
				   context == grammarAccess.getRelationalExprRule()) {
					sequence_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(context, (BinaryExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPlusExprRule() ||
				   context == grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0()) {
					sequence_PlusExpr_PrefixExpr_TimesExpr(context, (BinaryExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPrefixExprRule()) {
					sequence_PrefixExpr(context, (BinaryExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getTimesExprRule() ||
				   context == grammarAccess.getTimesExprAccess().getBinaryExprLeftAction_1_0_0_0()) {
					sequence_PrefixExpr_TimesExpr(context, (BinaryExpr) semanticObject); 
					return; 
				}
				else break;
			case McsPackage.BOOL_EXPR:
				sequence_Expression_term(context, (BoolExpr) semanticObject); 
				return; 
			case McsPackage.BUILT_IN_FN_CALL:
				sequence_BuiltInFnCall(context, (BuiltInFnCall) semanticObject); 
				return; 
			case McsPackage.BUILT_IN_FN_CALL_EXPR:
				sequence_Expression_term(context, (BuiltInFnCallExpr) semanticObject); 
				return; 
			case McsPackage.CLAIM_ARG:
				sequence_TextParm(context, (ClaimArg) semanticObject); 
				return; 
			case McsPackage.CLAIM_BODY:
				sequence_DefinitionBody(context, (ClaimBody) semanticObject); 
				return; 
			case McsPackage.CLAIM_STRING:
				sequence_TextParm(context, (ClaimString) semanticObject); 
				return; 
			case McsPackage.CLASSIFIER_LITERAL:
				sequence_Classifier_literal(context, (Classifier_literal) semanticObject); 
				return; 
			case McsPackage.CLASSIFIERS:
				sequence_Classifiers(context, (Classifiers) semanticObject); 
				return; 
			case McsPackage.COMP_EXPR:
				sequence_Expression_term(context, (CompExpr) semanticObject); 
				return; 
			case McsPackage.CONSTANT_DECLARATION:
				sequence_Constant_declaration(context, (Constant_declaration) semanticObject); 
				return; 
			case McsPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case McsPackage.ELEMENT_TYPE:
				sequence_Element_type(context, (Element_type) semanticObject); 
				return; 
			case McsPackage.EMPTY:
				sequence_Expression_term(context, (Empty) semanticObject); 
				return; 
			case McsPackage.EXPR:
				sequence_Expression_term_FilterMapExpr_15_3_0_0_SetExpr_15_3_1_0(context, (Expr) semanticObject); 
				return; 
			case McsPackage.FOR_T:
				sequence_F_or_T_declaration(context, (F_or_T) semanticObject); 
				return; 
			case McsPackage.FILTER_MAP_EXPR:
				sequence_Expression_term(context, (FilterMapExpr) semanticObject); 
				return; 
			case McsPackage.FN_CALL:
				sequence_FnCall(context, (FnCall) semanticObject); 
				return; 
			case McsPackage.FN_CALL_EXPR:
				sequence_Expression_term(context, (FnCallExpr) semanticObject); 
				return; 
			case McsPackage.FUNCTION_BODY:
				sequence_DefinitionBody(context, (FunctionBody) semanticObject); 
				return; 
			case McsPackage.ID_TYPE_PAIR:
				sequence_Id_type_pair(context, (Id_type_pair) semanticObject); 
				return; 
			case McsPackage.IF_THEN_ELSE_EXPR:
				sequence_Expression_term(context, (IfThenElseExpr) semanticObject); 
				return; 
			case McsPackage.INSTANCE_OF_EXPR:
				if(context == grammarAccess.getExpression_termRule()) {
					sequence_Expression_term_InstanceOfExpr(context, (InstanceOfExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAndExprRule() ||
				   context == grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getExprRule() ||
				   context == grammarAccess.getImpliesExprRule() ||
				   context == grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getInstanceOfExprRule() ||
				   context == grammarAccess.getOrExprRule() ||
				   context == grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0()) {
					sequence_InstanceOfExpr(context, (InstanceOfExpr) semanticObject); 
					return; 
				}
				else break;
			case McsPackage.INSTANCES:
				sequence_Instances(context, (Instances) semanticObject); 
				return; 
			case McsPackage.INT_EXPR:
				sequence_Expression_term(context, (IntExpr) semanticObject); 
				return; 
			case McsPackage.LET_EXPR:
				sequence_Expression_term(context, (LetExpr) semanticObject); 
				return; 
			case McsPackage.LET_BINDING:
				sequence_Let_binding(context, (Let_binding) semanticObject); 
				return; 
			case McsPackage.LIST_TYPE:
				sequence_List_type(context, (List_type) semanticObject); 
				return; 
			case McsPackage.MCS_ANNEX_LIBRARY:
				sequence_MCSAnnexLibrary(context, (MCSAnnexLibrary) semanticObject); 
				return; 
			case McsPackage.MCS_ANNEX_SUBCLAUSE:
				sequence_MCSAnnexSubclause(context, (MCSAnnexSubclause) semanticObject); 
				return; 
			case McsPackage.MCS_FILE_LIBRARY:
				sequence_MCSFileLibrary(context, (MCSFileLibrary) semanticObject); 
				return; 
			case McsPackage.MCS_GRAMMAR_ROOT:
				sequence_MCSGrammarRoot(context, (MCSGrammarRoot) semanticObject); 
				return; 
			case McsPackage.MCS_NAME_EXPR:
				sequence_Expression_term(context, (MCSNameExpr) semanticObject); 
				return; 
			case McsPackage.MAPPING_TYPE:
				sequence_Mapping_type(context, (Mapping_type) semanticObject); 
				return; 
			case McsPackage.MCS_NAME:
				if(context == grammarAccess.getMcsNameRule()) {
					sequence_McsName(context, (McsName) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getMcsTypedNameRule() ||
				   context == grammarAccess.getParameterRule()) {
					sequence_McsName_McsTypedName(context, (McsName) semanticObject); 
					return; 
				}
				else break;
			case McsPackage.MCS_NAME_REF:
				sequence_Mcs_name_ref(context, (Mcs_name_ref) semanticObject); 
				return; 
			case McsPackage.PARAMETERIZED_STRING:
				sequence_ParameterizedString(context, (ParameterizedString) semanticObject); 
				return; 
			case McsPackage.PKG_EXPR:
				sequence_Expression_term(context, (PkgExpr) semanticObject); 
				return; 
			case McsPackage.POST_CAST_EXPR:
				if(context == grammarAccess.getExpression_termRule()) {
					sequence_Expression_term_PrefixExpr(context, (PostCastExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAndExprRule() ||
				   context == grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getExprRule() ||
				   context == grammarAccess.getImpliesExprRule() ||
				   context == grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getInstanceOfExprRule() ||
				   context == grammarAccess.getInstanceOfExprAccess().getInstanceOfExprExprAction_1_0_0_0() ||
				   context == grammarAccess.getOrExprRule() ||
				   context == grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getPlusExprRule() ||
				   context == grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getPrefixExprRule() ||
				   context == grammarAccess.getPrefixExprAccess().getBinaryExprLeftAction_1_3_0_0_0() ||
				   context == grammarAccess.getRelationalExprRule() ||
				   context == grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getTimesExprRule() ||
				   context == grammarAccess.getTimesExprAccess().getBinaryExprLeftAction_1_0_0_0()) {
					sequence_PrefixExpr(context, (PostCastExpr) semanticObject); 
					return; 
				}
				else break;
			case McsPackage.QUANTIFIED_EXPR:
				sequence_Expression_term(context, (QuantifiedExpr) semanticObject); 
				return; 
			case McsPackage.RANGE:
				sequence_Expression_term(context, (Range) semanticObject); 
				return; 
			case McsPackage.REAL_EXPR:
				sequence_Expression_term(context, (RealExpr) semanticObject); 
				return; 
			case McsPackage.RECORD_TYPE:
				sequence_Record_type(context, (Record_type) semanticObject); 
				return; 
			case McsPackage.REF_EXPR:
				sequence_Expression_term(context, (RefExpr) semanticObject); 
				return; 
			case McsPackage.REF_TERM:
				sequence_RefTerm(context, (RefTerm) semanticObject); 
				return; 
			case McsPackage.SET_EXPR:
				sequence_Expression_term(context, (SetExpr) semanticObject); 
				return; 
			case McsPackage.SET_TYPE:
				sequence_Set_type(context, (Set_type) semanticObject); 
				return; 
			case McsPackage.STRING_EXPR:
				sequence_Expression_term(context, (StringExpr) semanticObject); 
				return; 
			case McsPackage.TCLASSIFIER_SUBTYPES:
				sequence_T_classifier_subtypes(context, (T_classifier_subtypes) semanticObject); 
				return; 
			case McsPackage.THEOREM_CALL:
				if(context == grammarAccess.getExpression_termRule()) {
					sequence_Expression_term(context, (TheoremCall) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getTheorem_callRule()) {
					sequence_Theorem_call(context, (TheoremCall) semanticObject); 
					return; 
				}
				else break;
			case McsPackage.THEOREM_ROOT:
				sequence_Theorem_root(context, (Theorem_root) semanticObject); 
				return; 
			case McsPackage.THIS_EXPR:
				sequence_Expression_term(context, (ThisExpr) semanticObject); 
				return; 
			case McsPackage.TYPE_DECLARATION:
				sequence_Type_declaration(context, (Type_declaration) semanticObject); 
				return; 
			case McsPackage.TYPE_EXPRESSION:
				sequence_Type_expression(context, (Type_expression) semanticObject); 
				return; 
			case McsPackage.UNARY_EXPR:
				if(context == grammarAccess.getExpression_termRule()) {
					sequence_Expression_term_PrefixExpr(context, (UnaryExpr) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAndExprRule() ||
				   context == grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getExprRule() ||
				   context == grammarAccess.getImpliesExprRule() ||
				   context == grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getInstanceOfExprRule() ||
				   context == grammarAccess.getInstanceOfExprAccess().getInstanceOfExprExprAction_1_0_0_0() ||
				   context == grammarAccess.getOrExprRule() ||
				   context == grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getPlusExprRule() ||
				   context == grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getPrefixExprRule() ||
				   context == grammarAccess.getRelationalExprRule() ||
				   context == grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0() ||
				   context == grammarAccess.getTimesExprRule() ||
				   context == grammarAccess.getTimesExprAccess().getBinaryExprLeftAction_1_0_0_0()) {
					sequence_PrefixExpr(context, (UnaryExpr) semanticObject); 
					return; 
				}
				else break;
			case McsPackage.UNION_TYPE:
				sequence_Union_type(context, (Union_type) semanticObject); 
				return; 
			case McsPackage.TACCESS_SUBTYPES:
				sequence_t_access_subtypes(context, (t_access_subtypes) semanticObject); 
				return; 
			case McsPackage.TCOMPONENT_SUBTYPES:
				sequence_t_component_subtypes(context, (t_component_subtypes) semanticObject); 
				return; 
			case McsPackage.TCONNECTION_SUBTYPES:
				sequence_t_connection_subtypes(context, (t_connection_subtypes) semanticObject); 
				return; 
			case McsPackage.TFEATURE_SUBTYPES:
				sequence_t_feature_subtypes(context, (t_feature_subtypes) semanticObject); 
				return; 
			case McsPackage.TFLOW_IMPL_SUBTYPES:
				sequence_t_flow_impl_subtypes(context, (t_flow_impl_subtypes) semanticObject); 
				return; 
			case McsPackage.TFLOW_SPEC_SUBTYPES:
				sequence_t_flow_spec_subtypes(context, (t_flow_spec_subtypes) semanticObject); 
				return; 
			case McsPackage.TINSTANCE_SUBTYPES:
				sequence_t_instance_subtypes(context, (t_instance_subtypes) semanticObject); 
				return; 
			case McsPackage.TPORT_SUBTYPES:
				sequence_t_port_subtypes(context, (t_port_subtypes) semanticObject); 
				return; 
			case McsPackage.TSUBCOMPONENT_SUBTYPES:
				sequence_t_subcomponent_subtypes(context, (t_subcomponent_subtypes) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             (left=TimesExpr_BinaryExpr_1_0_0_0 (op='*' | op='/' | op='%') right=PrefixExpr) | 
	 *             (left=PrefixExpr_BinaryExpr_1_3_0_0_0 op='fail' right=ParameterizedString) | 
	 *             (left=PlusExpr_BinaryExpr_1_0_0_0 (op='+' | op='-') right=TimesExpr) | 
	 *             (left=RelationalExpr_BinaryExpr_1_0_0_0 op=RelationalOp right=PlusExpr) | 
	 *             (left=AndExpr_BinaryExpr_1_0_0_0 (op='and' | op='andthen') right=InstanceOfExpr) | 
	 *             (left=OrExpr_BinaryExpr_1_0_0_0 op='or' right=AndExpr) | 
	 *             (left=ImpliesExpr_BinaryExpr_1_0_0_0 op='=>' right=ImpliesExpr)
	 *         ) 
	 *         (builtin+=BuiltInFnCall | method+=FnCall)*
	 *     )
	 */
	protected void sequence_AndExpr_Expression_term_ImpliesExpr_OrExpr_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(EObject context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (left=TimesExpr_BinaryExpr_1_0_0_0 (op='*' | op='/' | op='%') right=PrefixExpr) | 
	 *         (left=PrefixExpr_BinaryExpr_1_3_0_0_0 op='fail' right=ParameterizedString) | 
	 *         (left=PlusExpr_BinaryExpr_1_0_0_0 (op='+' | op='-') right=TimesExpr) | 
	 *         (left=RelationalExpr_BinaryExpr_1_0_0_0 op=RelationalOp right=PlusExpr) | 
	 *         (left=AndExpr_BinaryExpr_1_0_0_0 (op='and' | op='andthen') right=InstanceOfExpr) | 
	 *         (left=OrExpr_BinaryExpr_1_0_0_0 op='or' right=AndExpr) | 
	 *         (left=ImpliesExpr_BinaryExpr_1_0_0_0 op='=>' right=ImpliesExpr)
	 *     )
	 */
	protected void sequence_AndExpr_ImpliesExpr_OrExpr_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(EObject context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (left=TimesExpr_BinaryExpr_1_0_0_0 (op='*' | op='/' | op='%') right=PrefixExpr) | 
	 *         (left=PrefixExpr_BinaryExpr_1_3_0_0_0 op='fail' right=ParameterizedString) | 
	 *         (left=PlusExpr_BinaryExpr_1_0_0_0 (op='+' | op='-') right=TimesExpr) | 
	 *         (left=RelationalExpr_BinaryExpr_1_0_0_0 op=RelationalOp right=PlusExpr) | 
	 *         (left=AndExpr_BinaryExpr_1_0_0_0 (op='and' | op='andthen') right=InstanceOfExpr) | 
	 *         (left=OrExpr_BinaryExpr_1_0_0_0 op='or' right=AndExpr)
	 *     )
	 */
	protected void sequence_AndExpr_OrExpr_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(EObject context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (left=TimesExpr_BinaryExpr_1_0_0_0 (op='*' | op='/' | op='%') right=PrefixExpr) | 
	 *         (left=PrefixExpr_BinaryExpr_1_3_0_0_0 op='fail' right=ParameterizedString) | 
	 *         (left=PlusExpr_BinaryExpr_1_0_0_0 (op='+' | op='-') right=TimesExpr) | 
	 *         (left=RelationalExpr_BinaryExpr_1_0_0_0 op=RelationalOp right=PlusExpr) | 
	 *         (left=AndExpr_BinaryExpr_1_0_0_0 (op='and' | op='andthen') right=InstanceOfExpr)
	 *     )
	 */
	protected void sequence_AndExpr_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(EObject context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             ptype='property_type' | 
	 *             pref='property_ref' | 
	 *             bool=UnnamedBooleanType | 
	 *             string=UnnamedStringType | 
	 *             enumer=UnnamedEnumerationType | 
	 *             units=UnnamedUnitsType | 
	 *             integer=UnnamedIntegerType | 
	 *             real=UnnamedRealType | 
	 *             range=UnnamedRangeType | 
	 *             class=UnnamedClassifierType | 
	 *             ref=UnnamedReferenceType | 
	 *             typename=[Type_declaration|ID]
	 *         )?
	 *     )
	 */
	protected void sequence_Basic_type(EObject context, Basic_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (fn=BuiltInFn (args+=Expr args+=Expr*)?)
	 */
	protected void sequence_BuiltInFnCall(EObject context, BuiltInFnCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (classlit=[ComponentClassifier|FQCREF] | arg=Mcs_name_ref)
	 */
	protected void sequence_Classifier_literal(EObject context, Classifier_literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_class?='T_Classifier' | t_class_subtype?=T_classifier_subtypes)
	 */
	protected void sequence_Classifiers(EObject context, Classifiers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (const=McsTypedName left_expr=Expr)
	 */
	protected void sequence_Constant_declaration(EObject context, Constant_declaration semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.CONSTANT_DECLARATION__CONST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.CONSTANT_DECLARATION__CONST));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.CONSTANT_DECLARATION__LEFT_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.CONSTANT_DECLARATION__LEFT_EXPR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getConstant_declarationAccess().getConstMcsTypedNameParserRuleCall_1_0(), semanticObject.getConst());
		feeder.accept(grammarAccess.getConstant_declarationAccess().getLeft_exprExprParserRuleCall_3_0(), semanticObject.getLeft_expr());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (string+=ParameterizedString+ expr=Expr)
	 */
	protected void sequence_DefinitionBody(EObject context, ClaimBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=Type_expression expr=Expr)
	 */
	protected void sequence_DefinitionBody(EObject context, FunctionBody semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.DEFINITION_BODY__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.DEFINITION_BODY__EXPR));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.FUNCTION_BODY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.FUNCTION_BODY__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDefinitionBodyAccess().getTypeType_expressionParserRuleCall_0_2_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDefinitionBodyAccess().getExprExprParserRuleCall_0_4_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID expr=Expr)
	 */
	protected void sequence_Domain(EObject context, Domain semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.DOMAIN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.DOMAIN__NAME));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.DOMAIN__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.DOMAIN__EXPR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDomainAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDomainAccess().getExprExprParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (telem?='T_Element' | tpack?='T_Package' | t_class?=Classifiers | t_inst?=Instances)
	 */
	protected void sequence_Element_type(EObject context, Element_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_EnumerationLiteral(EObject context, EnumerationLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     val=BooleanLiteral
	 */
	protected void sequence_Expression_term(EObject context, BoolExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     builtin=BuiltInFnCall
	 */
	protected void sequence_Expression_term(EObject context, BuiltInFnCallExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     classifier=ComponentClassifierTerm
	 */
	protected void sequence_Expression_term(EObject context, CompExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Empty}
	 */
	protected void sequence_Expression_term(EObject context, Empty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (map=Expression_term_FilterMapExpr_15_3_0_0 (args+=Parameter | args+=Domain)+ filter=Expr?)
	 */
	protected void sequence_Expression_term(EObject context, FilterMapExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (list?='list'? exp=Expr)
	 */
	protected void sequence_Expression_term_FilterMapExpr_15_3_0_0_SetExpr_15_3_1_0(EObject context, Expr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     fn=FnCall
	 */
	protected void sequence_Expression_term(EObject context, FnCallExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (cond=Expr then=Expr else=Expr)
	 */
	protected void sequence_Expression_term(EObject context, IfThenElseExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expr=InstanceOfExpr_InstanceOfExpr_1_0_0_0 type=Type_expression (builtin+=BuiltInFnCall | method+=FnCall)*)
	 */
	protected void sequence_Expression_term_InstanceOfExpr(EObject context, InstanceOfExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     val=IntegerTerm
	 */
	protected void sequence_Expression_term(EObject context, IntExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (binding=Let_binding expr=Expr)
	 */
	protected void sequence_Expression_term(EObject context, LetExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         root?='root' | 
	 *         iroot?='iroot' | 
	 *         nil?='nil' | 
	 *         empty?='empty' | 
	 *         allmodes?='allmodes' | 
	 *         typednameref=Mcs_name_ref
	 *     )
	 */
	protected void sequence_Expression_term(EObject context, MCSNameExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     package=[AadlPackage|ID]
	 */
	protected void sequence_Expression_term(EObject context, PkgExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expr=Expression_term newtype=Type_expression? (builtin+=BuiltInFnCall | method+=FnCall)*)
	 */
	protected void sequence_Expression_term_PrefixExpr(EObject context, PostCastExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op='-' | op='not') expr=PrefixExpr (builtin+=BuiltInFnCall | method+=FnCall)*)
	 */
	protected void sequence_Expression_term_PrefixExpr(EObject context, UnaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((quant='forall' | quant='foreach' | quant='exists') (args+=Parameter | args+=Domain)+ expr=Expr)
	 */
	protected void sequence_Expression_term(EObject context, QuantifiedExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     val=Range
	 */
	protected void sequence_Expression_term(EObject context, Range semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     val=RealTerm
	 */
	protected void sequence_Expression_term(EObject context, RealExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     reference=RefTerm
	 */
	protected void sequence_Expression_term(EObject context, RefExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((exprs+=Expression_term_SetExpr_15_3_1_0 exprs+=Expr*) | exprs+=Expression_term_SetExpr_15_3_1_0)
	 */
	protected void sequence_Expression_term(EObject context, SetExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     val=StringTerm
	 */
	protected void sequence_Expression_term(EObject context, StringExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     fn=Theorem_call
	 */
	protected void sequence_Expression_term(EObject context, TheoremCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (sub=ContainmentPath?)
	 */
	protected void sequence_Expression_term(EObject context, ThisExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID t_root?=Theorem_root? (args+=Parameter args+=Parameter*)? body=DefinitionBody)
	 */
	protected void sequence_F_or_T_declaration(EObject context, F_or_T semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (fn=[F_or_T|ID] (args+=Expr args+=Expr*)?)
	 */
	protected void sequence_FnCall(EObject context, FnCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=Type_expression)
	 */
	protected void sequence_Id_type_pair(EObject context, Id_type_pair semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.ID_TYPE_PAIR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.ID_TYPE_PAIR__NAME));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.ID_TYPE_PAIR__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.ID_TYPE_PAIR__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getId_type_pairAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getId_type_pairAccess().getTypeType_expressionParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (expr=InstanceOfExpr_InstanceOfExpr_1_0_0_0 type=Type_expression)
	 */
	protected void sequence_InstanceOfExpr(EObject context, InstanceOfExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (inst?='T_Instance' | t_inst_st?=t_instance_subtypes)
	 */
	protected void sequence_Instances(EObject context, Instances semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value=UnsignedInt unit=[UnitLiteral|ID]?)
	 */
	protected void sequence_IntegerTerm(EObject context, IntegerLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (local=McsTypedName expr=Expr)
	 */
	protected void sequence_Let_binding(EObject context, Let_binding semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.LET_BINDING__LOCAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.LET_BINDING__LOCAL));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.LET_BINDING__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.LET_BINDING__EXPR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getLet_bindingAccess().getLocalMcsTypedNameParserRuleCall_0_0(), semanticObject.getLocal());
		feeder.accept(grammarAccess.getLet_bindingAccess().getExprExprParserRuleCall_2_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (root_type=Type_expression | root_type=Type_expression)
	 */
	protected void sequence_List_type(EObject context, List_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (types+=Type_declaration* constants+=Constant_declaration* functions+=F_or_T_declaration* theorems+=F_or_T_declaration*)
	 */
	protected void sequence_MCSAnnexLibrary(EObject context, MCSAnnexLibrary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (calls+=Theorem_call?)
	 */
	protected void sequence_MCSAnnexSubclause(EObject context, MCSAnnexSubclause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         importedUnit+=[ModelUnit|ID] 
	 *         importedUnit+=[ModelUnit|ID]* 
	 *         (files+=File_name files+=File_name*)? 
	 *         types+=Type_declaration* 
	 *         constants+=Constant_declaration* 
	 *         functions+=F_or_T_declaration* 
	 *         theorems+=F_or_T_declaration* 
	 *         calls+=Theorem_call*
	 *     )
	 */
	protected void sequence_MCSFileLibrary(EObject context, MCSFileLibrary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lib=MCSAnnexLibrary | file=MCSFileLibrary | subclause=MCSAnnexSubclause)
	 */
	protected void sequence_MCSGrammarRoot(EObject context, MCSGrammarRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (key=Type_expression val=Type_expression)
	 */
	protected void sequence_Mapping_type(EObject context, Mapping_type semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.MAPPING_TYPE__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.MAPPING_TYPE__KEY));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.MAPPING_TYPE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.MAPPING_TYPE__VAL));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMapping_typeAccess().getKeyType_expressionParserRuleCall_1_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getMapping_typeAccess().getValType_expressionParserRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_McsName(EObject context, McsName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=Type_expression)
	 */
	protected void sequence_McsName_McsTypedName(EObject context, McsName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ref=[McsTypedName|ID] (builtin+=BuiltInFnCall | method+=FnCall)*)
	 */
	protected void sequence_Mcs_name_ref(EObject context, Mcs_name_ref semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     claim+=TextParm+
	 */
	protected void sequence_ParameterizedString(EObject context, ParameterizedString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (left=TimesExpr_BinaryExpr_1_0_0_0 (op='*' | op='/' | op='%') right=PrefixExpr) | 
	 *         (left=PrefixExpr_BinaryExpr_1_3_0_0_0 op='fail' right=ParameterizedString) | 
	 *         (left=PlusExpr_BinaryExpr_1_0_0_0 (op='+' | op='-') right=TimesExpr) | 
	 *         (left=RelationalExpr_BinaryExpr_1_0_0_0 op=RelationalOp right=PlusExpr)
	 *     )
	 */
	protected void sequence_PlusExpr_PrefixExpr_RelationalExpr_TimesExpr(EObject context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (left=TimesExpr_BinaryExpr_1_0_0_0 (op='*' | op='/' | op='%') right=PrefixExpr) | 
	 *         (left=PrefixExpr_BinaryExpr_1_3_0_0_0 op='fail' right=ParameterizedString) | 
	 *         (left=PlusExpr_BinaryExpr_1_0_0_0 (op='+' | op='-') right=TimesExpr)
	 *     )
	 */
	protected void sequence_PlusExpr_PrefixExpr_TimesExpr(EObject context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (left=PrefixExpr_BinaryExpr_1_3_0_0_0 op='fail' right=ParameterizedString)
	 */
	protected void sequence_PrefixExpr(EObject context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (expr=Expression_term newtype=Type_expression?)
	 */
	protected void sequence_PrefixExpr(EObject context, PostCastExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (left=TimesExpr_BinaryExpr_1_0_0_0 (op='*' | op='/' | op='%') right=PrefixExpr) | 
	 *         (left=PrefixExpr_BinaryExpr_1_3_0_0_0 op='fail' right=ParameterizedString)
	 *     )
	 */
	protected void sequence_PrefixExpr_TimesExpr(EObject context, BinaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((op='-' | op='not') expr=PrefixExpr)
	 */
	protected void sequence_PrefixExpr(EObject context, UnaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((lowerBound=IntegerTerm | lowerBound=RealTerm) (upperBound=IntegerTerm | upperBound=RealTerm))
	 */
	protected void sequence_Range(EObject context, NumericRange semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value=UnsignedReal unit=[UnitLiteral|ID]?)
	 */
	protected void sequence_RealTerm(EObject context, RealLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     field+=Id_type_pair+
	 */
	protected void sequence_Record_type(EObject context, Record_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (root?='root'? path=ContainmentPathElement)
	 */
	protected void sequence_RefTerm(EObject context, RefTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (root_type=Type_expression | root_type=Type_expression)
	 */
	protected void sequence_Set_type(EObject context, Set_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_ctype?='C_Type' | t_cimpl?='C_Impl' | t_fgclass?='C_Feature_Group' | t_annexclass?='C_Annex')
	 */
	protected void sequence_T_classifier_subtypes(EObject context, T_classifier_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (arg=[McsTypedName|ID] unit=[UnitLiteral|ID]?)
	 */
	protected void sequence_TextParm(EObject context, ClaimArg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     str=StringTerm
	 */
	protected void sequence_TextParm(EObject context, ClaimString semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.CLAIM_STRING__STR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.CLAIM_STRING__STR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTextParmAccess().getStrStringTermParserRuleCall_0_1_0(), semanticObject.getStr());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=[F_or_T|ID] croot=Classifier_literal? (actarg+=Expr actarg+=Expr*)?)
	 */
	protected void sequence_Theorem_call(EObject context, TheoremCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (nilroot?='nil' | classifier=Classifiers)
	 */
	protected void sequence_Theorem_root(EObject context, Theorem_root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=Type_expression)
	 */
	protected void sequence_Type_declaration(EObject context, Type_declaration semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.TYPE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.TYPE_DECLARATION__NAME));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.TYPE_DECLARATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.TYPE_DECLARATION__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getType_declarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getType_declarationAccess().getTypeType_expressionParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (basic=Basic_type | composite=Composite_type | element=Element_type)
	 */
	protected void sequence_Type_expression(EObject context, Type_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (types+=Type_expression type+=Type_expression*)
	 */
	protected void sequence_Union_type(EObject context, Union_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_access?='I_Access' | 
	 *         t_data_acc?='I_Data_Access' | 
	 *         t_sub_acc?='I_Subprogram_Access' | 
	 *         t_sub_gr_acc?='I_Subprogram_Group_Access' | 
	 *         t_bus_acc?='I_Bus_Access'
	 *     )
	 */
	protected void sequence_t_access_subtypes(EObject context, t_access_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_annex_sub?='I_Component_Annex' | 
	 *         t_abstract?='I_Abstract' | 
	 *         t_sys?='I_System' | 
	 *         t_dev?='I_Device' | 
	 *         t_proc?='I_Processor' | 
	 *         t_virt_proc?='I_Virtual_Processor' | 
	 *         t_bus?='I_Bus' | 
	 *         t_vbus?='I_Virtual_Bus' | 
	 *         t_mem?='I_Memory' | 
	 *         t_proc?='I_Process' | 
	 *         t_tg?='I_Thread_Group' | 
	 *         t_t?='I_Thread' | 
	 *         t_d?='I_Data' | 
	 *         t_subprog?='I_Subprogram' | 
	 *         t_subprog_g?='I_Subprogram_Group'
	 *     )
	 */
	protected void sequence_t_component_subtypes(EObject context, t_component_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_conn?='I_Connection' | 
	 *         t_feat_conn?='I_Feature_Connection' | 
	 *         t_port_conn?='I_Port_Connection' | 
	 *         t_parm_conn?='I_Parameter_Connection' | 
	 *         t_acc_con?='I_Access_Connection' | 
	 *         t_fg_conn?='I_Feature_Group_Connection'
	 *     )
	 */
	protected void sequence_t_connection_subtypes(EObject context, t_connection_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_feat?='I_Feature' | t_abs_feat?='I_Abstract_Feature' | t_parm?='I_Parameter' | t_fg?='I_Feature_Group')
	 */
	protected void sequence_t_feature_subtypes(EObject context, t_feature_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_f_i?='I_Flow_Impl' | t_f_i_source?='I_Flow_Impl_Source' | t_f_i_sink?='I_Flow_Impl_Sink' | t_f_i_path?='I_Flow_Impl_Path')
	 */
	protected void sequence_t_flow_impl_subtypes(EObject context, t_flow_impl_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_f_spec?='I_Flow_Spec' | t_f_spec_source?='I_Flow_Spec_Source' | t_f_spec_sink?='I_Flow_Spec_Sink' | t_f_spec_path?='I_Flow_Spec_Path')
	 */
	protected void sequence_t_flow_spec_subtypes(EObject context, t_flow_spec_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_subc_st?=t_subcomponent_subtypes | 
	 *         t_sbcall?='I_Subprogram_Call' | 
	 *         t_callseq?='I_Call_Sequence' | 
	 *         t_eeflow?='I_End_To_End_Flow' | 
	 *         t_proto?='I_Prototype' | 
	 *         t_mode?='I_Mode' | 
	 *         t_mod_trans?='I_Mode_Transition' | 
	 *         t_mode_trig?='I_Mode_Trigger_Id'
	 *     )
	 */
	protected void sequence_t_instance_subtypes(EObject context, t_instance_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_port?='I_Port' | t_d_port?='I_Data_Port' | t_ev_port?='I_Event_Port' | t_evd_port?='I_Event_Data_Port')
	 */
	protected void sequence_t_port_subtypes(EObject context, t_port_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_sub?='I_Component' | t_cimpl_st?=t_component_subtypes)
	 */
	protected void sequence_t_subcomponent_subtypes(EObject context, t_subcomponent_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
