/*
 * generated by Xtext
 */
package org.osate.xtext.aadl2.mcs.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;
import org.osate.aadl2.Aadl2Package;
import org.osate.aadl2.AadlBoolean;
import org.osate.aadl2.AadlInteger;
import org.osate.aadl2.AadlReal;
import org.osate.aadl2.AadlString;
import org.osate.aadl2.ClassifierType;
import org.osate.aadl2.ClassifierValue;
import org.osate.aadl2.EnumerationLiteral;
import org.osate.aadl2.EnumerationType;
import org.osate.aadl2.IntegerLiteral;
import org.osate.aadl2.MetaclassReference;
import org.osate.aadl2.NamedValue;
import org.osate.aadl2.NumericRange;
import org.osate.aadl2.Operation;
import org.osate.aadl2.RangeType;
import org.osate.aadl2.RealLiteral;
import org.osate.aadl2.ReferenceType;
import org.osate.aadl2.UnitLiteral;
import org.osate.aadl2.UnitsType;
import org.osate.xtext.aadl2.mcs.mcs.AppliesToClause;
import org.osate.xtext.aadl2.mcs.mcs.Argument;
import org.osate.xtext.aadl2.mcs.mcs.ArrayRange;
import org.osate.xtext.aadl2.mcs.mcs.Basic_type;
import org.osate.xtext.aadl2.mcs.mcs.BooleanTerm;
import org.osate.xtext.aadl2.mcs.mcs.ClassifierCategory;
import org.osate.xtext.aadl2.mcs.mcs.ClassifierEnforce;
import org.osate.xtext.aadl2.mcs.mcs.ClassifierScript;
import org.osate.xtext.aadl2.mcs.mcs.CollectionTerm;
import org.osate.xtext.aadl2.mcs.mcs.Constant_declaration;
import org.osate.xtext.aadl2.mcs.mcs.ConstraintsBlock;
import org.osate.xtext.aadl2.mcs.mcs.ContainmentPathElement;
import org.osate.xtext.aadl2.mcs.mcs.Element_type;
import org.osate.xtext.aadl2.mcs.mcs.Element_types;
import org.osate.xtext.aadl2.mcs.mcs.Enforcement_policy;
import org.osate.xtext.aadl2.mcs.mcs.FeatureGroupClassifierReference;
import org.osate.xtext.aadl2.mcs.mcs.Function_declaration;
import org.osate.xtext.aadl2.mcs.mcs.Id_type_pair;
import org.osate.xtext.aadl2.mcs.mcs.In_modes_list;
import org.osate.xtext.aadl2.mcs.mcs.Iteration;
import org.osate.xtext.aadl2.mcs.mcs.List_type;
import org.osate.xtext.aadl2.mcs.mcs.Local_declaration;
import org.osate.xtext.aadl2.mcs.mcs.MCSAnnexLibrary;
import org.osate.xtext.aadl2.mcs.mcs.MCSAnnexSubclause;
import org.osate.xtext.aadl2.mcs.mcs.MCSClosure;
import org.osate.xtext.aadl2.mcs.mcs.MCSGrammarRoot;
import org.osate.xtext.aadl2.mcs.mcs.MCSViewpoint;
import org.osate.xtext.aadl2.mcs.mcs.Map_type;
import org.osate.xtext.aadl2.mcs.mcs.McsPackage;
import org.osate.xtext.aadl2.mcs.mcs.ModeName;
import org.osate.xtext.aadl2.mcs.mcs.ModeSpec;
import org.osate.xtext.aadl2.mcs.mcs.PackageEnforce;
import org.osate.xtext.aadl2.mcs.mcs.PackageScript;
import org.osate.xtext.aadl2.mcs.mcs.Query_element_set;
import org.osate.xtext.aadl2.mcs.mcs.Record_type;
import org.osate.xtext.aadl2.mcs.mcs.Set_comprehension;
import org.osate.xtext.aadl2.mcs.mcs.Set_type;
import org.osate.xtext.aadl2.mcs.mcs.Theorem_declaration;
import org.osate.xtext.aadl2.mcs.mcs.Type_declaration;
import org.osate.xtext.aadl2.mcs.mcs.Type_expression;
import org.osate.xtext.aadl2.mcs.mcs.Union_type;
import org.osate.xtext.aadl2.mcs.mcs.UnnamedFunctionType;
import org.osate.xtext.aadl2.mcs.mcs.ViewpointReference;
import org.osate.xtext.aadl2.mcs.mcs.assertion_expression;
import org.osate.xtext.aadl2.mcs.mcs.block_label_id;
import org.osate.xtext.aadl2.mcs.mcs.check_assertion;
import org.osate.xtext.aadl2.mcs.mcs.check_label_id;
import org.osate.xtext.aadl2.mcs.mcs.check_theorem;
import org.osate.xtext.aadl2.mcs.mcs.element_reference;
import org.osate.xtext.aadl2.mcs.mcs.expression;
import org.osate.xtext.aadl2.mcs.mcs.labelled_check_statement;
import org.osate.xtext.aadl2.mcs.mcs.property_reference;
import org.osate.xtext.aadl2.mcs.mcs.string_expression;
import org.osate.xtext.aadl2.mcs.mcs.t_access_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_classifier_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_classifiers;
import org.osate.xtext.aadl2.mcs.mcs.t_component_impl_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_connection_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_feature_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_flow_impl_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_flow_spec_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_named_reference_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_named_references;
import org.osate.xtext.aadl2.mcs.mcs.t_port_subtypes;
import org.osate.xtext.aadl2.mcs.mcs.t_subcomponent_subtypes;
import org.osate.xtext.aadl2.mcs.services.MCSGrammarAccess;

@SuppressWarnings("all")
public class MCSSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private MCSGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Aadl2Package.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Aadl2Package.AADL_BOOLEAN:
				sequence_UnnamedBooleanType(context, (AadlBoolean) semanticObject); 
				return; 
			case Aadl2Package.AADL_INTEGER:
				sequence_UnnamedIntegerType(context, (AadlInteger) semanticObject); 
				return; 
			case Aadl2Package.AADL_REAL:
				sequence_UnnamedRealType(context, (AadlReal) semanticObject); 
				return; 
			case Aadl2Package.AADL_STRING:
				sequence_UnnamedStringType(context, (AadlString) semanticObject); 
				return; 
			case Aadl2Package.CLASSIFIER_TYPE:
				sequence_UnnamedClassifierType(context, (ClassifierType) semanticObject); 
				return; 
			case Aadl2Package.CLASSIFIER_VALUE:
				sequence_QCReference(context, (ClassifierValue) semanticObject); 
				return; 
			case Aadl2Package.ENUMERATION_LITERAL:
				sequence_EnumerationLiteral(context, (EnumerationLiteral) semanticObject); 
				return; 
			case Aadl2Package.ENUMERATION_TYPE:
				sequence_UnnamedEnumerationType(context, (EnumerationType) semanticObject); 
				return; 
			case Aadl2Package.INTEGER_LITERAL:
				if(context == grammarAccess.getIntegerLitRule() ||
				   context == grammarAccess.getNumberValueRule()) {
					sequence_IntegerLit(context, (IntegerLiteral) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getIntegerTermRule()) {
					sequence_IntegerTerm(context, (IntegerLiteral) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.METACLASS_REFERENCE:
				sequence_QMReference(context, (MetaclassReference) semanticObject); 
				return; 
			case Aadl2Package.NAMED_VALUE:
				sequence_ConstantValue(context, (NamedValue) semanticObject); 
				return; 
			case Aadl2Package.NUMERIC_RANGE:
				if(context == grammarAccess.getIntegerRangeRule()) {
					sequence_IntegerRange(context, (NumericRange) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getRealRangeRule()) {
					sequence_RealRange(context, (NumericRange) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.OPERATION:
				sequence_SignedConstant(context, (Operation) semanticObject); 
				return; 
			case Aadl2Package.RANGE_TYPE:
				sequence_UnnamedRangeType(context, (RangeType) semanticObject); 
				return; 
			case Aadl2Package.REAL_LITERAL:
				if(context == grammarAccess.getNumberValueRule() ||
				   context == grammarAccess.getRealLitRule()) {
					sequence_RealLit(context, (RealLiteral) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getRealTermRule()) {
					sequence_RealTerm(context, (RealLiteral) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.REFERENCE_TYPE:
				sequence_UnnamedReferenceType(context, (ReferenceType) semanticObject); 
				return; 
			case Aadl2Package.UNIT_LITERAL:
				if(context == grammarAccess.getUnitLiteralConversionRule()) {
					sequence_UnitLiteralConversion(context, (UnitLiteral) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getUnitLiteralRule()) {
					sequence_UnitLiteral(context, (UnitLiteral) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.UNITS_TYPE:
				sequence_UnnamedUnitsType(context, (UnitsType) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == McsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case McsPackage.APPLIES_TO_CLAUSE:
				sequence_AppliesToClause(context, (AppliesToClause) semanticObject); 
				return; 
			case McsPackage.ARGUMENT:
				sequence_Argument(context, (Argument) semanticObject); 
				return; 
			case McsPackage.ARRAY_RANGE:
				sequence_ArrayRange(context, (ArrayRange) semanticObject); 
				return; 
			case McsPackage.BASIC_TYPE:
				sequence_Basic_type(context, (Basic_type) semanticObject); 
				return; 
			case McsPackage.BOOLEAN_TERM:
				sequence_BooleanTerm(context, (BooleanTerm) semanticObject); 
				return; 
			case McsPackage.CLASSIFIER_CATEGORY:
				sequence_ClassifierCategory(context, (ClassifierCategory) semanticObject); 
				return; 
			case McsPackage.CLASSIFIER_ENFORCE:
				sequence_ClassifierEnforce(context, (ClassifierEnforce) semanticObject); 
				return; 
			case McsPackage.CLASSIFIER_SCRIPT:
				sequence_ClassifierScript(context, (ClassifierScript) semanticObject); 
				return; 
			case McsPackage.COLLECTION_TERM:
				sequence_CollectionTerm(context, (CollectionTerm) semanticObject); 
				return; 
			case McsPackage.CONSTANT_DECLARATION:
				sequence_Constant_declaration(context, (Constant_declaration) semanticObject); 
				return; 
			case McsPackage.CONSTRAINTS_BLOCK:
				sequence_ConstraintsBlock(context, (ConstraintsBlock) semanticObject); 
				return; 
			case McsPackage.CONTAINMENT_PATH_ELEMENT:
				sequence_ContainmentPathElement(context, (ContainmentPathElement) semanticObject); 
				return; 
			case McsPackage.ELEMENT_TYPE:
				sequence_Element_type(context, (Element_type) semanticObject); 
				return; 
			case McsPackage.ELEMENT_TYPES:
				sequence_Element_types(context, (Element_types) semanticObject); 
				return; 
			case McsPackage.ENFORCEMENT_POLICY:
				sequence_Enforcement_policy(context, (Enforcement_policy) semanticObject); 
				return; 
			case McsPackage.FEATURE_GROUP_CLASSIFIER_REFERENCE:
				sequence_FeatureGroupClassifierReference(context, (FeatureGroupClassifierReference) semanticObject); 
				return; 
			case McsPackage.FUNCTION_DECLARATION:
				sequence_Function_declaration(context, (Function_declaration) semanticObject); 
				return; 
			case McsPackage.ID_TYPE_PAIR:
				sequence_Id_type_pair(context, (Id_type_pair) semanticObject); 
				return; 
			case McsPackage.IN_MODES_LIST:
				sequence_In_modes_list(context, (In_modes_list) semanticObject); 
				return; 
			case McsPackage.ITERATION:
				sequence_Iteration(context, (Iteration) semanticObject); 
				return; 
			case McsPackage.LIST_TYPE:
				sequence_List_type(context, (List_type) semanticObject); 
				return; 
			case McsPackage.LOCAL_DECLARATION:
				sequence_Local_declaration(context, (Local_declaration) semanticObject); 
				return; 
			case McsPackage.MCS_ANNEX_LIBRARY:
				sequence_MCSAnnexLibrary(context, (MCSAnnexLibrary) semanticObject); 
				return; 
			case McsPackage.MCS_ANNEX_SUBCLAUSE:
				sequence_MCSAnnexSubclause(context, (MCSAnnexSubclause) semanticObject); 
				return; 
			case McsPackage.MCS_CLOSURE:
				sequence_MCSClosure(context, (MCSClosure) semanticObject); 
				return; 
			case McsPackage.MCS_GRAMMAR_ROOT:
				sequence_MCSGrammarRoot(context, (MCSGrammarRoot) semanticObject); 
				return; 
			case McsPackage.MCS_VIEWPOINT:
				sequence_MCSViewpoint(context, (MCSViewpoint) semanticObject); 
				return; 
			case McsPackage.MAP_TYPE:
				sequence_Map_type(context, (Map_type) semanticObject); 
				return; 
			case McsPackage.MODE_NAME:
				sequence_ModeName(context, (ModeName) semanticObject); 
				return; 
			case McsPackage.MODE_SPEC:
				sequence_ModeSpec(context, (ModeSpec) semanticObject); 
				return; 
			case McsPackage.PACKAGE_ENFORCE:
				sequence_PackageEnforce(context, (PackageEnforce) semanticObject); 
				return; 
			case McsPackage.PACKAGE_SCRIPT:
				sequence_PackageScript(context, (PackageScript) semanticObject); 
				return; 
			case McsPackage.QUERY_ELEMENT_SET:
				sequence_Query_element_set(context, (Query_element_set) semanticObject); 
				return; 
			case McsPackage.RECORD_TYPE:
				sequence_Record_type(context, (Record_type) semanticObject); 
				return; 
			case McsPackage.SET_COMPREHENSION:
				sequence_Set_comprehension(context, (Set_comprehension) semanticObject); 
				return; 
			case McsPackage.SET_TYPE:
				sequence_Set_type(context, (Set_type) semanticObject); 
				return; 
			case McsPackage.THEOREM_DECLARATION:
				sequence_Theorem_declaration(context, (Theorem_declaration) semanticObject); 
				return; 
			case McsPackage.TYPE_DECLARATION:
				sequence_Type_declaration(context, (Type_declaration) semanticObject); 
				return; 
			case McsPackage.TYPE_EXPRESSION:
				sequence_Type_expression(context, (Type_expression) semanticObject); 
				return; 
			case McsPackage.UNION_TYPE:
				sequence_Union_type(context, (Union_type) semanticObject); 
				return; 
			case McsPackage.UNNAMED_FUNCTION_TYPE:
				sequence_UnnamedFunctionType(context, (UnnamedFunctionType) semanticObject); 
				return; 
			case McsPackage.VIEWPOINT_REFERENCE:
				sequence_ViewpointReference(context, (ViewpointReference) semanticObject); 
				return; 
			case McsPackage.ASSERTION_EXPRESSION:
				sequence_assertion_expression(context, (assertion_expression) semanticObject); 
				return; 
			case McsPackage.BLOCK_LABEL_ID:
				sequence_block_label_id(context, (block_label_id) semanticObject); 
				return; 
			case McsPackage.CHECK_ASSERTION:
				sequence_check_assertion(context, (check_assertion) semanticObject); 
				return; 
			case McsPackage.CHECK_LABEL_ID:
				sequence_check_label_id(context, (check_label_id) semanticObject); 
				return; 
			case McsPackage.CHECK_THEOREM:
				sequence_check_theorem(context, (check_theorem) semanticObject); 
				return; 
			case McsPackage.ELEMENT_REFERENCE:
				sequence_element_reference(context, (element_reference) semanticObject); 
				return; 
			case McsPackage.EXPRESSION:
				sequence_expression(context, (expression) semanticObject); 
				return; 
			case McsPackage.LABELLED_CHECK_STATEMENT:
				sequence_labelled_check_statement(context, (labelled_check_statement) semanticObject); 
				return; 
			case McsPackage.PROPERTY_REFERENCE:
				sequence_property_reference(context, (property_reference) semanticObject); 
				return; 
			case McsPackage.STRING_EXPRESSION:
				sequence_string_expression(context, (string_expression) semanticObject); 
				return; 
			case McsPackage.TACCESS_SUBTYPES:
				sequence_t_access_subtypes(context, (t_access_subtypes) semanticObject); 
				return; 
			case McsPackage.TCLASSIFIER_SUBTYPES:
				sequence_t_classifier_subtypes(context, (t_classifier_subtypes) semanticObject); 
				return; 
			case McsPackage.TCLASSIFIERS:
				sequence_t_classifiers(context, (t_classifiers) semanticObject); 
				return; 
			case McsPackage.TCOMPONENT_IMPL_SUBTYPES:
				sequence_t_component_impl_subtypes(context, (t_component_impl_subtypes) semanticObject); 
				return; 
			case McsPackage.TCONNECTION_SUBTYPES:
				sequence_t_connection_subtypes(context, (t_connection_subtypes) semanticObject); 
				return; 
			case McsPackage.TFEATURE_SUBTYPES:
				sequence_t_feature_subtypes(context, (t_feature_subtypes) semanticObject); 
				return; 
			case McsPackage.TFLOW_IMPL_SUBTYPES:
				sequence_t_flow_impl_subtypes(context, (t_flow_impl_subtypes) semanticObject); 
				return; 
			case McsPackage.TFLOW_SPEC_SUBTYPES:
				sequence_t_flow_spec_subtypes(context, (t_flow_spec_subtypes) semanticObject); 
				return; 
			case McsPackage.TNAMED_REFERENCE_SUBTYPES:
				sequence_t_named_reference_subtypes(context, (t_named_reference_subtypes) semanticObject); 
				return; 
			case McsPackage.TNAMED_REFERENCES:
				sequence_t_named_references(context, (t_named_references) semanticObject); 
				return; 
			case McsPackage.TPORT_SUBTYPES:
				sequence_t_port_subtypes(context, (t_port_subtypes) semanticObject); 
				return; 
			case McsPackage.TSUBCOMPONENT_SUBTYPES:
				sequence_t_subcomponent_subtypes(context, (t_subcomponent_subtypes) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == TypesPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if(context == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if(context == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if(context == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == XbasePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if(context == grammarAccess.getXAdditiveExpressionRule() ||
				   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXAndExpressionRule() ||
				   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXAssignmentRule() ||
				   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||
				   context == grammarAccess.getXBlockExpressionRule() ||
				   context == grammarAccess.getXCastedExpressionRule() ||
				   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||
				   context == grammarAccess.getXEqualityExpressionRule() ||
				   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXExpressionRule() ||
				   context == grammarAccess.getXExpressionOrVarDeclarationRule() ||
				   context == grammarAccess.getXMemberFeatureCallRule() ||
				   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||
				   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||
				   context == grammarAccess.getXMultiplicativeExpressionRule() ||
				   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXOrExpressionRule() ||
				   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXOtherOperatorExpressionRule() ||
				   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXParenthesizedExpressionRule() ||
				   context == grammarAccess.getXPostfixOperationRule() ||
				   context == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0() ||
				   context == grammarAccess.getXPrimaryExpressionRule() ||
				   context == grammarAccess.getXRelationalExpressionRule() ||
				   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||
				   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||
				   context == grammarAccess.getXUnaryOperationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if(context == grammarAccess.getXAdditiveExpressionRule() ||
				   context == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXAndExpressionRule() ||
				   context == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXAssignmentRule() ||
				   context == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||
				   context == grammarAccess.getXCastedExpressionRule() ||
				   context == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0() ||
				   context == grammarAccess.getXClosureRule() ||
				   context == grammarAccess.getXEqualityExpressionRule() ||
				   context == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXExpressionRule() ||
				   context == grammarAccess.getXExpressionOrVarDeclarationRule() ||
				   context == grammarAccess.getXLiteralRule() ||
				   context == grammarAccess.getXMemberFeatureCallRule() ||
				   context == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0() ||
				   context == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() ||
				   context == grammarAccess.getXMultiplicativeExpressionRule() ||
				   context == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXOrExpressionRule() ||
				   context == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXOtherOperatorExpressionRule() ||
				   context == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0() ||
				   context == grammarAccess.getXParenthesizedExpressionRule() ||
				   context == grammarAccess.getXPostfixOperationRule() ||
				   context == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0() ||
				   context == grammarAccess.getXPrimaryExpressionRule() ||
				   context == grammarAccess.getXRelationalExpressionRule() ||
				   context == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0() ||
				   context == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0() ||
				   context == grammarAccess.getXUnaryOperationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == XtypePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (all?='all' | (category+=ClassifierCategory category+=ClassifierCategory*))
	 */
	protected void sequence_AppliesToClause(EObject context, AppliesToClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID arg_type=Type_expression?)
	 */
	protected void sequence_Argument(EObject context, Argument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lowerBound=INT upperBound=INT?)
	 */
	protected void sequence_ArrayRange(EObject context, ArrayRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         bool=UnnamedBooleanType | 
	 *         string=UnnamedStringType | 
	 *         enumer=UnnamedEnumerationType | 
	 *         units=UnnamedUnitsType | 
	 *         integer=UnnamedIntegerType | 
	 *         real=UnnamedRealType | 
	 *         range=UnnamedRangeType | 
	 *         class=UnnamedClassifierType | 
	 *         ref=UnnamedReferenceType | 
	 *         func=UnnamedFunctionType | 
	 *         typename=[Type_declaration|ID]
	 *     )
	 */
	protected void sequence_Basic_type(EObject context, Basic_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (xbool=XBooleanLiteral | (member_check=expression collect_expr=expression))
	 */
	protected void sequence_BooleanTerm(EObject context, BooleanTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (component=ComponentCategory ct=[ComponentType|QCREF]? (impl?='implementation' ci=[ComponentImplementation|QCREF]?)?) | 
	 *         (feat_g?='feature group' ref_to_f=FeatureGroupClassifierReference?)
	 *     )
	 */
	protected void sequence_ClassifierCategory(EObject context, ClassifierCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (viewpoint=[MCSViewpoint|ID] script=ClassifierScript)
	 */
	protected void sequence_ClassifierEnforce(EObject context, ClassifierEnforce semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.CLASSIFIER_ENFORCE__VIEWPOINT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.CLASSIFIER_ENFORCE__VIEWPOINT));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.CLASSIFIER_ENFORCE__SCRIPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.CLASSIFIER_ENFORCE__SCRIPT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getClassifierEnforceAccess().getViewpointMCSViewpointIDTerminalRuleCall_1_0_1(), semanticObject.getViewpoint());
		feeder.accept(grammarAccess.getClassifierEnforceAccess().getScriptClassifierScriptParserRuleCall_2_0(), semanticObject.getScript());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (c_block+=ConstraintsBlock* ref=ViewpointReference)
	 */
	protected void sequence_ClassifierScript(EObject context, ClassifierScript semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (xc=XCollectionLiteral | query_set=Query_element_set | set_c=Set_comprehension)
	 */
	protected void sequence_CollectionTerm(EObject context, CollectionTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     namedValue=[PropertyConstant|QPREF]
	 */
	protected void sequence_ConstantValue(EObject context, NamedValue semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (const?='const'? name=ID type=Type_expression? left_expr=constant_expression)
	 */
	protected void sequence_Constant_declaration(EObject context, Constant_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (b_label=block_label_id? cs+=labelled_check_statement+)
	 */
	protected void sequence_ConstraintsBlock(EObject context, ConstraintsBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (namedElement=[NamedElement|ID] arrayRange+=ArrayRange? path=ContainmentPathElement?)
	 */
	protected void sequence_ContainmentPathElement(EObject context, ContainmentPathElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (telem?='T_Element' | t_class?=t_classifiers | t_ref?=t_named_references)
	 */
	protected void sequence_Element_type(EObject context, Element_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (el_type=Element_type | (el_types+=Element_type el_types+=Element_type+))
	 */
	protected void sequence_Element_types(EObject context, Element_types semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (pack?='package' | class?='classifier')
	 */
	protected void sequence_Enforcement_policy(EObject context, Enforcement_policy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_EnumerationLiteral(EObject context, EnumerationLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     fg=[FeatureGroupType|QCREF]
	 */
	protected void sequence_FeatureGroupClassifierReference(EObject context, FeatureGroupClassifierReference semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.FEATURE_GROUP_CLASSIFIER_REFERENCE__FG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.FEATURE_GROUP_CLASSIFIER_REFERENCE__FG));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFeatureGroupClassifierReferenceAccess().getFgFeatureGroupTypeQCREFParserRuleCall_0_1(), semanticObject.getFg());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         ((arg+=Argument? arg+=Argument* out=Type_expression?) | ftype=UnnamedFunctionType | typeref=[Type_declaration|ID]) 
	 *         (closure=MCSClosure | exp_body=XExpression)
	 *     )
	 */
	protected void sequence_Function_declaration(EObject context, Function_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=Type_expression)
	 */
	protected void sequence_Id_type_pair(EObject context, Id_type_pair semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.ID_TYPE_PAIR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.ID_TYPE_PAIR__NAME));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.ID_TYPE_PAIR__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.ID_TYPE_PAIR__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getId_type_pairAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getId_type_pairAccess().getTypeType_expressionParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (modes+=ID modes+=ID*)
	 */
	protected void sequence_In_modes_list(EObject context, In_modes_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=SignedInt
	 */
	protected void sequence_IntegerLit(EObject context, IntegerLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (lowerBound=IntegerTerm | lowerBound=SignedConstant | lowerBound=ConstantValue) 
	 *         (upperBound=IntegerTerm | upperBound=SignedConstant | upperBound=ConstantValue)
	 *     )
	 */
	protected void sequence_IntegerRange(EObject context, NumericRange semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value=SignedInt unit=[UnitLiteral|ID]?)
	 */
	protected void sequence_IntegerTerm(EObject context, IntegerLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (var_id=ID expr=expression local+=Local_declaration* statements+=Theorem_statement+)
	 */
	protected void sequence_Iteration(EObject context, Iteration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     type=Type_expression
	 */
	protected void sequence_List_type(EObject context, List_type semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.LIST_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.LIST_TYPE__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getList_typeAccess().getTypeType_expressionParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (const?='const'? name=ID type=Type_expression? (left_expr=MCSClosure | left_expr=constant_expression))
	 */
	protected void sequence_Local_declaration(EObject context, Local_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         types+=Type_declaration* 
	 *         constants+=Constant_declaration* 
	 *         functions+=Function_declaration* 
	 *         theorems+=Theorem_declaration* 
	 *         (viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)? 
	 *         (enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?
	 *     )
	 */
	protected void sequence_MCSAnnexLibrary(EObject context, MCSAnnexLibrary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         types+=Type_declaration* 
	 *         constants+=Constant_declaration* 
	 *         functions+=Function_declaration* 
	 *         theorems+=Theorem_declaration+ 
	 *         (enforceclauses+=ClassifierEnforce enforceclauses+=ClassifierEnforce*)?
	 *     )
	 */
	protected void sequence_MCSAnnexSubclause(EObject context, MCSAnnexSubclause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (((declaredFormalParameters+=Argument declaredFormalParameters+=Argument*)? explicitSyntax?='|')? expression=XExpressionInClosure)
	 */
	protected void sequence_MCSClosure(EObject context, MCSClosure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lib=MCSAnnexLibrary | subclause=MCSAnnexSubclause)
	 */
	protected void sequence_MCSGrammarRoot(EObject context, MCSGrammarRoot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID policy=Enforcement_policy pscript=PackageScript?)
	 */
	protected void sequence_MCSViewpoint(EObject context, MCSViewpoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     type=Type_expression
	 */
	protected void sequence_Map_type(EObject context, Map_type semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.MAP_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.MAP_TYPE__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMap_typeAccess().getTypeType_expressionParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ModeName(EObject context, ModeName semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.MODE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.MODE_NAME__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getModeNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     mode=ModeName
	 */
	protected void sequence_ModeSpec(EObject context, ModeSpec semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.MODE_SPEC__MODE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.MODE_SPEC__MODE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getModeSpecAccess().getModeModeNameParserRuleCall_2_0(), semanticObject.getMode());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     viewpoint=[MCSViewpoint|ID]
	 */
	protected void sequence_PackageEnforce(EObject context, PackageEnforce semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.PACKAGE_ENFORCE__VIEWPOINT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.PACKAGE_ENFORCE__VIEWPOINT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPackageEnforceAccess().getViewpointMCSViewpointIDTerminalRuleCall_1_0_1(), semanticObject.getViewpoint());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((applies+=AppliesToClause c_block+=ConstraintsBlock+)* ref=ViewpointReference)
	 */
	protected void sequence_PackageScript(EObject context, PackageScript semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     classifier=[ComponentClassifier|FQCREF]
	 */
	protected void sequence_QCReference(EObject context, ClassifierValue semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annexName=ID? metaclassName+=ID+)
	 */
	protected void sequence_QMReference(EObject context, MetaclassReference semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (direct?='direct'? result_types+=Element_types result_types+=Element_types* elem_set=expression mode_spec?=ModeSpec?)
	 */
	protected void sequence_Query_element_set(EObject context, Query_element_set semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=SignedReal
	 */
	protected void sequence_RealLit(EObject context, RealLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (lowerBound=RealTerm | lowerBound=SignedConstant | lowerBound=ConstantValue) 
	 *         (upperBound=RealTerm | upperBound=SignedConstant | upperBound=ConstantValue)
	 *     )
	 */
	protected void sequence_RealRange(EObject context, NumericRange semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value=SignedReal unit=[UnitLiteral|ID]?)
	 */
	protected void sequence_RealTerm(EObject context, RealLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     field+=Id_type_pair+
	 */
	protected void sequence_Record_type(EObject context, Record_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (result=expression var=ID set=expression cond?=expression?)
	 */
	protected void sequence_Set_comprehension(EObject context, Set_comprehension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     type=Type_expression
	 */
	protected void sequence_Set_type(EObject context, Set_type semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.SET_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.SET_TYPE__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSet_typeAccess().getTypeType_expressionParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (op=PlusMinus ownedPropertyExpression+=ConstantValue)
	 */
	protected void sequence_SignedConstant(EObject context, Operation semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID ml?=In_modes_list? locals+=Local_declaration* statements+=Theorem_statement* endname=[Theorem_declaration|ID])
	 */
	protected void sequence_Theorem_declaration(EObject context, Theorem_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=Type_expression)
	 */
	protected void sequence_Type_declaration(EObject context, Type_declaration semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.TYPE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.TYPE_DECLARATION__NAME));
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.TYPE_DECLARATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.TYPE_DECLARATION__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getType_declarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getType_declarationAccess().getTypeType_expressionParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (basic=Basic_type | composite=Composite_type | element=Element_type)
	 */
	protected void sequence_Type_expression(EObject context, Type_expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (typename+=ID? type+=Type_expression (typename+=ID? type+=Type_expression)*)
	 */
	protected void sequence_Union_type(EObject context, Union_type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID baseUnit=[UnitLiteral|ID] factor=NumberValue)
	 */
	protected void sequence_UnitLiteralConversion(EObject context, UnitLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_UnitLiteral(EObject context, UnitLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {AadlBoolean}
	 */
	protected void sequence_UnnamedBooleanType(EObject context, AadlBoolean semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((classifierReference+=QMReference classifierReference+=QMReference*)?)
	 */
	protected void sequence_UnnamedClassifierType(EObject context, ClassifierType semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ownedLiteral+=EnumerationLiteral ownedLiteral+=EnumerationLiteral*)
	 */
	protected void sequence_UnnamedEnumerationType(EObject context, EnumerationType semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (parm+=Type_expression? parm+=Type_expression+ (outspec?='returns' result=Type_expression)?)
	 */
	protected void sequence_UnnamedFunctionType(EObject context, UnnamedFunctionType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | referencedUnitsType=[UnitsType|QPREF])?)
	 */
	protected void sequence_UnnamedIntegerType(EObject context, AadlInteger semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ownedNumberType=UnnamedIntegerType | ownedNumberType=UnnamedRealType | numberType=[NumberType|QPREF])
	 */
	protected void sequence_UnnamedRangeType(EObject context, RangeType semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (range=RealRange? (ownedUnitsType=UnnamedUnitsType | referencedUnitsType=[UnitsType|QPREF])?)
	 */
	protected void sequence_UnnamedRealType(EObject context, AadlReal semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((namedElementReference+=QMReference namedElementReference+=QMReference*)?)
	 */
	protected void sequence_UnnamedReferenceType(EObject context, ReferenceType semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {AadlString}
	 */
	protected void sequence_UnnamedStringType(EObject context, AadlString semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ownedLiteral+=UnitLiteral ownedLiteral+=UnitLiteralConversion*)
	 */
	protected void sequence_UnnamedUnitsType(EObject context, UnitsType semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (policy=[Enforcement_policy|ID]? vp_ref=[MCSViewpoint|ID])
	 */
	protected void sequence_ViewpointReference(EObject context, ViewpointReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     expr=expression
	 */
	protected void sequence_assertion_expression(EObject context, assertion_expression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.ASSERTION_EXPRESSION__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.ASSERTION_EXPRESSION__EXPR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getAssertion_expressionAccess().getExprExpressionParserRuleCall_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_block_label_id(EObject context, block_label_id semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.BLOCK_LABEL_ID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.BLOCK_LABEL_ID__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getBlock_label_idAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (root=root_element? inmode=ModeSpec? expr=assertion_expression str=string_expression?)
	 */
	protected void sequence_check_assertion(EObject context, check_assertion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_check_label_id(EObject context, check_label_id semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.CHECK_LABEL_ID__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.CHECK_LABEL_ID__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCheck_label_idAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=[Theorem_declaration|ID] root=root_element? inmode=ModeSpec? str=string_expression?)
	 */
	protected void sequence_check_theorem(EObject context, check_theorem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     self?='self'
	 */
	protected void sequence_element_reference(EObject context, element_reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=XExpression
	 */
	protected void sequence_expression(EObject context, expression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.EXPRESSION__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getExpressionAccess().getNameXExpressionParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (c_label=check_label_id? cs=check_statement)
	 */
	protected void sequence_labelled_check_statement(EObject context, labelled_check_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (el_ref=element_reference exists?='?'? property=[Property|QPREF])
	 */
	protected void sequence_property_reference(EObject context, property_reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     expr=expression
	 */
	protected void sequence_string_expression(EObject context, string_expression semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, McsPackage.Literals.STRING_EXPRESSION__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McsPackage.Literals.STRING_EXPRESSION__EXPR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getString_expressionAccess().getExprExpressionParserRuleCall_0(), semanticObject.getExpr());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_access?='T_Access' | 
	 *         t_data_acc?='T_Data_Access' | 
	 *         t_sub_acc?='T_Subprogram_Access' | 
	 *         t_sub_gr_acc?='T_Subprogram_Group_Access' | 
	 *         t_bus_acc?='T_Bus_Access'
	 *     )
	 */
	protected void sequence_t_access_subtypes(EObject context, t_access_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_ctype?='T_Component_Type_Classifier' | 
	 *         t_cimpl?='T_Component_Impl_Classifier' | 
	 *         t_fgclass?='T_Feature_Group_Classifier' | 
	 *         t_annexclass?='T_Annex_Classifier'
	 *     )
	 */
	protected void sequence_t_classifier_subtypes(EObject context, t_classifier_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_class?='T_Classifier' | t_class_subtype?=t_classifier_subtypes)
	 */
	protected void sequence_t_classifiers(EObject context, t_classifiers semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_comp_impref?='T_Component_Impl_Ref' | 
	 *         t_abstract?='T_Abstract' | 
	 *         t_sys?='T_System' | 
	 *         t_proc?='T_Processor' | 
	 *         t_virt_proc?='T_Virtual_Processor' | 
	 *         t_bus?='T_Bus' | 
	 *         t_vbus?='T_Virtual_Bus' | 
	 *         t_mem?='T_Memory' | 
	 *         t_proc?='T_Process' | 
	 *         t_tg?='T_Thread_Group' | 
	 *         t_t?='T_Thread' | 
	 *         t_d?='T_Data' | 
	 *         t_subprog?='T_Subprogram' | 
	 *         t_subprog_g?='T_Subprogram_Group'
	 *     )
	 */
	protected void sequence_t_component_impl_subtypes(EObject context, t_component_impl_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_conn?='T_Connection' | 
	 *         t_feat_conn?='T_Feature_Connection' | 
	 *         t_port_conn?='T_Port_Connection' | 
	 *         t_parm_conn?='T_Parameter_Connection' | 
	 *         t_acc_con?='T_Access_Connection' | 
	 *         t_fg_conn?='T_Feature_Group_Connection'
	 *     )
	 */
	protected void sequence_t_connection_subtypes(EObject context, t_connection_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_feat?='T_Feature' | t_abs_feat?='T_Abstract_Feature' | t_parm?='T_Parameter' | t_fg?='T_Feature_Group')
	 */
	protected void sequence_t_feature_subtypes(EObject context, t_feature_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_f_i?='T_Flow_Impl' | t_f_i_source?='T_Flow_Impl_Source' | t_f_i_sink?='T_Flow_Impl_Sink' | t_f_i_path?='T_Flow_Impl_Path')
	 */
	protected void sequence_t_flow_impl_subtypes(EObject context, t_flow_impl_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_f_spec?='T_Flow_Spec' | t_f_spec_source?='T_Flow_Spec_Source' | t_f_spec_sink?='T_Flow_Spec_Sink' | t_f_spec_path?='T_Flow_Spec_Path')
	 */
	protected void sequence_t_flow_spec_subtypes(EObject context, t_flow_spec_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         t_subc_st?=t_subcomponent_subtypes | 
	 *         t_sbcall?='T_Subprogram_Call' | 
	 *         t_callseq?='T_Call_Sequence' | 
	 *         t_eeflow?='T_End_To_End_Flow' | 
	 *         t_proto?='T_Prototype' | 
	 *         t_mode?='T_Mode' | 
	 *         t_req_mode?='T_Required_Mode' | 
	 *         t_mod_trans?='T_Mode_Transition' | 
	 *         t_mode_trig?='T_Mode_Trigger_Id'
	 *     )
	 */
	protected void sequence_t_named_reference_subtypes(EObject context, t_named_reference_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_nref?='T_Named_Reference' | t_nref_st?=t_named_reference_subtypes)
	 */
	protected void sequence_t_named_references(EObject context, t_named_references semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_port?='T_Port' | t_d_port?='T_Data_Port' | t_ev_port?='T_Event_Port' | t_evd_port?='T_Event_Data_Port')
	 */
	protected void sequence_t_port_subtypes(EObject context, t_port_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (t_sub?='T_Subcomponent' | t_annex_sub?='T_Annex_Subcomponent' | t_comp_typeref?='T_Component_Type_Ref' | t_cimpl_st?=t_component_impl_subtypes)
	 */
	protected void sequence_t_subcomponent_subtypes(EObject context, t_subcomponent_subtypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
