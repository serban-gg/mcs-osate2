/*
 * generated by Xtext
 */
parser grammar InternalMCSParser;

options {
	tokenVocab=InternalMCSLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.osate.xtext.aadl2.mcs.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.xtext.aadl2.mcs.services.MCSGrammarAccess;

}

@members {


	private MCSGrammarAccess grammarAccess;
	 	
	public InternalMCSParser(TokenStream input, MCSGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "MCSGrammarRoot";	
	} 
	   	   	
	@Override
	protected MCSGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleMCSGrammarRoot
entryRuleMCSGrammarRoot returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSGrammarRootRule()); }
	 iv_ruleMCSGrammarRoot=ruleMCSGrammarRoot 
	 { $current=$iv_ruleMCSGrammarRoot.current; } 
	 EOF 
;

// Rule MCSGrammarRoot
ruleMCSGrammarRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Annex
    {
    	newLeafNode(otherlv_0, grammarAccess.getMCSGrammarRootAccess().getAnnexKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSGrammarRootAccess().getLibMCSAnnexLibraryParserRuleCall_0_1_0()); 
	    }
		lv_lib_1_0=ruleMCSAnnexLibrary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSGrammarRootRule());
	        }
       		set(
       			$current, 
       			"lib",
        		lv_lib_1_0, 
        		"MCSAnnexLibrary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_2=Mcs
    {
    	newLeafNode(otherlv_2, grammarAccess.getMCSGrammarRootAccess().getMcsKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSGrammarRootAccess().getFileMCSFileParserRuleCall_1_1_0()); 
	    }
		lv_file_3_0=ruleMCSFile		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSGrammarRootRule());
	        }
       		set(
       			$current, 
       			"file",
        		lv_file_3_0, 
        		"MCSFile");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_4=Subclause
    {
    	newLeafNode(otherlv_4, grammarAccess.getMCSGrammarRootAccess().getSubclauseKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSGrammarRootAccess().getSubclauseMCSAnnexSubclauseParserRuleCall_2_1_0()); 
	    }
		lv_subclause_5_0=ruleMCSAnnexSubclause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSGrammarRootRule());
	        }
       		set(
       			$current, 
       			"subclause",
        		lv_subclause_5_0, 
        		"MCSAnnexSubclause");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;









// Entry rule entryRuleMCSAnnexLibrary
entryRuleMCSAnnexLibrary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSAnnexLibraryRule()); }
	 iv_ruleMCSAnnexLibrary=ruleMCSAnnexLibrary 
	 { $current=$iv_ruleMCSAnnexLibrary.current; } 
	 EOF 
;

// Rule MCSAnnexLibrary
ruleMCSAnnexLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMCSAnnexLibraryAccess().getMCSAnnexLibraryAction_0(),
            $current);
    }
)(
	otherlv_1=Types
    {
    	newLeafNode(otherlv_1, grammarAccess.getMCSAnnexLibraryAccess().getTypesKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getTypesType_declarationParserRuleCall_1_1_0()); 
	    }
		lv_types_2_0=ruleType_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"Type_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_3=Constants
    {
    	newLeafNode(otherlv_3, grammarAccess.getMCSAnnexLibraryAccess().getConstantsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getConstantsConstant_declarationParserRuleCall_2_1_0()); 
	    }
		lv_constants_4_0=ruleConstant_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_4_0, 
        		"Constant_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_5=Functions
    {
    	newLeafNode(otherlv_5, grammarAccess.getMCSAnnexLibraryAccess().getFunctionsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getFunctionsFunction_declarationParserRuleCall_3_1_0()); 
	    }
		lv_functions_6_0=ruleFunction_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_6_0, 
        		"Function_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_7=Theorems
    {
    	newLeafNode(otherlv_7, grammarAccess.getMCSAnnexLibraryAccess().getTheoremsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getTheoremsTheorem_declarationParserRuleCall_4_1_0()); 
	    }
		lv_theorems_8_0=ruleTheorem_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"theorems",
        		lv_theorems_8_0, 
        		"Theorem_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleMCSFile
entryRuleMCSFile returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSFileRule()); }
	 iv_ruleMCSFile=ruleMCSFile 
	 { $current=$iv_ruleMCSFile.current; } 
	 EOF 
;

// Rule MCSFile
ruleMCSFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMCSFileAccess().getMCSFileAction_0(),
            $current);
    }
)(
	otherlv_1=With
    {
    	newLeafNode(otherlv_1, grammarAccess.getMCSFileAccess().getWithKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSFileRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getMCSFileAccess().getImportedUnitModelUnitCrossReference_1_1_0()); 
	}

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getMCSFileAccess().getCommaKeyword_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSFileRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getMCSFileAccess().getImportedUnitModelUnitCrossReference_1_2_1_0()); 
	}

)
))*)+(
	otherlv_5=Import
    {
    	newLeafNode(otherlv_5, grammarAccess.getMCSFileAccess().getImportKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSFileAccess().getFilesFile_nameParserRuleCall_2_1_0()); 
	    }
		lv_files_6_0=ruleFile_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSFileRule());
	        }
       		add(
       			$current, 
       			"files",
        		lv_files_6_0, 
        		"File_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_7=Comma
    {
    	newLeafNode(otherlv_7, grammarAccess.getMCSFileAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSFileAccess().getFilesFile_nameParserRuleCall_2_2_1_0()); 
	    }
		lv_files_8_0=ruleFile_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSFileRule());
	        }
       		add(
       			$current, 
       			"files",
        		lv_files_8_0, 
        		"File_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)*(
	otherlv_9=Types
    {
    	newLeafNode(otherlv_9, grammarAccess.getMCSFileAccess().getTypesKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSFileAccess().getTypesType_declarationParserRuleCall_3_1_0()); 
	    }
		lv_types_10_0=ruleType_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSFileRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_10_0, 
        		"Type_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_11=Constants
    {
    	newLeafNode(otherlv_11, grammarAccess.getMCSFileAccess().getConstantsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSFileAccess().getConstantsConstant_declarationParserRuleCall_4_1_0()); 
	    }
		lv_constants_12_0=ruleConstant_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSFileRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_12_0, 
        		"Constant_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_13=Functions
    {
    	newLeafNode(otherlv_13, grammarAccess.getMCSFileAccess().getFunctionsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSFileAccess().getFunctionsFunction_declarationParserRuleCall_5_1_0()); 
	    }
		lv_functions_14_0=ruleFunction_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSFileRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_14_0, 
        		"Function_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_15=Theorems
    {
    	newLeafNode(otherlv_15, grammarAccess.getMCSFileAccess().getTheoremsKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSFileAccess().getTheoremsTheorem_declarationParserRuleCall_6_1_0()); 
	    }
		lv_theorems_16_0=ruleTheorem_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSFileRule());
	        }
       		add(
       			$current, 
       			"theorems",
        		lv_theorems_16_0, 
        		"Theorem_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_17=Constraints
    {
    	newLeafNode(otherlv_17, grammarAccess.getMCSFileAccess().getConstraintsKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSFileAccess().getCallsTheorem_callParserRuleCall_7_1_0()); 
	    }
		lv_calls_18_0=ruleTheorem_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSFileRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_18_0, 
        		"Theorem_call");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleMCSAnnexSubclause
entryRuleMCSAnnexSubclause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSAnnexSubclauseRule()); }
	 iv_ruleMCSAnnexSubclause=ruleMCSAnnexSubclause 
	 { $current=$iv_ruleMCSAnnexSubclause.current; } 
	 EOF 
;

// Rule MCSAnnexSubclause
ruleMCSAnnexSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMCSAnnexSubclauseAccess().getMCSAnnexSubclauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexSubclauseAccess().getCallsTheorem_callParserRuleCall_1_0()); 
	    }
		lv_calls_1_0=ruleTheorem_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"calls",
        		lv_calls_1_0, 
        		"Theorem_call");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFile_name
entryRuleFile_name returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFile_nameRule()); } 
	 iv_ruleFile_name=ruleFile_name 
	 { $current=$iv_ruleFile_name.current.getText(); }  
	 EOF 
;

// Rule File_name
ruleFile_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getFile_nameAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleType_declaration
entryRuleType_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getType_declarationRule()); }
	 iv_ruleType_declaration=ruleType_declaration 
	 { $current=$iv_ruleType_declaration.current; } 
	 EOF 
;

// Rule Type_declaration
ruleType_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Type
    {
    	newLeafNode(otherlv_0, grammarAccess.getType_declarationAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getType_declarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getType_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=EqualsSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getType_declarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getType_declarationAccess().getTypeType_expressionParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getType_declarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleConstant_declaration
entryRuleConstant_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstant_declarationRule()); }
	 iv_ruleConstant_declaration=ruleConstant_declaration 
	 { $current=$iv_ruleConstant_declaration.current; } 
	 EOF 
;

// Rule Constant_declaration
ruleConstant_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Const
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstant_declarationAccess().getConstKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConstant_declarationAccess().getConstMcsTypedNameParserRuleCall_1_0()); 
	    }
		lv_const_1_0=ruleMcsTypedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstant_declarationRule());
	        }
       		set(
       			$current, 
       			"const",
        		lv_const_1_0, 
        		"McsTypedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=EqualsSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstant_declarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstant_declarationAccess().getLeft_exprExprParserRuleCall_3_0()); 
	    }
		lv_left_expr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstant_declarationRule());
	        }
       		set(
       			$current, 
       			"left_expr",
        		lv_left_expr_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstant_declarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleFunction_declaration
entryRuleFunction_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunction_declarationRule()); }
	 iv_ruleFunction_declaration=ruleFunction_declaration 
	 { $current=$iv_ruleFunction_declaration.current; } 
	 EOF 
;

// Rule Function_declaration
ruleFunction_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunction_declarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunction_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)((
LeftParenthesis
)=>
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunction_declarationAccess().getLeftParenthesisKeyword_1());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getArgsParameterParserRuleCall_2_0_0()); 
	    }
		lv_args_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunction_declarationAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getArgsParameterParserRuleCall_2_1_1_0()); 
	    }
		lv_args_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunction_declarationAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getBodyFunctionBodyParserRuleCall_4_0()); 
	    }
		lv_body_6_0=ruleFunctionBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"FunctionBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTheorem_declaration
entryRuleTheorem_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTheorem_declarationRule()); }
	 iv_ruleTheorem_declaration=ruleTheorem_declaration 
	 { $current=$iv_ruleTheorem_declaration.current; } 
	 EOF 
;

// Rule Theorem_declaration
ruleTheorem_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTheorem_declarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTheorem_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_declarationAccess().getT_rootTheorem_rootParserRuleCall_1_0()); 
	    }
		lv_t_root_1_0=ruleTheorem_root		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_declarationRule());
	        }
       		set(
       			$current, 
       			"t_root",
        		true, 
        		"Theorem_root");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
LeftParenthesis
)=>
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getTheorem_declarationAccess().getLeftParenthesisKeyword_2());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_declarationAccess().getArgsParameterParserRuleCall_3_0_0()); 
	    }
		lv_args_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_declarationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getTheorem_declarationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_declarationAccess().getArgsParameterParserRuleCall_3_1_1_0()); 
	    }
		lv_args_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_declarationRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getTheorem_declarationAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_declarationAccess().getBodyTheoremBodyParserRuleCall_5_0()); 
	    }
		lv_body_7_0=ruleTheoremBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_declarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_7_0, 
        		"TheoremBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTheorem_root
entryRuleTheorem_root returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTheorem_rootRule()); }
	 iv_ruleTheorem_root=ruleTheorem_root 
	 { $current=$iv_ruleTheorem_root.current; } 
	 EOF 
;

// Rule Theorem_root
ruleTheorem_root returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LessThanSign
    {
    	newLeafNode(otherlv_0, grammarAccess.getTheorem_rootAccess().getLessThanSignKeyword_0());
    }

	otherlv_1=Root
    {
    	newLeafNode(otherlv_1, grammarAccess.getTheorem_rootAccess().getRootKeyword_1());
    }

	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getTheorem_rootAccess().getColonKeyword_2());
    }
((
(
		lv_nilroot_3_0=
	Nil
    {
        newLeafNode(lv_nilroot_3_0, grammarAccess.getTheorem_rootAccess().getNilrootNilKeyword_3_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTheorem_rootRule());
	        }
       		setWithLastConsumed($current, "nilroot", true, "nil");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_rootAccess().getClassifierClassifiersParserRuleCall_3_1_0()); 
	    }
		lv_classifier_4_0=ruleClassifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_rootRule());
	        }
       		set(
       			$current, 
       			"classifier",
        		lv_classifier_4_0, 
        		"Classifiers");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_5=GreaterThanSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getTheorem_rootAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleFunctionBody
entryRuleFunctionBody returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunctionBodyRule()); }
	 iv_ruleFunctionBody=ruleFunctionBody 
	 { $current=$iv_ruleFunctionBody.current; } 
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionBodyAccess().getFunctionBodyAction_0(),
            $current);
    }
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionBodyAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBodyAccess().getTypeType_expressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=EqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionBodyAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBodyAccess().getExprExprParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBodyRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTheoremBody
entryRuleTheoremBody returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTheoremBodyRule()); }
	 iv_ruleTheoremBody=ruleTheoremBody 
	 { $current=$iv_ruleTheoremBody.current; } 
	 EOF 
;

// Rule TheoremBody
ruleTheoremBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTheoremBodyAccess().getTheoremBodyAction_0(),
            $current);
    }
)
	otherlv_1=LessThanSignEqualsSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getTheoremBodyAccess().getLessThanSignEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTheoremBodyAccess().getStringParameterizedStringParserRuleCall_2_0()); 
	    }
		lv_string_2_0=ruleParameterizedString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheoremBodyRule());
	        }
       		add(
       			$current, 
       			"string",
        		lv_string_2_0, 
        		"ParameterizedString");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getTheoremBodyAccess().getExprExprParserRuleCall_3_0()); 
	    }
		lv_expr_3_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheoremBodyRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterizedString
entryRuleParameterizedString returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParameterizedStringRule()); }
	 iv_ruleParameterizedString=ruleParameterizedString 
	 { $current=$iv_ruleParameterizedString.current; } 
	 EOF 
;

// Rule ParameterizedString
ruleParameterizedString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=AsteriskAsterisk
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterizedStringAccess().getAsteriskAsteriskKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterizedStringAccess().getClaimTextParmParserRuleCall_1_0()); 
	    }
		lv_claim_1_0=ruleTextParm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterizedStringRule());
	        }
       		add(
       			$current, 
       			"claim",
        		lv_claim_1_0, 
        		"TextParm");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_2=AsteriskAsterisk
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterizedStringAccess().getAsteriskAsteriskKeyword_2());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getParameterAccess().getMcsTypedNameParserRuleCall()); 
    }
    this_McsTypedName_0=ruleMcsTypedName
    {
        $current = $this_McsTypedName_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleTextParm
entryRuleTextParm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTextParmRule()); }
	 iv_ruleTextParm=ruleTextParm 
	 { $current=$iv_ruleTextParm.current; } 
	 EOF 
;

// Rule TextParm
ruleTextParm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTextParmAccess().getClaimStringAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTextParmAccess().getStrStringTermParserRuleCall_0_1_0()); 
	    }
		lv_str_1_0=ruleStringTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTextParmRule());
	        }
       		set(
       			$current, 
       			"str",
        		lv_str_1_0, 
        		"StringTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTextParmAccess().getClaimArgAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTextParmAccess().getTextargMCSNameExprParserRuleCall_1_1_0()); 
	    }
		lv_textarg_3_0=ruleMCSNameExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTextParmRule());
	        }
       		set(
       			$current, 
       			"textarg",
        		lv_textarg_3_0, 
        		"MCSNameExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=PercentSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getTextParmAccess().getPercentSignKeyword_1_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextParmRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getTextParmAccess().getUnitUnitLiteralCrossReference_1_2_1_0()); 
	}

)
))?))
;





// Entry rule entryRuleMcsTypedName
entryRuleMcsTypedName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMcsTypedNameRule()); }
	 iv_ruleMcsTypedName=ruleMcsTypedName 
	 { $current=$iv_ruleMcsTypedName.current; } 
	 EOF 
;

// Rule McsTypedName
ruleMcsTypedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMcsTypedNameAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMcsTypedNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)((
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getMcsTypedNameAccess().getColonKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMcsTypedNameAccess().getTypeType_expressionParserRuleCall_1_0_1_0()); 
	    }
		lv_type_2_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMcsTypedNameRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_3=In
    {
    	newLeafNode(otherlv_3, grammarAccess.getMcsTypedNameAccess().getInKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMcsTypedNameAccess().getExprExprParserRuleCall_1_1_1_0()); 
	    }
		lv_expr_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMcsTypedNameRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleTheorem_call
entryRuleTheorem_call returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTheorem_callRule()); }
	 iv_ruleTheorem_call=ruleTheorem_call 
	 { $current=$iv_ruleTheorem_call.current; } 
	 EOF 
;

// Rule Theorem_call
ruleTheorem_call returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Check
    {
    	newLeafNode(otherlv_0, grammarAccess.getTheorem_callAccess().getCheckKeyword_0_0());
    }

    |
	otherlv_1=Prove
    {
    	newLeafNode(otherlv_1, grammarAccess.getTheorem_callAccess().getProveKeyword_0_1());
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTheorem_callRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTheorem_callAccess().getTnameTheoremCrossReference_1_0()); 
	}

)
)(
	otherlv_3=LessThanSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getTheorem_callAccess().getLessThanSignKeyword_2_0());
    }
(
	otherlv_4=Nil
    {
    	newLeafNode(otherlv_4, grammarAccess.getTheorem_callAccess().getNilKeyword_2_1_0());
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_callAccess().getCrootClassifier_literalParserRuleCall_2_1_1_0()); 
	    }
		lv_croot_5_0=ruleClassifier_literal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_callRule());
	        }
       		set(
       			$current, 
       			"croot",
        		lv_croot_5_0, 
        		"Classifier_literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_6=GreaterThanSign
    {
    	newLeafNode(otherlv_6, grammarAccess.getTheorem_callAccess().getGreaterThanSignKeyword_2_2());
    }
)?
	otherlv_7=LeftParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getTheorem_callAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_callAccess().getActargExprParserRuleCall_4_0_0()); 
	    }
		lv_actarg_8_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_callRule());
	        }
       		add(
       			$current, 
       			"actarg",
        		lv_actarg_8_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_9=Comma
    {
    	newLeafNode(otherlv_9, grammarAccess.getTheorem_callAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_callAccess().getActargExprParserRuleCall_4_1_1_0()); 
	    }
		lv_actarg_10_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_callRule());
	        }
       		add(
       			$current, 
       			"actarg",
        		lv_actarg_10_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_11=RightParenthesis
    {
    	newLeafNode(otherlv_11, grammarAccess.getTheorem_callAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleClassifier_literal
entryRuleClassifier_literal returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getClassifier_literalRule()); }
	 iv_ruleClassifier_literal=ruleClassifier_literal 
	 { $current=$iv_ruleClassifier_literal.current; } 
	 EOF 
;

// Rule Classifier_literal
ruleClassifier_literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((RULE_ID)=>
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifier_literalRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassifier_literalAccess().getClasslitComponentClassifierCrossReference_0_0()); 
	    }
		ruleFQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifier_literalAccess().getNamerefMcs_name_refParserRuleCall_1_0()); 
	    }
		lv_nameref_1_0=ruleMcs_name_ref		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifier_literalRule());
	        }
       		set(
       			$current, 
       			"nameref",
        		lv_nameref_1_0, 
        		"Mcs_name_ref");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRealTerm
entryRuleRealTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealTermRule()); }
	 iv_ruleRealTerm=ruleRealTerm 
	 { $current=$iv_ruleRealTerm.current; } 
	 EOF 
;

// Rule RealTerm
ruleRealTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRealTermAccess().getValueUnsignedRealParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleUnsignedReal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"UnsignedReal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRealTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleUnsignedReal
entryRuleUnsignedReal returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUnsignedRealRule()); } 
	 iv_ruleUnsignedReal=ruleUnsignedReal 
	 { $current=$iv_ruleUnsignedReal.current.getText(); }  
	 EOF 
;

// Rule UnsignedReal
ruleUnsignedReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_REAL_LIT_0=RULE_REAL_LIT    {
		$current.merge(this_REAL_LIT_0);
    }

    { 
    newLeafNode(this_REAL_LIT_0, grammarAccess.getUnsignedRealAccess().getREAL_LITTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleIntegerTerm
entryRuleIntegerTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerTermRule()); }
	 iv_ruleIntegerTerm=ruleIntegerTerm 
	 { $current=$iv_ruleIntegerTerm.current; } 
	 EOF 
;

// Rule IntegerTerm
ruleIntegerTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerTermAccess().getValueUnsignedIntParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleUnsignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"UnsignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleUnsignedInt
entryRuleUnsignedInt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getUnsignedIntRule()); } 
	 iv_ruleUnsignedInt=ruleUnsignedInt 
	 { $current=$iv_ruleUnsignedInt.current.getText(); }  
	 EOF 
;

// Rule UnsignedInt
ruleUnsignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_INTEGER_LIT_0=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_0);
    }

    { 
    newLeafNode(this_INTEGER_LIT_0, grammarAccess.getUnsignedIntAccess().getINTEGER_LITTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getLowerBoundIntegerTermParserRuleCall_0_0_0()); 
	    }
		lv_lowerBound_0_1=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_1, 
        		"IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getLowerBoundRealTermParserRuleCall_0_0_1()); 
	    }
		lv_lowerBound_0_2=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_2, 
        		"RealTerm");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeAccess().getFullStopFullStopKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getUpperBoundIntegerTermParserRuleCall_2_0_0()); 
	    }
		lv_upperBound_2_1=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_1, 
        		"IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getUpperBoundRealTermParserRuleCall_2_0_1()); 
	    }
		lv_upperBound_2_2=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_2, 
        		"RealTerm");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleRefTerm
entryRuleRefTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRefTermRule()); }
	 iv_ruleRefTerm=ruleRefTerm 
	 { $current=$iv_ruleRefTerm.current; } 
	 EOF 
;

// Rule RefTerm
ruleRefTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Reference
    {
    	newLeafNode(otherlv_0, grammarAccess.getRefTermAccess().getReferenceKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getRefTermAccess().getLeftParenthesisKeyword_1());
    }
((
(
		lv_root_2_0=
	Root
    {
        newLeafNode(lv_root_2_0, grammarAccess.getRefTermAccess().getRootRootKeyword_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefTermRule());
	        }
       		setWithLastConsumed($current, "root", true, "root");
	    }

)
)
	otherlv_3=FullStop
    {
    	newLeafNode(otherlv_3, grammarAccess.getRefTermAccess().getFullStopKeyword_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRefTermAccess().getSubNestedDotIDParserRuleCall_3_0()); 
	    }
		lv_sub_4_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefTermRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_4_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getRefTermAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleNestedDotID
entryRuleNestedDotID returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNestedDotIDRule()); }
	 iv_ruleNestedDotID=ruleNestedDotID 
	 { $current=$iv_ruleNestedDotID.current; } 
	 EOF 
;

// Rule NestedDotID
ruleNestedDotID returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNestedDotIDRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNestedDotIDAccess().getBaseNamedElementCrossReference_0_0()); 
	}

)
)(
	otherlv_1=FullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getNestedDotIDAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedDotIDAccess().getSubNestedDotIDParserRuleCall_1_1_0()); 
	    }
		lv_sub_2_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedDotIDRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_2_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMcs_name_ref
entryRuleMcs_name_ref returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMcs_name_refRule()); }
	 iv_ruleMcs_name_ref=ruleMcs_name_ref 
	 { $current=$iv_ruleMcs_name_ref.current; } 
	 EOF 
;

// Rule Mcs_name_ref
ruleMcs_name_ref returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMcs_name_refRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getMcs_name_refAccess().getRefMcsTypedNameCrossReference_0_0()); 
	}

)
)((
FullStop
)=>(
(
		{ 
	        newCompositeNode(grammarAccess.getMcs_name_refAccess().getChainMethodChainParserRuleCall_1_0_0()); 
	    }
		lv_chain_1_0=ruleMethodChain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMcs_name_refRule());
	        }
       		set(
       			$current, 
       			"chain",
        		lv_chain_1_0, 
        		"MethodChain");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMethodChain
entryRuleMethodChain returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMethodChainRule()); }
	 iv_ruleMethodChain=ruleMethodChain 
	 { $current=$iv_ruleMethodChain.current; } 
	 EOF 
;

// Rule MethodChain
ruleMethodChain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMethodChainAccess().getMethodChainAction_0(),
            $current);
    }
)((
FullStop
)=>(
	otherlv_1=FullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodChainAccess().getFullStopKeyword_1_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodChainAccess().getBuiltinBuiltInFnCallParserRuleCall_1_0_1_0_0()); 
	    }
		lv_builtin_2_0=ruleBuiltInFnCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodChainRule());
	        }
       		add(
       			$current, 
       			"builtin",
        		lv_builtin_2_0, 
        		"BuiltInFnCall");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodChainAccess().getMethodFnCallParserRuleCall_1_0_1_1_0()); 
	    }
		lv_method_3_0=ruleFnCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodChainRule());
	        }
       		add(
       			$current, 
       			"method",
        		lv_method_3_0, 
        		"FnCall");
	        afterParserOrEnumRuleCall();
	    }

)
))))*)
;





// Entry rule entryRuleBuiltInFnCall
entryRuleBuiltInFnCall returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBuiltInFnCallRule()); }
	 iv_ruleBuiltInFnCall=ruleBuiltInFnCall 
	 { $current=$iv_ruleBuiltInFnCall.current; } 
	 EOF 
;

// Rule BuiltInFnCall
ruleBuiltInFnCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInFnCallAccess().getFnBuiltInFnParserRuleCall_0_0()); 
	    }
		lv_fn_0_0=ruleBuiltInFn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInFnCallRule());
	        }
       		set(
       			$current, 
       			"fn",
        		lv_fn_0_0, 
        		"BuiltInFn");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getBuiltInFnCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInFnCallAccess().getArgsExprParserRuleCall_2_0_0()); 
	    }
		lv_args_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInFnCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getBuiltInFnCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInFnCallAccess().getArgsExprParserRuleCall_2_1_1_0()); 
	    }
		lv_args_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInFnCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getBuiltInFnCallAccess().getRightParenthesisKeyword_3());
    }
(((
LessThanSign
(
(
ruleType_expression
)
)
GreaterThanSign
))=>(
	otherlv_6=LessThanSign
    {
    	newLeafNode(otherlv_6, grammarAccess.getBuiltInFnCallAccess().getLessThanSignKeyword_4_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBuiltInFnCallAccess().getNewtypeType_expressionParserRuleCall_4_0_1_0()); 
	    }
		lv_newtype_7_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuiltInFnCallRule());
	        }
       		set(
       			$current, 
       			"newtype",
        		lv_newtype_7_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_8=GreaterThanSign
    {
    	newLeafNode(otherlv_8, grammarAccess.getBuiltInFnCallAccess().getGreaterThanSignKeyword_4_0_2());
    }
))?)
;





// Entry rule entryRuleFnCall
entryRuleFnCall returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFnCallRule()); }
	 iv_ruleFnCall=ruleFnCall 
	 { $current=$iv_ruleFnCall.current; } 
	 EOF 
;

// Rule FnCall
ruleFnCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFnCallRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFnCallAccess().getFnFunctionCrossReference_0_0()); 
	}

)
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getFnCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFnCallAccess().getArgsExprParserRuleCall_2_0_0()); 
	    }
		lv_args_2_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getFnCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnCallAccess().getArgsExprParserRuleCall_2_1_1_0()); 
	    }
		lv_args_4_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnCallRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getFnCallAccess().getRightParenthesisKeyword_3());
    }
(((
LessThanSign
(
(
ruleType_expression
)
)
GreaterThanSign
))=>(
	otherlv_6=LessThanSign
    {
    	newLeafNode(otherlv_6, grammarAccess.getFnCallAccess().getLessThanSignKeyword_4_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFnCallAccess().getNewtypeType_expressionParserRuleCall_4_0_1_0()); 
	    }
		lv_newtype_7_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFnCallRule());
	        }
       		set(
       			$current, 
       			"newtype",
        		lv_newtype_7_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_8=GreaterThanSign
    {
    	newLeafNode(otherlv_8, grammarAccess.getFnCallAccess().getGreaterThanSignKeyword_4_0_2());
    }
))?)
;





// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleExpr=ruleExpr 
	 { $current=$iv_ruleExpr.current; } 
	 EOF 
;

// Rule Expr
ruleExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExprAccess().getFailExprParserRuleCall()); 
    }
    this_FailExpr_0=ruleFailExpr
    {
        $current = $this_FailExpr_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleFailExpr
entryRuleFailExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFailExprRule()); }
	 iv_ruleFailExpr=ruleFailExpr 
	 { $current=$iv_ruleFailExpr.current; } 
	 EOF 
;

// Rule FailExpr
ruleFailExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFailExprAccess().getImpliesExprParserRuleCall_0()); 
    }
    this_ImpliesExpr_0=ruleImpliesExpr
    {
        $current = $this_ImpliesExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

Fail


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getFailExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	Fail
    {
        newLeafNode(lv_op_2_0, grammarAccess.getFailExprAccess().getOpFailKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFailExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "fail");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getFailExprAccess().getRightParameterizedStringParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleParameterizedString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFailExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ParameterizedString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleImpliesExpr
entryRuleImpliesExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getImpliesExprRule()); }
	 iv_ruleImpliesExpr=ruleImpliesExpr 
	 { $current=$iv_ruleImpliesExpr.current; } 
	 EOF 
;

// Rule ImpliesExpr
ruleImpliesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    {
        $current = $this_OrExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

EqualsSignGreaterThanSign


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	EqualsSignGreaterThanSign
    {
        newLeafNode(lv_op_2_0, grammarAccess.getImpliesExprAccess().getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=>");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExprAccess().getRightImpliesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleImpliesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ImpliesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    {
        $current = $this_AndExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(

Or


)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=
	Or
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrExprAccess().getOpOrKeyword_1_0_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "or");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightAndExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getInstanceOfExprParserRuleCall_0()); 
    }
    this_InstanceOfExpr_0=ruleInstanceOfExpr
    {
        $current = $this_InstanceOfExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)((
(

And


)
)
    |(
(

Andthen


)
))))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)((
(
		lv_op_2_0=
	And
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExprAccess().getOpAndKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)
    |(
(
		lv_op_3_0=
	Andthen
    {
        newLeafNode(lv_op_3_0, grammarAccess.getAndExprAccess().getOpAndthenKeyword_1_0_0_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_3_0, "andthen");
	    }

)
))))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightInstanceOfExprParserRuleCall_1_1_0()); 
	    }
		lv_right_4_0=ruleInstanceOfExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"InstanceOfExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleInstanceOfExpr
entryRuleInstanceOfExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInstanceOfExprRule()); }
	 iv_ruleInstanceOfExpr=ruleInstanceOfExpr 
	 { $current=$iv_ruleInstanceOfExpr.current; } 
	 EOF 
;

// Rule InstanceOfExpr
ruleInstanceOfExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstanceOfExprAccess().getRelationalExprParserRuleCall_0()); 
    }
    this_RelationalExpr_0=ruleRelationalExpr
    {
        $current = $this_RelationalExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)
Instanceof
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInstanceOfExprAccess().getInstanceOfExprExprAction_1_0_0_0(),
            $current);
    }
)
	otherlv_2=Instanceof
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstanceOfExprAccess().getInstanceofKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceOfExprAccess().getTypeType_expressionParserRuleCall_1_1_0()); 
	    }
		lv_type_3_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceOfExprRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw=LessThanSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_1()); 
    }

    |
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw=GreaterThanSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_4()); 
    }

    |
	kw=LessThanSignGreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignGreaterThanSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRelationalExprRule()); }
	 iv_ruleRelationalExpr=ruleRelationalExpr 
	 { $current=$iv_ruleRelationalExpr.current; } 
	 EOF 
;

// Rule RelationalExpr
ruleRelationalExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExprAccess().getPlusExprParserRuleCall_0()); 
    }
    this_PlusExpr_0=rulePlusExpr
    {
        $current = $this_PlusExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
ruleRelationalOp
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); 
	    }
		lv_op_2_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExprAccess().getRightPlusExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePlusExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PlusExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePlusExpr
entryRulePlusExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPlusExprRule()); }
	 iv_rulePlusExpr=rulePlusExpr 
	 { $current=$iv_rulePlusExpr.current; } 
	 EOF 
;

// Rule PlusExpr
rulePlusExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusExprAccess().getTimesExprParserRuleCall_0()); 
    }
    this_TimesExpr_0=ruleTimesExpr
    {
        $current = $this_TimesExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(

PlusSign


    |		
HyphenMinus


)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=
	PlusSign
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=
	HyphenMinus
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPlusExprAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlusExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusExprAccess().getRightTimesExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleTimesExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"TimesExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTimesExpr
entryRuleTimesExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTimesExprRule()); }
	 iv_ruleTimesExpr=ruleTimesExpr 
	 { $current=$iv_ruleTimesExpr.current; } 
	 EOF 
;

// Rule TimesExpr
ruleTimesExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTimesExprAccess().getPrefixExprParserRuleCall_0()); 
    }
    this_PrefixExpr_0=rulePrefixExpr
    {
        $current = $this_PrefixExpr_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(

Asterisk


    |		
Solidus


    |		
PercentSign


)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTimesExprAccess().getBinaryExprLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=
	Asterisk
    {
        newLeafNode(lv_op_2_1, grammarAccess.getTimesExprAccess().getOpAsteriskKeyword_1_0_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=
	Solidus
    {
        newLeafNode(lv_op_2_2, grammarAccess.getTimesExprAccess().getOpSolidusKeyword_1_0_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=
	PercentSign
    {
        newLeafNode(lv_op_2_3, grammarAccess.getTimesExprAccess().getOpPercentSignKeyword_1_0_0_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimesExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getTimesExprAccess().getRightPrefixExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimesExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrefixExpr
entryRulePrefixExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPrefixExprRule()); }
	 iv_rulePrefixExpr=rulePrefixExpr 
	 { $current=$iv_rulePrefixExpr.current; } 
	 EOF 
;

// Rule PrefixExpr
rulePrefixExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrefixExprAccess().getUnaryExprAction_0_0(),
            $current);
    }
)(
(
(
		lv_op_1_1=
	HyphenMinus
    {
        newLeafNode(lv_op_1_1, grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_1, null);
	    }

    |		lv_op_1_2=
	Not
    {
        newLeafNode(lv_op_1_2, grammarAccess.getPrefixExprAccess().getOpNotKeyword_0_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixExprRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=rulePrefixExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"PrefixExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrefixExprAccess().getPostCastExprParserRuleCall_1()); 
    }
    this_PostCastExpr_3=rulePostCastExpr
    {
        $current = $this_PostCastExpr_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePostCastExpr
entryRulePostCastExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPostCastExprRule()); }
	 iv_rulePostCastExpr=rulePostCastExpr 
	 { $current=$iv_rulePostCastExpr.current; } 
	 EOF 
;

// Rule PostCastExpr
rulePostCastExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPostCastExprAccess().getPostCastExprAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostCastExprAccess().getExprExpression_termParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression_term		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostCastExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression_term");
	        afterParserOrEnumRuleCall();
	    }

)
)((
LessThanSign
)=>(
	otherlv_2=LessThanSign
    {
    	newLeafNode(otherlv_2, grammarAccess.getPostCastExprAccess().getLessThanSignKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostCastExprAccess().getNewtypeType_expressionParserRuleCall_2_0_1_0()); 
	    }
		lv_newtype_3_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostCastExprRule());
	        }
       		set(
       			$current, 
       			"newtype",
        		lv_newtype_3_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=GreaterThanSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getPostCastExprAccess().getGreaterThanSignKeyword_2_0_2());
    }
))?((
FullStop
)=>(
(
		{ 
	        newCompositeNode(grammarAccess.getPostCastExprAccess().getChainMethodChainParserRuleCall_3_0_0()); 
	    }
		lv_chain_5_0=ruleMethodChain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostCastExprRule());
	        }
       		set(
       			$current, 
       			"chain",
        		lv_chain_5_0, 
        		"MethodChain");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMCSNameExpr
entryRuleMCSNameExpr returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSNameExprRule()); }
	 iv_ruleMCSNameExpr=ruleMCSNameExpr 
	 { $current=$iv_ruleMCSNameExpr.current; } 
	 EOF 
;

// Rule MCSNameExpr
ruleMCSNameExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMCSNameExprAccess().getMCSNameExprAction_0(),
            $current);
    }
)((
(
		lv_root_1_0=
	Root
    {
        newLeafNode(lv_root_1_0, grammarAccess.getMCSNameExprAccess().getRootRootKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSNameExprRule());
	        }
       		setWithLastConsumed($current, "root", true, "root");
	    }

)
)
    |(
(
		lv_iroot_2_0=
	Iroot
    {
        newLeafNode(lv_iroot_2_0, grammarAccess.getMCSNameExprAccess().getIrootIrootKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSNameExprRule());
	        }
       		setWithLastConsumed($current, "iroot", true, "iroot");
	    }

)
)
    |(
(
		lv_nil_3_0=
	Nil
    {
        newLeafNode(lv_nil_3_0, grammarAccess.getMCSNameExprAccess().getNilNilKeyword_1_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSNameExprRule());
	        }
       		setWithLastConsumed($current, "nil", true, "nil");
	    }

)
)
    |(
(
		lv_empty_4_0=
	Empty
    {
        newLeafNode(lv_empty_4_0, grammarAccess.getMCSNameExprAccess().getEmptyEmptyKeyword_1_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSNameExprRule());
	        }
       		setWithLastConsumed($current, "empty", true, "empty");
	    }

)
)
    |(
(
		lv_allmodes_5_0=
	Allmodes
    {
        newLeafNode(lv_allmodes_5_0, grammarAccess.getMCSNameExprAccess().getAllmodesAllmodesKeyword_1_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSNameExprRule());
	        }
       		setWithLastConsumed($current, "allmodes", true, "allmodes");
	    }

)
)
    |((
(
ruleMcs_name_ref
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getMCSNameExprAccess().getTypednamerefMcs_name_refParserRuleCall_1_5_0()); 
	    }
		lv_typednameref_6_0=ruleMcs_name_ref		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSNameExprRule());
	        }
       		set(
       			$current, 
       			"typednameref",
        		lv_typednameref_6_0, 
        		"Mcs_name_ref");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleExpression_term
entryRuleExpression_term returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpression_termRule()); }
	 iv_ruleExpression_term=ruleExpression_term 
	 { $current=$iv_ruleExpression_term.current; } 
	 EOF 
;

// Rule Expression_term
ruleExpression_term returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpression_termAccess().getMCSNameExprParserRuleCall_0()); 
    }
    this_MCSNameExpr_0=ruleMCSNameExpr
    {
        $current = $this_MCSNameExpr_0.current;
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getPkgExprAction_1_0(),
            $current);
    }
)
	otherlv_2=Package
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpression_termAccess().getPackageKeyword_1_1());
    }

	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpression_termAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_termRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getExpression_termAccess().getPackageAadlPackageCrossReference_1_3_0()); 
	}

)
)
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpression_termAccess().getRightParenthesisKeyword_1_4());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getCompExprAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getClassifierComponentClassifierTermParserRuleCall_2_1_0()); 
	    }
		lv_classifier_7_0=ruleComponentClassifierTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"classifier",
        		lv_classifier_7_0, 
        		"ComponentClassifierTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getRefExprAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getReferenceRefTermParserRuleCall_3_1_0()); 
	    }
		lv_reference_9_0=ruleRefTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_9_0, 
        		"RefTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getThisExprAction_4_0(),
            $current);
    }
)
	otherlv_11=This
    {
    	newLeafNode(otherlv_11, grammarAccess.getExpression_termAccess().getThisKeyword_4_1());
    }
(
	otherlv_12=FullStop
    {
    	newLeafNode(otherlv_12, grammarAccess.getExpression_termAccess().getFullStopKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getSubNestedDotIDParserRuleCall_4_2_1_0()); 
	    }
		lv_sub_13_0=ruleNestedDotID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_13_0, 
        		"NestedDotID");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getIntExprAction_5_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getValIntegerTermParserRuleCall_5_1_0()); 
	    }
		lv_val_15_0=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_15_0, 
        		"IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getRealExprAction_6_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getValRealTermParserRuleCall_6_1_0()); 
	    }
		lv_val_17_0=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_17_0, 
        		"RealTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getBoolExprAction_7_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getValBooleanLiteralParserRuleCall_7_1_0()); 
	    }
		lv_val_19_0=ruleBooleanLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_19_0, 
        		"BooleanLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getStringExprAction_8_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getValStringTermParserRuleCall_8_1_0()); 
	    }
		lv_val_21_0=ruleStringTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_21_0, 
        		"StringTerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getRangeAction_9_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getValRangeParserRuleCall_9_1_0()); 
	    }
		lv_val_23_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_23_0, 
        		"Range");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getIfThenElseExprAction_10_0(),
            $current);
    }
)
	otherlv_25=If
    {
    	newLeafNode(otherlv_25, grammarAccess.getExpression_termAccess().getIfKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getCondExprParserRuleCall_10_2_0()); 
	    }
		lv_cond_26_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_26_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_27=Then
    {
    	newLeafNode(otherlv_27, grammarAccess.getExpression_termAccess().getThenKeyword_10_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getThenExprParserRuleCall_10_4_0()); 
	    }
		lv_then_28_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_28_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_29=Else
    {
    	newLeafNode(otherlv_29, grammarAccess.getExpression_termAccess().getElseKeyword_10_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getElseExprParserRuleCall_10_6_0()); 
	    }
		lv_else_30_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_30_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getQuantifiedExprAction_11_0(),
            $current);
    }
)(
(
(
		lv_quant_32_1=
	Forall
    {
        newLeafNode(lv_quant_32_1, grammarAccess.getExpression_termAccess().getQuantForallKeyword_11_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_termRule());
	        }
       		setWithLastConsumed($current, "quant", lv_quant_32_1, null);
	    }

    |		lv_quant_32_2=
	Foreach
    {
        newLeafNode(lv_quant_32_2, grammarAccess.getExpression_termAccess().getQuantForeachKeyword_11_1_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_termRule());
	        }
       		setWithLastConsumed($current, "quant", lv_quant_32_2, null);
	    }

    |		lv_quant_32_3=
	Exists
    {
        newLeafNode(lv_quant_32_3, grammarAccess.getExpression_termAccess().getQuantExistsKeyword_11_1_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_termRule());
	        }
       		setWithLastConsumed($current, "quant", lv_quant_32_3, null);
	    }

)

)
)(
	otherlv_33=LeftParenthesis
    {
    	newLeafNode(otherlv_33, grammarAccess.getExpression_termAccess().getLeftParenthesisKeyword_11_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getArgsParameterParserRuleCall_11_2_1_0()); 
	    }
		lv_args_34_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_34_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_35=RightParenthesis
    {
    	newLeafNode(otherlv_35, grammarAccess.getExpression_termAccess().getRightParenthesisKeyword_11_2_2());
    }
)+
	otherlv_36=FullStop
    {
    	newLeafNode(otherlv_36, grammarAccess.getExpression_termAccess().getFullStopKeyword_11_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getExprExprParserRuleCall_11_4_0()); 
	    }
		lv_expr_37_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_37_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getBuiltInFnCallExprAction_12_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getBuiltinBuiltInFnCallParserRuleCall_12_1_0()); 
	    }
		lv_builtin_39_0=ruleBuiltInFnCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"builtin",
        		lv_builtin_39_0, 
        		"BuiltInFnCall");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getFnCallExprAction_13_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getFnFnCallParserRuleCall_13_1_0()); 
	    }
		lv_fn_41_0=ruleFnCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"fn",
        		lv_fn_41_0, 
        		"FnCall");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getTheoremCallExprAction_14_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getFnTheorem_callParserRuleCall_14_1_0()); 
	    }
		lv_fn_43_0=ruleTheorem_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"fn",
        		lv_fn_43_0, 
        		"Theorem_call");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getFilterSetAction_15_0(),
            $current);
    }
)(
(
		lv_list_45_0=
	List
    {
        newLeafNode(lv_list_45_0, grammarAccess.getExpression_termAccess().getListListKeyword_15_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_termRule());
	        }
       		setWithLastConsumed($current, "list", true, "list");
	    }

)
)?
	otherlv_46=LeftCurlyBracket
    {
    	newLeafNode(otherlv_46, grammarAccess.getExpression_termAccess().getLeftCurlyBracketKeyword_15_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getExpExprParserRuleCall_15_3_0()); 
	    }
		lv_exp_47_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_47_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_termAccess().getFilterMapExprMapAction_15_4_0_0(),
            $current);
    }
)
	otherlv_49=For
    {
    	newLeafNode(otherlv_49, grammarAccess.getExpression_termAccess().getForKeyword_15_4_0_1());
    }
(
	otherlv_50=LeftParenthesis
    {
    	newLeafNode(otherlv_50, grammarAccess.getExpression_termAccess().getLeftParenthesisKeyword_15_4_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getArgsParameterParserRuleCall_15_4_0_2_1_0()); 
	    }
		lv_args_51_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_51_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_52=RightParenthesis
    {
    	newLeafNode(otherlv_52, grammarAccess.getExpression_termAccess().getRightParenthesisKeyword_15_4_0_2_2());
    }
)+(
	otherlv_53=VerticalLine
    {
    	newLeafNode(otherlv_53, grammarAccess.getExpression_termAccess().getVerticalLineKeyword_15_4_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getFilterExprParserRuleCall_15_4_0_3_1_0()); 
	    }
		lv_filter_54_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"filter",
        		lv_filter_54_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getExpression_termAccess().getSetExprExprsAction_15_4_1_0(),
            $current);
    }
)(
	otherlv_56=Comma
    {
    	newLeafNode(otherlv_56, grammarAccess.getExpression_termAccess().getCommaKeyword_15_4_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getExprsExprParserRuleCall_15_4_1_1_1_0()); 
	    }
		lv_exprs_57_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_57_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
	otherlv_58=RightCurlyBracket
    {
    	newLeafNode(otherlv_58, grammarAccess.getExpression_termAccess().getRightCurlyBracketKeyword_15_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getMappingExprAction_16_0(),
            $current);
    }
)
	otherlv_60=LeftSquareBracket
    {
    	newLeafNode(otherlv_60, grammarAccess.getExpression_termAccess().getLeftSquareBracketKeyword_16_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getExpr1ExprParserRuleCall_16_2_0()); 
	    }
		lv_expr1_61_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"expr1",
        		lv_expr1_61_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_62=Comma
    {
    	newLeafNode(otherlv_62, grammarAccess.getExpression_termAccess().getCommaKeyword_16_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getExpr2ExprParserRuleCall_16_4_0()); 
	    }
		lv_expr2_63_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"expr2",
        		lv_expr2_63_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_64=RightSquareBracket
    {
    	newLeafNode(otherlv_64, grammarAccess.getExpression_termAccess().getRightSquareBracketKeyword_16_5());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getEmptySetExprAction_17_0(),
            $current);
    }
)
	otherlv_66=LeftCurlyBracket
    {
    	newLeafNode(otherlv_66, grammarAccess.getExpression_termAccess().getLeftCurlyBracketKeyword_17_1());
    }

	otherlv_67=RightCurlyBracket
    {
    	newLeafNode(otherlv_67, grammarAccess.getExpression_termAccess().getRightCurlyBracketKeyword_17_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_termAccess().getLetExprAction_18_0(),
            $current);
    }
)
	otherlv_69=Let
    {
    	newLeafNode(otherlv_69, grammarAccess.getExpression_termAccess().getLetKeyword_18_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getLocalMcsTypedNameParserRuleCall_18_2_0()); 
	    }
		lv_local_70_0=ruleMcsTypedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"local",
        		lv_local_70_0, 
        		"McsTypedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_71=EqualsSign
    {
    	newLeafNode(otherlv_71, grammarAccess.getExpression_termAccess().getEqualsSignKeyword_18_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getExpr1ExprParserRuleCall_18_4_0()); 
	    }
		lv_expr1_72_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"expr1",
        		lv_expr1_72_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_73=Semicolon
    {
    	newLeafNode(otherlv_73, grammarAccess.getExpression_termAccess().getSemicolonKeyword_18_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_termAccess().getExpr2ExprParserRuleCall_18_6_0()); 
	    }
		lv_expr2_74_0=ruleExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_termRule());
	        }
       		set(
       			$current, 
       			"expr2",
        		lv_expr2_74_0, 
        		"Expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	otherlv_75=LeftParenthesis
    {
    	newLeafNode(otherlv_75, grammarAccess.getExpression_termAccess().getLeftParenthesisKeyword_19_0());
    }

    { 
        newCompositeNode(grammarAccess.getExpression_termAccess().getExprParserRuleCall_19_1()); 
    }
    this_Expr_76=ruleExpr
    {
        $current = $this_Expr_76.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_77=RightParenthesis
    {
    	newLeafNode(otherlv_77, grammarAccess.getExpression_termAccess().getRightParenthesisKeyword_19_2());
    }
))
;





// Entry rule entryRuleBuiltInFn
entryRuleBuiltInFn returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getBuiltInFnRule()); } 
	 iv_ruleBuiltInFn=ruleBuiltInFn 
	 { $current=$iv_ruleBuiltInFn.current.getText(); }  
	 EOF 
;

// Rule BuiltInFn
ruleBuiltInFn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Has_range 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_rangeKeyword_0()); 
    }

    |
	kw=Range 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getRangeKeyword_1()); 
    }

    |
	kw=Floor 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFloorKeyword_2()); 
    }

    |
	kw=Ceiling 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getCeilingKeyword_3()); 
    }

    |
	kw=Has_units 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_unitsKeyword_4()); 
    }

    |
	kw=Unit_literal 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getUnit_literalKeyword_5()); 
    }

    |
	kw=Upper 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getUpperKeyword_6()); 
    }

    |
	kw=Lower 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getLowerKeyword_7()); 
    }

    |
	kw=Has_delta 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_deltaKeyword_8()); 
    }

    |
	kw=Delta 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getDeltaKeyword_9()); 
    }

    |
	kw=Concat 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getConcatKeyword_10()); 
    }

    |
	kw=Eq 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getEqKeyword_11()); 
    }

    |
	kw=Less 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getLessKeyword_12()); 
    }

    |
	kw=Case_eq 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getCase_eqKeyword_13()); 
    }

    |
	kw=Case_less 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getCase_lessKeyword_14()); 
    }

    |
	kw=In 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getInKeyword_15()); 
    }

    |
	kw=Union 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getUnionKeyword_16()); 
    }

    |
	kw=Intersect 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIntersectKeyword_17()); 
    }

    |
	kw=Has_member 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_memberKeyword_18()); 
    }

    |
	kw=Size 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSizeKeyword_19()); 
    }

    |
	kw=Sum 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSumKeyword_20()); 
    }

    |
	kw=Max 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getMaxKeyword_21()); 
    }

    |
	kw=Min 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getMinKeyword_22()); 
    }

    |
	kw=Get 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getGetKeyword_23()); 
    }

    |
	kw=Sublist 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSublistKeyword_24()); 
    }

    |
	kw=Join 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getJoinKeyword_25()); 
    }

    |
	kw=As_set 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getAs_setKeyword_26()); 
    }

    |
	kw=Key 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getKeyKeyword_27()); 
    }

    |
	kw=Val 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getValKeyword_28()); 
    }

    |
	kw=Qualified_name 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getQualified_nameKeyword_29()); 
    }

    |
	kw=Local_name 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getLocal_nameKeyword_30()); 
    }

    |
	kw=Path_name_of 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getPath_name_ofKeyword_31()); 
    }

    |
	kw=Package_name 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getPackage_nameKeyword_32()); 
    }

    |
	kw=Is_owned_by 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_owned_byKeyword_33()); 
    }

    |
	kw=Has_parent 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_parentKeyword_34()); 
    }

    |
	kw=Parent 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getParentKeyword_35()); 
    }

    |
	kw=Owner 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getOwnerKeyword_36()); 
    }

    |
	kw=Equal 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getEqualKeyword_37()); 
    }

    |
	kw=Element_type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getElement_typeKeyword_38()); 
    }

    |
	kw=Has_property 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_propertyKeyword_39()); 
    }

    |
	kw=NumberSignQuestionMark 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getNumberSignQuestionMarkKeyword_40()); 
    }

    |
	kw=Property 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getPropertyKeyword_41()); 
    }

    |
	kw=NumberSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getNumberSignKeyword_42()); 
    }

    |
	kw=Imports 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getImportsKeyword_43()); 
    }

    |
	kw=Classifiers 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getClassifiersKeyword_44()); 
    }

    |
	kw=Has_extends 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_extendsKeyword_45()); 
    }

    |
	kw=Extends 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getExtendsKeyword_46()); 
    }

    |
	kw=Category 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getCategoryKeyword_47()); 
    }

    |
	kw=Has_bindings 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_bindingsKeyword_48()); 
    }

    |
	kw=Bindings_map 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getBindings_mapKeyword_49()); 
    }

    |
	kw=Component_type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getComponent_typeKeyword_50()); 
    }

    |
	kw=Is_of_type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_of_typeKeyword_51()); 
    }

    |
	kw=Has_inverse 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_inverseKeyword_52()); 
    }

    |
	kw=Inverse 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getInverseKeyword_53()); 
    }

    |
	kw=Contaned 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getContanedKeyword_54()); 
    }

    |
	kw=In_modes 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIn_modesKeyword_55()); 
    }

    |
	kw=Is_prototype_ref 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_prototype_refKeyword_56()); 
    }

    |
	kw=Prototype 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getPrototypeKeyword_57()); 
    }

    |
	kw=Is_c_type_instance 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_c_type_instanceKeyword_58()); 
    }

    |
	kw=C_type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getC_typeKeyword_59()); 
    }

    |
	kw=Class 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getClassKeyword_60()); 
    }

    |
	kw=Array_cardinal 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getArray_cardinalKeyword_61()); 
    }

    |
	kw=Modes 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getModesKeyword_62()); 
    }

    |
	kw=Modes_map 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getModes_mapKeyword_63()); 
    }

    |
	kw=Mode_state_machine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getMode_state_machineKeyword_64()); 
    }

    |
	kw=Mode_transitions 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getMode_transitionsKeyword_65()); 
    }

    |
	kw=Subcomponents 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSubcomponentsKeyword_66()); 
    }

    |
	kw=Instances 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getInstancesKeyword_67()); 
    }

    |
	kw=Features 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFeaturesKeyword_68()); 
    }

    |
	kw=Flat_features 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFlat_featuresKeyword_69()); 
    }

    |
	kw=Connections 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getConnectionsKeyword_70()); 
    }

    |
	kw=Call_target 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getCall_targetKeyword_71()); 
    }

    |
	kw=Is_bidirectional 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_bidirectionalKeyword_72()); 
    }

    |
	kw=Source 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getSourceKeyword_73()); 
    }

    |
	kw=Destination 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getDestinationKeyword_74()); 
    }

    |
	kw=Is_refined 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_refinedKeyword_75()); 
    }

    |
	kw=Is_partial 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_partialKeyword_76()); 
    }

    |
	kw=Has_prototype_ref 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_prototype_refKeyword_77()); 
    }

    |
	kw=Has_classifier_type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_classifier_typeKeyword_78()); 
    }

    |
	kw=Classifier_type 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getClassifier_typeKeyword_79()); 
    }

    |
	kw=Direction 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getDirectionKeyword_80()); 
    }

    |
	kw=Is_inverse 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_inverseKeyword_81()); 
    }

    |
	kw=Feature 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getFeatureKeyword_82()); 
    }

    |
	kw=Path 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getPathKeyword_83()); 
    }

    |
	kw=Transitive_path 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getTransitive_pathKeyword_84()); 
    }

    |
	kw=Is_component_prototype 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_component_prototypeKeyword_85()); 
    }

    |
	kw=Type_literal 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getType_literalKeyword_86()); 
    }

    |
	kw=Has_list 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_listKeyword_87()); 
    }

    |
	kw=Is_feature_prototype 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_feature_prototypeKeyword_88()); 
    }

    |
	kw=Is_fg_prototype 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_fg_prototypeKeyword_89()); 
    }

    |
	kw=Has_classifier_reference 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getHas_classifier_referenceKeyword_90()); 
    }

    |
	kw=Classifier_reference 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getClassifier_referenceKeyword_91()); 
    }

    |
	kw=Is_initial_mode 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_initial_modeKeyword_92()); 
    }

    |
	kw=Is_required_mode 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_required_modeKeyword_93()); 
    }

    |
	kw=Mapped_set 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getMapped_setKeyword_94()); 
    }

    |
	kw=Is_named 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getIs_namedKeyword_95()); 
    }

    |
	kw=Transition_name 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getTransition_nameKeyword_96()); 
    }

    |
	kw=Transition_triggers 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getTransition_triggersKeyword_97()); 
    }

    |
	kw=Start_mode_state 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getStart_mode_stateKeyword_98()); 
    }

    |
	kw=End_mode_state 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInFnAccess().getEnd_mode_stateKeyword_99()); 
    }
)
    ;





// Entry rule entryRuleType_expression
entryRuleType_expression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getType_expressionRule()); }
	 iv_ruleType_expression=ruleType_expression 
	 { $current=$iv_ruleType_expression.current; } 
	 EOF 
;

// Rule Type_expression
ruleType_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getType_expressionAccess().getBasicBasic_typeParserRuleCall_0_0()); 
	    }
		lv_basic_0_0=ruleBasic_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_expressionRule());
	        }
       		set(
       			$current, 
       			"basic",
        		lv_basic_0_0, 
        		"Basic_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getType_expressionAccess().getCompositeComposite_typeParserRuleCall_1_0()); 
	    }
		lv_composite_1_0=ruleComposite_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_expressionRule());
	        }
       		set(
       			$current, 
       			"composite",
        		lv_composite_1_0, 
        		"Composite_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getType_expressionAccess().getElementElement_typeParserRuleCall_2_0()); 
	    }
		lv_element_2_0=ruleElement_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_expressionRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_2_0, 
        		"Element_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBasic_type
entryRuleBasic_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBasic_typeRule()); }
	 iv_ruleBasic_type=ruleBasic_type 
	 { $current=$iv_ruleBasic_type.current; } 
	 EOF 
;

// Rule Basic_type
ruleBasic_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBasic_typeAccess().getBasic_typeAction_0(),
            $current);
    }
)((
(
		lv_ptype_1_0=
	Property_type
    {
        newLeafNode(lv_ptype_1_0, grammarAccess.getBasic_typeAccess().getPtypeProperty_typeKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasic_typeRule());
	        }
       		setWithLastConsumed($current, "ptype", lv_ptype_1_0, "property_type");
	    }

)
)
    |(
(
		lv_pref_2_0=
	Property_ref
    {
        newLeafNode(lv_pref_2_0, grammarAccess.getBasic_typeAccess().getPrefProperty_refKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasic_typeRule());
	        }
       		setWithLastConsumed($current, "pref", lv_pref_2_0, "property_ref");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getBoolUnnamedBooleanTypeParserRuleCall_1_2_0()); 
	    }
		lv_bool_3_0=ruleUnnamedBooleanType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"bool",
        		lv_bool_3_0, 
        		"UnnamedBooleanType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getStringUnnamedStringTypeParserRuleCall_1_3_0()); 
	    }
		lv_string_4_0=ruleUnnamedStringType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_4_0, 
        		"UnnamedStringType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getEnumerUnnamedEnumerationTypeParserRuleCall_1_4_0()); 
	    }
		lv_enumer_5_0=ruleUnnamedEnumerationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"enumer",
        		lv_enumer_5_0, 
        		"UnnamedEnumerationType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getUnitsUnnamedUnitsTypeParserRuleCall_1_5_0()); 
	    }
		lv_units_6_0=ruleUnnamedUnitsType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"units",
        		lv_units_6_0, 
        		"UnnamedUnitsType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getIntegerUnnamedIntegerTypeParserRuleCall_1_6_0()); 
	    }
		lv_integer_7_0=ruleUnnamedIntegerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"integer",
        		lv_integer_7_0, 
        		"UnnamedIntegerType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getRealUnnamedRealTypeParserRuleCall_1_7_0()); 
	    }
		lv_real_8_0=ruleUnnamedRealType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"real",
        		lv_real_8_0, 
        		"UnnamedRealType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getRangeUnnamedRangeTypeParserRuleCall_1_8_0()); 
	    }
		lv_range_9_0=ruleUnnamedRangeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_9_0, 
        		"UnnamedRangeType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasic_typeRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getBasic_typeAccess().getTypenameType_declarationCrossReference_1_9_0()); 
	}

)
)))
;





// Entry rule entryRuleComposite_type
entryRuleComposite_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComposite_typeRule()); }
	 iv_ruleComposite_type=ruleComposite_type 
	 { $current=$iv_ruleComposite_type.current; } 
	 EOF 
;

// Rule Composite_type
ruleComposite_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getMapping_typeParserRuleCall_0()); 
    }
    this_Mapping_type_0=ruleMapping_type
    {
        $current = $this_Mapping_type_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getSet_typeParserRuleCall_1()); 
    }
    this_Set_type_1=ruleSet_type
    {
        $current = $this_Set_type_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getList_typeParserRuleCall_2()); 
    }
    this_List_type_2=ruleList_type
    {
        $current = $this_List_type_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getUnion_typeParserRuleCall_3()); 
    }
    this_Union_type_3=ruleUnion_type
    {
        $current = $this_Union_type_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMapping_type
entryRuleMapping_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMapping_typeRule()); }
	 iv_ruleMapping_type=ruleMapping_type 
	 { $current=$iv_ruleMapping_type.current; } 
	 EOF 
;

// Rule Mapping_type
ruleMapping_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftSquareBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getMapping_typeAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapping_typeAccess().getKeyType_expressionParserRuleCall_1_0()); 
	    }
		lv_key_1_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapping_typeRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_1_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=To
    {
    	newLeafNode(otherlv_2, grammarAccess.getMapping_typeAccess().getToKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMapping_typeAccess().getValType_expressionParserRuleCall_3_0()); 
	    }
		lv_val_3_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapping_typeRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_3_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=RightSquareBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getMapping_typeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSet_type
entryRuleSet_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSet_typeRule()); }
	 iv_ruleSet_type=ruleSet_type 
	 { $current=$iv_ruleSet_type.current; } 
	 EOF 
;

// Rule Set_type
ruleSet_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=LeftCurlyBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getSet_typeAccess().getLeftCurlyBracketKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSet_typeAccess().getRoot_typeType_expressionParserRuleCall_0_1_0()); 
	    }
		lv_root_type_1_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSet_typeRule());
	        }
       		set(
       			$current, 
       			"root_type",
        		lv_root_type_1_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=RightCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getSet_typeAccess().getRightCurlyBracketKeyword_0_2());
    }
)
    |(
	otherlv_3=Set
    {
    	newLeafNode(otherlv_3, grammarAccess.getSet_typeAccess().getSetKeyword_1_0());
    }

	otherlv_4=LessThanSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getSet_typeAccess().getLessThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSet_typeAccess().getRoot_typeType_expressionParserRuleCall_1_2_0()); 
	    }
		lv_root_type_5_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSet_typeRule());
	        }
       		set(
       			$current, 
       			"root_type",
        		lv_root_type_5_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=GreaterThanSign
    {
    	newLeafNode(otherlv_6, grammarAccess.getSet_typeAccess().getGreaterThanSignKeyword_1_3());
    }
))
;





// Entry rule entryRuleList_type
entryRuleList_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getList_typeRule()); }
	 iv_ruleList_type=ruleList_type 
	 { $current=$iv_ruleList_type.current; } 
	 EOF 
;

// Rule List_type
ruleList_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=LeftParenthesis
    {
    	newLeafNode(otherlv_0, grammarAccess.getList_typeAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList_typeAccess().getRoot_typeType_expressionParserRuleCall_0_1_0()); 
	    }
		lv_root_type_1_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList_typeRule());
	        }
       		set(
       			$current, 
       			"root_type",
        		lv_root_type_1_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=RightParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getList_typeAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(
	otherlv_3=List
    {
    	newLeafNode(otherlv_3, grammarAccess.getList_typeAccess().getListKeyword_1_0());
    }

	otherlv_4=LessThanSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getList_typeAccess().getLessThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList_typeAccess().getRoot_typeType_expressionParserRuleCall_1_2_0()); 
	    }
		lv_root_type_5_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList_typeRule());
	        }
       		set(
       			$current, 
       			"root_type",
        		lv_root_type_5_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=GreaterThanSign
    {
    	newLeafNode(otherlv_6, grammarAccess.getList_typeAccess().getGreaterThanSignKeyword_1_3());
    }
))
;





// Entry rule entryRuleUnion_type
entryRuleUnion_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnion_typeRule()); }
	 iv_ruleUnion_type=ruleUnion_type 
	 { $current=$iv_ruleUnion_type.current; } 
	 EOF 
;

// Rule Union_type
ruleUnion_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Union
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnion_typeAccess().getUnionKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnion_typeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnion_typeAccess().getTypesType_expressionParserRuleCall_2_0()); 
	    }
		lv_types_2_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnion_typeRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnion_typeAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnion_typeAccess().getTypeType_expressionParserRuleCall_3_1_0()); 
	    }
		lv_type_4_0=ruleType_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnion_typeRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"Type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnion_typeAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralRule()); }
	 iv_ruleEnumerationLiteral=ruleEnumerationLiteral 
	 { $current=$iv_ruleEnumerationLiteral.current; } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumerationLiteralAccess().getNameSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleElement_type
entryRuleElement_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElement_typeRule()); }
	 iv_ruleElement_type=ruleElement_type 
	 { $current=$iv_ruleElement_type.current; } 
	 EOF 
;

// Rule Element_type
ruleElement_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_telem_0_0=
	T_Element
    {
        newLeafNode(lv_telem_0_0, grammarAccess.getElement_typeAccess().getTelemT_ElementKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_typeRule());
	        }
       		setWithLastConsumed($current, "telem", true, "T_Element");
	    }

)
)
    |(
(
		lv_tpack_1_0=
	T_Package
    {
        newLeafNode(lv_tpack_1_0, grammarAccess.getElement_typeAccess().getTpackT_PackageKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_typeRule());
	        }
       		setWithLastConsumed($current, "tpack", true, "T_Package");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getElement_typeAccess().getT_classClassifiersParserRuleCall_2_0()); 
	    }
		lv_t_class_2_0=ruleClassifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElement_typeRule());
	        }
       		set(
       			$current, 
       			"t_class",
        		true, 
        		"Classifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getElement_typeAccess().getT_instInstancesParserRuleCall_3_0()); 
	    }
		lv_t_inst_3_0=ruleInstances		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElement_typeRule());
	        }
       		set(
       			$current, 
       			"t_inst",
        		true, 
        		"Instances");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleClassifiers
entryRuleClassifiers returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getClassifiersRule()); }
	 iv_ruleClassifiers=ruleClassifiers 
	 { $current=$iv_ruleClassifiers.current; } 
	 EOF 
;

// Rule Classifiers
ruleClassifiers returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_class_0_0=
	T_Classifier
    {
        newLeafNode(lv_t_class_0_0, grammarAccess.getClassifiersAccess().getT_classT_ClassifierKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifiersRule());
	        }
       		setWithLastConsumed($current, "t_class", true, "T_Classifier");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifiersAccess().getT_class_subtypeT_classifier_subtypesParserRuleCall_1_0()); 
	    }
		lv_t_class_subtype_1_0=ruleT_classifier_subtypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifiersRule());
	        }
       		set(
       			$current, 
       			"t_class_subtype",
        		true, 
        		"T_classifier_subtypes");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleT_classifier_subtypes
entryRuleT_classifier_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_classifier_subtypesRule()); }
	 iv_ruleT_classifier_subtypes=ruleT_classifier_subtypes 
	 { $current=$iv_ruleT_classifier_subtypes.current; } 
	 EOF 
;

// Rule T_classifier_subtypes
ruleT_classifier_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_ctype_0_0=
	C_type
    {
        newLeafNode(lv_t_ctype_0_0, grammarAccess.getT_classifier_subtypesAccess().getT_ctypeC_TypeKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifier_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_ctype", true, "C_Type");
	    }

)
)
    |(
(
		lv_t_cimpl_1_0=
	C_Impl
    {
        newLeafNode(lv_t_cimpl_1_0, grammarAccess.getT_classifier_subtypesAccess().getT_cimplC_ImplKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifier_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_cimpl", true, "C_Impl");
	    }

)
)
    |(
(
		lv_t_fgclass_2_0=
	C_Feature_Group
    {
        newLeafNode(lv_t_fgclass_2_0, grammarAccess.getT_classifier_subtypesAccess().getT_fgclassC_Feature_GroupKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifier_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_fgclass", true, "C_Feature_Group");
	    }

)
)
    |(
(
		lv_t_annexclass_3_0=
	C_Annex
    {
        newLeafNode(lv_t_annexclass_3_0, grammarAccess.getT_classifier_subtypesAccess().getT_annexclassC_AnnexKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifier_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_annexclass", true, "C_Annex");
	    }

)
))
;





// Entry rule entryRuleInstances
entryRuleInstances returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInstancesRule()); }
	 iv_ruleInstances=ruleInstances 
	 { $current=$iv_ruleInstances.current; } 
	 EOF 
;

// Rule Instances
ruleInstances returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_inst_0_0=
	T_Instance
    {
        newLeafNode(lv_inst_0_0, grammarAccess.getInstancesAccess().getInstT_InstanceKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstancesRule());
	        }
       		setWithLastConsumed($current, "inst", true, "T_Instance");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInstancesAccess().getT_inst_stT_instance_subtypesParserRuleCall_1_0()); 
	    }
		lv_t_inst_st_1_0=rulet_instance_subtypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstancesRule());
	        }
       		set(
       			$current, 
       			"t_inst_st",
        		true, 
        		"t_instance_subtypes");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulet_instance_subtypes
entryRulet_instance_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_instance_subtypesRule()); }
	 iv_rulet_instance_subtypes=rulet_instance_subtypes 
	 { $current=$iv_rulet_instance_subtypes.current; } 
	 EOF 
;

// Rule t_instance_subtypes
rulet_instance_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getT_instance_subtypesAccess().getT_subc_stT_subcomponent_subtypesParserRuleCall_0_0()); 
	    }
		lv_t_subc_st_0_0=rulet_subcomponent_subtypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getT_instance_subtypesRule());
	        }
       		set(
       			$current, 
       			"t_subc_st",
        		true, 
        		"t_subcomponent_subtypes");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getT_instance_subtypesAccess().getT_connection_subtypesParserRuleCall_1()); 
    }
    this_t_connection_subtypes_1=rulet_connection_subtypes
    {
        $current = $this_t_connection_subtypes_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getT_instance_subtypesAccess().getT_feature_subtypesParserRuleCall_2()); 
    }
    this_t_feature_subtypes_2=rulet_feature_subtypes
    {
        $current = $this_t_feature_subtypes_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getT_instance_subtypesAccess().getT_flow_spec_subtypesParserRuleCall_3()); 
    }
    this_t_flow_spec_subtypes_3=rulet_flow_spec_subtypes
    {
        $current = $this_t_flow_spec_subtypes_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getT_instance_subtypesAccess().getT_flow_impl_subtypesParserRuleCall_4()); 
    }
    this_t_flow_impl_subtypes_4=rulet_flow_impl_subtypes
    {
        $current = $this_t_flow_impl_subtypes_4.current;
        afterParserOrEnumRuleCall();
    }

    |(
(
		lv_t_sbcall_5_0=
	I_Subprogram_Call
    {
        newLeafNode(lv_t_sbcall_5_0, grammarAccess.getT_instance_subtypesAccess().getT_sbcallI_Subprogram_CallKeyword_5_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_instance_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_sbcall", true, "I_Subprogram_Call");
	    }

)
)
    |(
(
		lv_t_callseq_6_0=
	I_Call_Sequence
    {
        newLeafNode(lv_t_callseq_6_0, grammarAccess.getT_instance_subtypesAccess().getT_callseqI_Call_SequenceKeyword_6_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_instance_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_callseq", true, "I_Call_Sequence");
	    }

)
)
    |(
(
		lv_t_eeflow_7_0=
	I_End_To_End_Flow
    {
        newLeafNode(lv_t_eeflow_7_0, grammarAccess.getT_instance_subtypesAccess().getT_eeflowI_End_To_End_FlowKeyword_7_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_instance_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_eeflow", true, "I_End_To_End_Flow");
	    }

)
)
    |(
(
		lv_t_proto_8_0=
	I_Prototype
    {
        newLeafNode(lv_t_proto_8_0, grammarAccess.getT_instance_subtypesAccess().getT_protoI_PrototypeKeyword_8_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_instance_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_proto", true, "I_Prototype");
	    }

)
)
    |(
(
		lv_t_mode_9_0=
	I_Mode
    {
        newLeafNode(lv_t_mode_9_0, grammarAccess.getT_instance_subtypesAccess().getT_modeI_ModeKeyword_9_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_instance_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_mode", true, "I_Mode");
	    }

)
)
    |(
(
		lv_t_mod_trans_10_0=
	I_Mode_Transition
    {
        newLeafNode(lv_t_mod_trans_10_0, grammarAccess.getT_instance_subtypesAccess().getT_mod_transI_Mode_TransitionKeyword_10_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_instance_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_mod_trans", true, "I_Mode_Transition");
	    }

)
)
    |(
(
		lv_t_mode_trig_11_0=
	I_Mode_Trigger_Id
    {
        newLeafNode(lv_t_mode_trig_11_0, grammarAccess.getT_instance_subtypesAccess().getT_mode_trigI_Mode_Trigger_IdKeyword_11_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_instance_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_mode_trig", true, "I_Mode_Trigger_Id");
	    }

)
))
;





// Entry rule entryRulet_subcomponent_subtypes
entryRulet_subcomponent_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_subcomponent_subtypesRule()); }
	 iv_rulet_subcomponent_subtypes=rulet_subcomponent_subtypes 
	 { $current=$iv_rulet_subcomponent_subtypes.current; } 
	 EOF 
;

// Rule t_subcomponent_subtypes
rulet_subcomponent_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_sub_0_0=
	I_Component
    {
        newLeafNode(lv_t_sub_0_0, grammarAccess.getT_subcomponent_subtypesAccess().getT_subI_ComponentKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_subcomponent_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_sub", true, "I_Component");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getT_subcomponent_subtypesAccess().getT_cimpl_stT_component_subtypesParserRuleCall_1_0()); 
	    }
		lv_t_cimpl_st_1_0=rulet_component_subtypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getT_subcomponent_subtypesRule());
	        }
       		set(
       			$current, 
       			"t_cimpl_st",
        		true, 
        		"t_component_subtypes");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulet_component_subtypes
entryRulet_component_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_component_subtypesRule()); }
	 iv_rulet_component_subtypes=rulet_component_subtypes 
	 { $current=$iv_rulet_component_subtypes.current; } 
	 EOF 
;

// Rule t_component_subtypes
rulet_component_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_annex_sub_0_0=
	I_Component_Annex
    {
        newLeafNode(lv_t_annex_sub_0_0, grammarAccess.getT_component_subtypesAccess().getT_annex_subI_Component_AnnexKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_annex_sub", true, "I_Component_Annex");
	    }

)
)
    |(
(
		lv_t_abstract_1_0=
	I_Abstract
    {
        newLeafNode(lv_t_abstract_1_0, grammarAccess.getT_component_subtypesAccess().getT_abstractI_AbstractKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_abstract", true, "I_Abstract");
	    }

)
)
    |(
(
		lv_t_sys_2_0=
	I_System
    {
        newLeafNode(lv_t_sys_2_0, grammarAccess.getT_component_subtypesAccess().getT_sysI_SystemKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_sys", true, "I_System");
	    }

)
)
    |(
(
		lv_t_dev_3_0=
	I_Device
    {
        newLeafNode(lv_t_dev_3_0, grammarAccess.getT_component_subtypesAccess().getT_devI_DeviceKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_dev", true, "I_Device");
	    }

)
)
    |(
(
		lv_t_proc_4_0=
	I_Processor
    {
        newLeafNode(lv_t_proc_4_0, grammarAccess.getT_component_subtypesAccess().getT_procI_ProcessorKeyword_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_proc", true, "I_Processor");
	    }

)
)
    |(
(
		lv_t_virt_proc_5_0=
	I_Virtual_Processor
    {
        newLeafNode(lv_t_virt_proc_5_0, grammarAccess.getT_component_subtypesAccess().getT_virt_procI_Virtual_ProcessorKeyword_5_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_virt_proc", true, "I_Virtual_Processor");
	    }

)
)
    |(
(
		lv_t_bus_6_0=
	I_Bus
    {
        newLeafNode(lv_t_bus_6_0, grammarAccess.getT_component_subtypesAccess().getT_busI_BusKeyword_6_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_bus", true, "I_Bus");
	    }

)
)
    |(
(
		lv_t_vbus_7_0=
	I_Virtual_Bus
    {
        newLeafNode(lv_t_vbus_7_0, grammarAccess.getT_component_subtypesAccess().getT_vbusI_Virtual_BusKeyword_7_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_vbus", true, "I_Virtual_Bus");
	    }

)
)
    |(
(
		lv_t_mem_8_0=
	I_Memory
    {
        newLeafNode(lv_t_mem_8_0, grammarAccess.getT_component_subtypesAccess().getT_memI_MemoryKeyword_8_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_mem", true, "I_Memory");
	    }

)
)
    |(
(
		lv_t_proc_9_0=
	I_Process
    {
        newLeafNode(lv_t_proc_9_0, grammarAccess.getT_component_subtypesAccess().getT_procI_ProcessKeyword_9_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_proc", true, "I_Process");
	    }

)
)
    |(
(
		lv_t_tg_10_0=
	I_Thread_Group
    {
        newLeafNode(lv_t_tg_10_0, grammarAccess.getT_component_subtypesAccess().getT_tgI_Thread_GroupKeyword_10_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_tg", true, "I_Thread_Group");
	    }

)
)
    |(
(
		lv_t_t_11_0=
	I_Thread
    {
        newLeafNode(lv_t_t_11_0, grammarAccess.getT_component_subtypesAccess().getT_tI_ThreadKeyword_11_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_t", true, "I_Thread");
	    }

)
)
    |(
(
		lv_t_d_12_0=
	I_Data
    {
        newLeafNode(lv_t_d_12_0, grammarAccess.getT_component_subtypesAccess().getT_dI_DataKeyword_12_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_d", true, "I_Data");
	    }

)
)
    |(
(
		lv_t_subprog_13_0=
	I_Subprogram
    {
        newLeafNode(lv_t_subprog_13_0, grammarAccess.getT_component_subtypesAccess().getT_subprogI_SubprogramKeyword_13_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_subprog", true, "I_Subprogram");
	    }

)
)
    |(
(
		lv_t_subprog_g_14_0=
	I_Subprogram_Group
    {
        newLeafNode(lv_t_subprog_g_14_0, grammarAccess.getT_component_subtypesAccess().getT_subprog_gI_Subprogram_GroupKeyword_14_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_component_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_subprog_g", true, "I_Subprogram_Group");
	    }

)
))
;





// Entry rule entryRulet_connection_subtypes
entryRulet_connection_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_connection_subtypesRule()); }
	 iv_rulet_connection_subtypes=rulet_connection_subtypes 
	 { $current=$iv_rulet_connection_subtypes.current; } 
	 EOF 
;

// Rule t_connection_subtypes
rulet_connection_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_conn_0_0=
	I_Connection
    {
        newLeafNode(lv_t_conn_0_0, grammarAccess.getT_connection_subtypesAccess().getT_connI_ConnectionKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_connection_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_conn", true, "I_Connection");
	    }

)
)
    |(
(
		lv_t_feat_conn_1_0=
	I_Feature_Connection
    {
        newLeafNode(lv_t_feat_conn_1_0, grammarAccess.getT_connection_subtypesAccess().getT_feat_connI_Feature_ConnectionKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_connection_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_feat_conn", true, "I_Feature_Connection");
	    }

)
)
    |(
(
		lv_t_port_conn_2_0=
	I_Port_Connection
    {
        newLeafNode(lv_t_port_conn_2_0, grammarAccess.getT_connection_subtypesAccess().getT_port_connI_Port_ConnectionKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_connection_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_port_conn", true, "I_Port_Connection");
	    }

)
)
    |(
(
		lv_t_parm_conn_3_0=
	I_Parameter_Connection
    {
        newLeafNode(lv_t_parm_conn_3_0, grammarAccess.getT_connection_subtypesAccess().getT_parm_connI_Parameter_ConnectionKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_connection_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_parm_conn", true, "I_Parameter_Connection");
	    }

)
)
    |(
(
		lv_t_acc_con_4_0=
	I_Access_Connection
    {
        newLeafNode(lv_t_acc_con_4_0, grammarAccess.getT_connection_subtypesAccess().getT_acc_conI_Access_ConnectionKeyword_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_connection_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_acc_con", true, "I_Access_Connection");
	    }

)
)
    |(
(
		lv_t_fg_conn_5_0=
	I_Feature_Group_Connection
    {
        newLeafNode(lv_t_fg_conn_5_0, grammarAccess.getT_connection_subtypesAccess().getT_fg_connI_Feature_Group_ConnectionKeyword_5_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_connection_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_fg_conn", true, "I_Feature_Group_Connection");
	    }

)
))
;





// Entry rule entryRulet_feature_subtypes
entryRulet_feature_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_feature_subtypesRule()); }
	 iv_rulet_feature_subtypes=rulet_feature_subtypes 
	 { $current=$iv_rulet_feature_subtypes.current; } 
	 EOF 
;

// Rule t_feature_subtypes
rulet_feature_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_feat_0_0=
	I_Feature
    {
        newLeafNode(lv_t_feat_0_0, grammarAccess.getT_feature_subtypesAccess().getT_featI_FeatureKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_feature_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_feat", true, "I_Feature");
	    }

)
)
    |(
(
		lv_t_abs_feat_1_0=
	I_Abstract_Feature
    {
        newLeafNode(lv_t_abs_feat_1_0, grammarAccess.getT_feature_subtypesAccess().getT_abs_featI_Abstract_FeatureKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_feature_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_abs_feat", true, "I_Abstract_Feature");
	    }

)
)
    |(
(
		lv_t_parm_2_0=
	I_Parameter
    {
        newLeafNode(lv_t_parm_2_0, grammarAccess.getT_feature_subtypesAccess().getT_parmI_ParameterKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_feature_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_parm", true, "I_Parameter");
	    }

)
)
    |(
(
		lv_t_fg_3_0=
	I_Feature_Group
    {
        newLeafNode(lv_t_fg_3_0, grammarAccess.getT_feature_subtypesAccess().getT_fgI_Feature_GroupKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_feature_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_fg", true, "I_Feature_Group");
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getT_feature_subtypesAccess().getT_port_subtypesParserRuleCall_4()); 
    }
    this_t_port_subtypes_4=rulet_port_subtypes
    {
        $current = $this_t_port_subtypes_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getT_feature_subtypesAccess().getT_access_subtypesParserRuleCall_5()); 
    }
    this_t_access_subtypes_5=rulet_access_subtypes
    {
        $current = $this_t_access_subtypes_5.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulet_access_subtypes
entryRulet_access_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_access_subtypesRule()); }
	 iv_rulet_access_subtypes=rulet_access_subtypes 
	 { $current=$iv_rulet_access_subtypes.current; } 
	 EOF 
;

// Rule t_access_subtypes
rulet_access_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_access_0_0=
	I_Access
    {
        newLeafNode(lv_t_access_0_0, grammarAccess.getT_access_subtypesAccess().getT_accessI_AccessKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_access_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_access", true, "I_Access");
	    }

)
)
    |(
(
		lv_t_data_acc_1_0=
	I_Data_Access
    {
        newLeafNode(lv_t_data_acc_1_0, grammarAccess.getT_access_subtypesAccess().getT_data_accI_Data_AccessKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_access_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_data_acc", true, "I_Data_Access");
	    }

)
)
    |(
(
		lv_t_sub_acc_2_0=
	I_Subprogram_Access
    {
        newLeafNode(lv_t_sub_acc_2_0, grammarAccess.getT_access_subtypesAccess().getT_sub_accI_Subprogram_AccessKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_access_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_sub_acc", true, "I_Subprogram_Access");
	    }

)
)
    |(
(
		lv_t_sub_gr_acc_3_0=
	I_Subprogram_Group_Access
    {
        newLeafNode(lv_t_sub_gr_acc_3_0, grammarAccess.getT_access_subtypesAccess().getT_sub_gr_accI_Subprogram_Group_AccessKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_access_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_sub_gr_acc", true, "I_Subprogram_Group_Access");
	    }

)
)
    |(
(
		lv_t_bus_acc_4_0=
	I_Bus_Access
    {
        newLeafNode(lv_t_bus_acc_4_0, grammarAccess.getT_access_subtypesAccess().getT_bus_accI_Bus_AccessKeyword_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_access_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_bus_acc", true, "I_Bus_Access");
	    }

)
))
;





// Entry rule entryRulet_port_subtypes
entryRulet_port_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_port_subtypesRule()); }
	 iv_rulet_port_subtypes=rulet_port_subtypes 
	 { $current=$iv_rulet_port_subtypes.current; } 
	 EOF 
;

// Rule t_port_subtypes
rulet_port_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_port_0_0=
	I_Port
    {
        newLeafNode(lv_t_port_0_0, grammarAccess.getT_port_subtypesAccess().getT_portI_PortKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_port_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_port", true, "I_Port");
	    }

)
)
    |(
(
		lv_t_d_port_1_0=
	I_Data_Port
    {
        newLeafNode(lv_t_d_port_1_0, grammarAccess.getT_port_subtypesAccess().getT_d_portI_Data_PortKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_port_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_d_port", true, "I_Data_Port");
	    }

)
)
    |(
(
		lv_t_ev_port_2_0=
	I_Event_Port
    {
        newLeafNode(lv_t_ev_port_2_0, grammarAccess.getT_port_subtypesAccess().getT_ev_portI_Event_PortKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_port_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_ev_port", true, "I_Event_Port");
	    }

)
)
    |(
(
		lv_t_evd_port_3_0=
	I_Event_Data_Port
    {
        newLeafNode(lv_t_evd_port_3_0, grammarAccess.getT_port_subtypesAccess().getT_evd_portI_Event_Data_PortKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_port_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_evd_port", true, "I_Event_Data_Port");
	    }

)
))
;





// Entry rule entryRulet_flow_spec_subtypes
entryRulet_flow_spec_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_flow_spec_subtypesRule()); }
	 iv_rulet_flow_spec_subtypes=rulet_flow_spec_subtypes 
	 { $current=$iv_rulet_flow_spec_subtypes.current; } 
	 EOF 
;

// Rule t_flow_spec_subtypes
rulet_flow_spec_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_f_spec_0_0=
	I_Flow_Spec
    {
        newLeafNode(lv_t_f_spec_0_0, grammarAccess.getT_flow_spec_subtypesAccess().getT_f_specI_Flow_SpecKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_flow_spec_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_f_spec", true, "I_Flow_Spec");
	    }

)
)
    |(
(
		lv_t_f_spec_source_1_0=
	I_Flow_Spec_Source
    {
        newLeafNode(lv_t_f_spec_source_1_0, grammarAccess.getT_flow_spec_subtypesAccess().getT_f_spec_sourceI_Flow_Spec_SourceKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_flow_spec_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_f_spec_source", true, "I_Flow_Spec_Source");
	    }

)
)
    |(
(
		lv_t_f_spec_sink_2_0=
	I_Flow_Spec_Sink
    {
        newLeafNode(lv_t_f_spec_sink_2_0, grammarAccess.getT_flow_spec_subtypesAccess().getT_f_spec_sinkI_Flow_Spec_SinkKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_flow_spec_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_f_spec_sink", true, "I_Flow_Spec_Sink");
	    }

)
)
    |(
(
		lv_t_f_spec_path_3_0=
	I_Flow_Spec_Path
    {
        newLeafNode(lv_t_f_spec_path_3_0, grammarAccess.getT_flow_spec_subtypesAccess().getT_f_spec_pathI_Flow_Spec_PathKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_flow_spec_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_f_spec_path", true, "I_Flow_Spec_Path");
	    }

)
))
;





// Entry rule entryRulet_flow_impl_subtypes
entryRulet_flow_impl_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_flow_impl_subtypesRule()); }
	 iv_rulet_flow_impl_subtypes=rulet_flow_impl_subtypes 
	 { $current=$iv_rulet_flow_impl_subtypes.current; } 
	 EOF 
;

// Rule t_flow_impl_subtypes
rulet_flow_impl_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_f_i_0_0=
	I_Flow_Impl
    {
        newLeafNode(lv_t_f_i_0_0, grammarAccess.getT_flow_impl_subtypesAccess().getT_f_iI_Flow_ImplKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_flow_impl_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_f_i", true, "I_Flow_Impl");
	    }

)
)
    |(
(
		lv_t_f_i_source_1_0=
	I_Flow_Impl_Source
    {
        newLeafNode(lv_t_f_i_source_1_0, grammarAccess.getT_flow_impl_subtypesAccess().getT_f_i_sourceI_Flow_Impl_SourceKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_flow_impl_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_f_i_source", true, "I_Flow_Impl_Source");
	    }

)
)
    |(
(
		lv_t_f_i_sink_2_0=
	I_Flow_Impl_Sink
    {
        newLeafNode(lv_t_f_i_sink_2_0, grammarAccess.getT_flow_impl_subtypesAccess().getT_f_i_sinkI_Flow_Impl_SinkKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_flow_impl_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_f_i_sink", true, "I_Flow_Impl_Sink");
	    }

)
)
    |(
(
		lv_t_f_i_path_3_0=
	I_Flow_Impl_Path
    {
        newLeafNode(lv_t_f_i_path_3_0, grammarAccess.getT_flow_impl_subtypesAccess().getT_f_i_pathI_Flow_Impl_PathKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_flow_impl_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_f_i_path", true, "I_Flow_Impl_Path");
	    }

)
))
;





// Entry rule entryRuleIntegerRange
entryRuleIntegerRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerRangeRule()); }
	 iv_ruleIntegerRange=ruleIntegerRange 
	 { $current=$iv_ruleIntegerRange.current; } 
	 EOF 
;

// Rule IntegerRange
ruleIntegerRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getLowerBoundIntegerTermParserRuleCall_0_0_0()); 
	    }
		lv_lowerBound_0_1=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_1, 
        		"IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getLowerBoundSignedConstantParserRuleCall_0_0_1()); 
	    }
		lv_lowerBound_0_2=ruleSignedConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_2, 
        		"SignedConstant");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getLowerBoundConstantValueParserRuleCall_0_0_2()); 
	    }
		lv_lowerBound_0_3=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_3, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerRangeAccess().getFullStopFullStopKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getUpperBoundIntegerTermParserRuleCall_2_0_0()); 
	    }
		lv_upperBound_2_1=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_1, 
        		"IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getUpperBoundSignedConstantParserRuleCall_2_0_1()); 
	    }
		lv_upperBound_2_2=ruleSignedConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_2, 
        		"SignedConstant");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getUpperBoundConstantValueParserRuleCall_2_0_2()); 
	    }
		lv_upperBound_2_3=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_3, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleRealRange
entryRuleRealRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealRangeRule()); }
	 iv_ruleRealRange=ruleRealRange 
	 { $current=$iv_ruleRealRange.current; } 
	 EOF 
;

// Rule RealRange
ruleRealRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getLowerBoundRealTermParserRuleCall_0_0_0()); 
	    }
		lv_lowerBound_0_1=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_1, 
        		"RealTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getLowerBoundSignedConstantParserRuleCall_0_0_1()); 
	    }
		lv_lowerBound_0_2=ruleSignedConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_2, 
        		"SignedConstant");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getLowerBoundConstantValueParserRuleCall_0_0_2()); 
	    }
		lv_lowerBound_0_3=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_3, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getRealRangeAccess().getFullStopFullStopKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getUpperBoundRealTermParserRuleCall_2_0_0()); 
	    }
		lv_upperBound_2_1=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_1, 
        		"RealTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getUpperBoundSignedConstantParserRuleCall_2_0_1()); 
	    }
		lv_upperBound_2_2=ruleSignedConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_2, 
        		"SignedConstant");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getUpperBoundConstantValueParserRuleCall_2_0_2()); 
	    }
		lv_upperBound_2_3=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_3, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleUnnamedIntegerType
entryRuleUnnamedIntegerType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedIntegerTypeRule()); }
	 iv_ruleUnnamedIntegerType=ruleUnnamedIntegerType 
	 { $current=$iv_ruleUnnamedIntegerType.current; } 
	 EOF 
;

// Rule UnnamedIntegerType
ruleUnnamedIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedIntegerTypeAccess().getUnnamedIntegerTypeAction_0(),
            $current);
    }
)(
	otherlv_1=Aadlinteger
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedIntegerTypeAccess().getAadlintegerKeyword_1_0());
    }

    |
	otherlv_2=Int
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedIntegerTypeAccess().getIntKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedIntegerTypeAccess().getRangeIntegerRangeParserRuleCall_2_0()); 
	    }
		lv_range_3_0=ruleIntegerRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedIntegerTypeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_3_0, 
        		"IntegerRange");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedIntegerTypeAccess().getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0()); 
	    }
		lv_ownedUnitsType_4_0=ruleUnnamedUnitsType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedIntegerTypeRule());
	        }
       		set(
       			$current, 
       			"ownedUnitsType",
        		lv_ownedUnitsType_4_0, 
        		"UnnamedUnitsType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
	otherlv_5=Units
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnnamedIntegerTypeAccess().getUnitsKeyword_3_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnnamedIntegerTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUnnamedIntegerTypeAccess().getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleUnnamedRealType
entryRuleUnnamedRealType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedRealTypeRule()); }
	 iv_ruleUnnamedRealType=ruleUnnamedRealType 
	 { $current=$iv_ruleUnnamedRealType.current; } 
	 EOF 
;

// Rule UnnamedRealType
ruleUnnamedRealType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedRealTypeAccess().getUnnamedRealTypeAction_0(),
            $current);
    }
)(
	otherlv_1=Aadlreal
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedRealTypeAccess().getAadlrealKeyword_1_0());
    }

    |
	otherlv_2=Real
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedRealTypeAccess().getRealKeyword_1_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRealTypeAccess().getRangeRealRangeParserRuleCall_2_0()); 
	    }
		lv_range_3_0=ruleRealRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedRealTypeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_3_0, 
        		"RealRange");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRealTypeAccess().getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0()); 
	    }
		lv_ownedUnitsType_4_0=ruleUnnamedUnitsType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedRealTypeRule());
	        }
       		set(
       			$current, 
       			"ownedUnitsType",
        		lv_ownedUnitsType_4_0, 
        		"UnnamedUnitsType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
	otherlv_5=Units
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnnamedRealTypeAccess().getUnitsKeyword_3_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnnamedRealTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRealTypeAccess().getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleUnnamedUnitsType
entryRuleUnnamedUnitsType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedUnitsTypeRule()); }
	 iv_ruleUnnamedUnitsType=ruleUnnamedUnitsType 
	 { $current=$iv_ruleUnnamedUnitsType.current; } 
	 EOF 
;

// Rule UnnamedUnitsType
ruleUnnamedUnitsType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Units
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnnamedUnitsTypeAccess().getUnitsKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedUnitsTypeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedUnitsTypeAccess().getOwnedLiteralUnitLiteralParserRuleCall_2_0()); 
	    }
		lv_ownedLiteral_2_0=ruleUnitLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedUnitsTypeRule());
	        }
       		add(
       			$current, 
       			"ownedLiteral",
        		lv_ownedLiteral_2_0, 
        		"UnitLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnnamedUnitsTypeAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedUnitsTypeAccess().getOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0()); 
	    }
		lv_ownedLiteral_4_0=ruleUnitLiteralConversion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedUnitsTypeRule());
	        }
       		add(
       			$current, 
       			"ownedLiteral",
        		lv_ownedLiteral_4_0, 
        		"UnitLiteralConversion");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnnamedUnitsTypeAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleUnitLiteral
entryRuleUnitLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnitLiteralRule()); }
	 iv_ruleUnitLiteral=ruleUnitLiteral 
	 { $current=$iv_ruleUnitLiteral.current; } 
	 EOF 
;

// Rule UnitLiteral
ruleUnitLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnitLiteralAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleUnitLiteralConversion
entryRuleUnitLiteralConversion returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnitLiteralConversionRule()); }
	 iv_ruleUnitLiteralConversion=ruleUnitLiteralConversion 
	 { $current=$iv_ruleUnitLiteralConversion.current; } 
	 EOF 
;

// Rule UnitLiteralConversion
ruleUnitLiteralConversion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnitLiteralConversionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitLiteralConversionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnitLiteralConversionAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitLiteralConversionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getUnitLiteralConversionAccess().getBaseUnitUnitLiteralCrossReference_2_0()); 
	}

)
)
    { 
        newCompositeNode(grammarAccess.getUnitLiteralConversionAccess().getSTARParserRuleCall_3()); 
    }
ruleSTAR
    {
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitLiteralConversionAccess().getFactorNumberValueParserRuleCall_4_0()); 
	    }
		lv_factor_4_0=ruleNumberValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitLiteralConversionRule());
	        }
       		set(
       			$current, 
       			"factor",
        		lv_factor_4_0, 
        		"NumberValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUnnamedBooleanType
entryRuleUnnamedBooleanType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedBooleanTypeRule()); }
	 iv_ruleUnnamedBooleanType=ruleUnnamedBooleanType 
	 { $current=$iv_ruleUnnamedBooleanType.current; } 
	 EOF 
;

// Rule UnnamedBooleanType
ruleUnnamedBooleanType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedBooleanTypeAccess().getAadlBooleanAction_0(),
            $current);
    }
)(
	otherlv_1=Aadlboolean
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedBooleanTypeAccess().getAadlbooleanKeyword_1_0());
    }

    |
	otherlv_2=Bool
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedBooleanTypeAccess().getBoolKeyword_1_1());
    }
))
;





// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	 iv_ruleNumberValue=ruleNumberValue 
	 { $current=$iv_ruleNumberValue.current; } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberValueAccess().getRealLitParserRuleCall_0()); 
    }
    this_RealLit_0=ruleRealLit
    {
        $current = $this_RealLit_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberValueAccess().getIntegerLitParserRuleCall_1()); 
    }
    this_IntegerLit_1=ruleIntegerLit
    {
        $current = $this_IntegerLit_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRealLit
entryRuleRealLit returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealLitRule()); }
	 iv_ruleRealLit=ruleRealLit 
	 { $current=$iv_ruleRealLit.current; } 
	 EOF 
;

// Rule RealLit
ruleRealLit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRealLitAccess().getValueSignedRealParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleSignedReal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealLitRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedReal");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIntegerLit
entryRuleIntegerLit returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerLitRule()); }
	 iv_ruleIntegerLit=ruleIntegerLit 
	 { $current=$iv_ruleIntegerLit.current; } 
	 EOF 
;

// Rule IntegerLit
ruleIntegerLit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLitAccess().getValueSignedIntParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLitRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUnnamedStringType
entryRuleUnnamedStringType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedStringTypeRule()); }
	 iv_ruleUnnamedStringType=ruleUnnamedStringType 
	 { $current=$iv_ruleUnnamedStringType.current; } 
	 EOF 
;

// Rule UnnamedStringType
ruleUnnamedStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedStringTypeAccess().getAadlStringAction_0(),
            $current);
    }
)(
	otherlv_1=Aadlstring
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedStringTypeAccess().getAadlstringKeyword_1_0());
    }

    |
	otherlv_2=String
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedStringTypeAccess().getStringKeyword_1_1());
    }
))
;





// Entry rule entryRuleUnnamedEnumerationType
entryRuleUnnamedEnumerationType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedEnumerationTypeRule()); }
	 iv_ruleUnnamedEnumerationType=ruleUnnamedEnumerationType 
	 { $current=$iv_ruleUnnamedEnumerationType.current; } 
	 EOF 
;

// Rule UnnamedEnumerationType
ruleUnnamedEnumerationType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=Enumeration
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnnamedEnumerationTypeAccess().getEnumerationKeyword_0_0());
    }

    |
	otherlv_1=Enum
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedEnumerationTypeAccess().getEnumKeyword_0_1());
    }
)
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedEnumerationTypeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedEnumerationTypeAccess().getOwnedLiteralEnumerationLiteralParserRuleCall_2_0()); 
	    }
		lv_ownedLiteral_3_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedEnumerationTypeRule());
	        }
       		add(
       			$current, 
       			"ownedLiteral",
        		lv_ownedLiteral_3_0, 
        		"EnumerationLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnnamedEnumerationTypeAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedEnumerationTypeAccess().getOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0()); 
	    }
		lv_ownedLiteral_5_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedEnumerationTypeRule());
	        }
       		add(
       			$current, 
       			"ownedLiteral",
        		lv_ownedLiteral_5_0, 
        		"EnumerationLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnnamedEnumerationTypeAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleUnnamedRangeType
entryRuleUnnamedRangeType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedRangeTypeRule()); }
	 iv_ruleUnnamedRangeType=ruleUnnamedRangeType 
	 { $current=$iv_ruleUnnamedRangeType.current; } 
	 EOF 
;

// Rule UnnamedRangeType
ruleUnnamedRangeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Range
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnnamedRangeTypeAccess().getRangeKeyword_0());
    }

	otherlv_1=Of
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedRangeTypeAccess().getOfKeyword_1());
    }
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRangeTypeAccess().getOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_2_0_0_0()); 
	    }
		lv_ownedNumberType_2_1=ruleUnnamedIntegerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedRangeTypeRule());
	        }
       		set(
       			$current, 
       			"ownedNumberType",
        		lv_ownedNumberType_2_1, 
        		"UnnamedIntegerType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getUnnamedRangeTypeAccess().getOwnedNumberTypeUnnamedRealTypeParserRuleCall_2_0_0_1()); 
	    }
		lv_ownedNumberType_2_2=ruleUnnamedRealType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedRangeTypeRule());
	        }
       		set(
       			$current, 
       			"ownedNumberType",
        		lv_ownedNumberType_2_2, 
        		"UnnamedRealType");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnnamedRangeTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRangeTypeAccess().getReferencedNumberTypeNumberTypeCrossReference_2_1_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFQCREF
entryRuleFQCREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFQCREFRule()); } 
	 iv_ruleFQCREF=ruleFQCREF 
	 { $current=$iv_ruleFQCREF.current.getText(); }  
	 EOF 
;

// Rule FQCREF
ruleFQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQCREFAccess().getColonColonKeyword_0_1()); 
    }
)+    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQCREFAccess().getIDTerminalRuleCall_1()); 
    }
((
	FullStop 
)=>(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQCREFAccess().getFullStopKeyword_2_0_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getFQCREFAccess().getIDTerminalRuleCall_2_0_1()); 
    }
))?)
    ;







// Entry rule entryRuleContainedPropertyAssociation
entryRuleContainedPropertyAssociation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainedPropertyAssociationRule()); }
	 iv_ruleContainedPropertyAssociation=ruleContainedPropertyAssociation 
	 { $current=$iv_ruleContainedPropertyAssociation.current; } 
	 EOF 
;

// Rule ContainedPropertyAssociation
ruleContainedPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainedPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0());
    }

    |(
(
		lv_append_2_0=
	PlusSignEqualsSignGreaterThanSign
    {
        newLeafNode(lv_append_2_0, grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "append", true, "+=>");
	    }

)
))(
(
		lv_constant_3_0=
	Constant
    {
        newLeafNode(lv_constant_3_0, grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "constant", true, "constant");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); 
	    }
		lv_ownedValue_4_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_4_0, 
        		"OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); 
	    }
		lv_ownedValue_6_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_6_0, 
        		"OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)(
	otherlv_7=Applies
    {
    	newLeafNode(otherlv_7, grammarAccess.getContainedPropertyAssociationAccess().getAppliesKeyword_4_0());
    }

	otherlv_8=To
    {
    	newLeafNode(otherlv_8, grammarAccess.getContainedPropertyAssociationAccess().getToKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_2_0()); 
	    }
		lv_appliesTo_9_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_9_0, 
        		"ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=Comma
    {
    	newLeafNode(otherlv_10, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_3_1_0()); 
	    }
		lv_appliesTo_11_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_11_0, 
        		"ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	otherlv_12=In
    {
    	newLeafNode(otherlv_12, grammarAccess.getContainedPropertyAssociationAccess().getInKeyword_5_0());
    }

	otherlv_13=Binding
    {
    	newLeafNode(otherlv_13, grammarAccess.getContainedPropertyAssociationAccess().getBindingKeyword_5_1());
    }

	otherlv_14=LeftParenthesis
    {
    	newLeafNode(otherlv_14, grammarAccess.getContainedPropertyAssociationAccess().getLeftParenthesisKeyword_5_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierCrossReference_5_3_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_16=RightParenthesis
    {
    	newLeafNode(otherlv_16, grammarAccess.getContainedPropertyAssociationAccess().getRightParenthesisKeyword_5_4());
    }
)?
	otherlv_17=Semicolon
    {
    	newLeafNode(otherlv_17, grammarAccess.getContainedPropertyAssociationAccess().getSemicolonKeyword_6());
    }
)
;









// Entry rule entryRuleContainmentPath
entryRuleContainmentPath returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathRule()); }
	 iv_ruleContainmentPath=ruleContainmentPath 
	 { $current=$iv_ruleContainmentPath.current; } 
	 EOF 
;

// Rule ContainmentPath
ruleContainmentPath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathAccess().getPathContainmentPathElementParserRuleCall_0()); 
	    }
		lv_path_0_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_0_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleOptionalModalPropertyValue
entryRuleOptionalModalPropertyValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOptionalModalPropertyValueRule()); }
	 iv_ruleOptionalModalPropertyValue=ruleOptionalModalPropertyValue 
	 { $current=$iv_ruleOptionalModalPropertyValue.current; } 
	 EOF 
;

// Rule OptionalModalPropertyValue
ruleOptionalModalPropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalModalPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=In
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionalModalPropertyValueAccess().getInKeyword_1_0());
    }

	otherlv_2=Modes
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionalModalPropertyValueAccess().getModesKeyword_1_1());
    }

	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getOptionalModalPropertyValueAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_3_0()); 
	}

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getOptionalModalPropertyValueAccess().getCommaKeyword_1_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_4_1_0()); 
	}

)
))*
	otherlv_7=RightParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getOptionalModalPropertyValueAccess().getRightParenthesisKeyword_1_5());
    }
)?)
;





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyValueRule()); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePropertyExpression
entryRulePropertyExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyExpressionRule()); }
	 iv_rulePropertyExpression=rulePropertyExpression 
	 { $current=$iv_rulePropertyExpression.current; } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRecordTermParserRuleCall_0()); 
    }
    this_RecordTerm_0=ruleRecordTerm
    {
        $current = $this_RecordTerm_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getReferenceTermParserRuleCall_1()); 
    }
    this_ReferenceTerm_1=ruleReferenceTerm
    {
        $current = $this_ReferenceTerm_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComponentClassifierTermParserRuleCall_2()); 
    }
    this_ComponentClassifierTerm_2=ruleComponentClassifierTerm
    {
        $current = $this_ComponentClassifierTerm_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComputedTermParserRuleCall_3()); 
    }
    this_ComputedTerm_3=ruleComputedTerm
    {
        $current = $this_ComputedTerm_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getStringTermParserRuleCall_4()); 
    }
    this_StringTerm_4=ruleStringTerm
    {
        $current = $this_StringTerm_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getNumericRangeTermParserRuleCall_5()); 
    }
    this_NumericRangeTerm_5=ruleNumericRangeTerm
    {
        $current = $this_NumericRangeTerm_5.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRealTermParserRuleCall_6()); 
    }
    this_RealTerm_6=ruleRealTerm
    {
        $current = $this_RealTerm_6.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getIntegerTermParserRuleCall_7()); 
    }
    this_IntegerTerm_7=ruleIntegerTerm
    {
        $current = $this_IntegerTerm_7.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getListTermParserRuleCall_8()); 
    }
    this_ListTerm_8=ruleListTerm
    {
        $current = $this_ListTerm_8.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getBooleanLiteralParserRuleCall_9()); 
    }
    this_BooleanLiteral_9=ruleBooleanLiteral
    {
        $current = $this_BooleanLiteral_9.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getLiteralorReferenceTermParserRuleCall_10()); 
    }
    this_LiteralorReferenceTerm_10=ruleLiteralorReferenceTerm
    {
        $current = $this_LiteralorReferenceTerm_10.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralorReferenceTerm
entryRuleLiteralorReferenceTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralorReferenceTermRule()); }
	 iv_ruleLiteralorReferenceTerm=ruleLiteralorReferenceTerm 
	 { $current=$iv_ruleLiteralorReferenceTerm.current; } 
	 EOF 
;

// Rule LiteralorReferenceTerm
ruleLiteralorReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralorReferenceTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLiteralorReferenceTermAccess().getNamedValueAbstractNamedValueCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)((
(
		lv_value_1_0=
	True
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", true, "true");
	    }

)
)
    |
	otherlv_2=False
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); }
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current; } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantValueRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleReferenceTerm
entryRuleReferenceTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReferenceTermRule()); }
	 iv_ruleReferenceTerm=ruleReferenceTerm 
	 { $current=$iv_ruleReferenceTerm.current; } 
	 EOF 
;

// Rule ReferenceTerm
ruleReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Reference
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceTermAccess().getReferenceKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceTermAccess().getPathContainmentPathElementParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceTermRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleRecordTerm
entryRuleRecordTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordTermRule()); }
	 iv_ruleRecordTerm=ruleRecordTerm 
	 { $current=$iv_ruleRecordTerm.current; } 
	 EOF 
;

// Rule RecordTerm
ruleRecordTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftSquareBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTermAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTermAccess().getOwnedFieldValueFieldPropertyAssociationParserRuleCall_1_0()); 
	    }
		lv_ownedFieldValue_1_0=ruleFieldPropertyAssociation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTermRule());
	        }
       		add(
       			$current, 
       			"ownedFieldValue",
        		lv_ownedFieldValue_1_0, 
        		"FieldPropertyAssociation");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_2=RightSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTermAccess().getRightSquareBracketKeyword_2());
    }
)
;







// Entry rule entryRuleComputedTerm
entryRuleComputedTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComputedTermRule()); }
	 iv_ruleComputedTerm=ruleComputedTerm 
	 { $current=$iv_ruleComputedTerm.current; } 
	 EOF 
;

// Rule ComputedTerm
ruleComputedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Compute
    {
    	newLeafNode(otherlv_0, grammarAccess.getComputedTermAccess().getComputeKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getComputedTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_function_2_0=RULE_ID
		{
			newLeafNode(lv_function_2_0, grammarAccess.getComputedTermAccess().getFunctionIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComputedTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"ID");
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getComputedTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleComponentClassifierTerm
entryRuleComponentClassifierTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComponentClassifierTermRule()); }
	 iv_ruleComponentClassifierTerm=ruleComponentClassifierTerm 
	 { $current=$iv_ruleComponentClassifierTerm.current; } 
	 EOF 
;

// Rule ComponentClassifierTerm
ruleComponentClassifierTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Classifier
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentClassifierTermAccess().getClassifierKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentClassifierTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentClassifierTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getComponentClassifierTermAccess().getClassifierComponentClassifierCrossReference_2_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentClassifierTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleListTerm
entryRuleListTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getListTermRule()); }
	 iv_ruleListTerm=ruleListTerm 
	 { $current=$iv_ruleListTerm.current; } 
	 EOF 
;

// Rule ListTerm
ruleListTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListTermAccess().getListValueAction_0(),
            $current);
    }
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getListTermAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_0_0()); 
	    }
		lv_ownedListElement_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getListTermAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_ownedListElement_4_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_4_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getListTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFieldPropertyAssociation
entryRuleFieldPropertyAssociation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFieldPropertyAssociationRule()); }
	 iv_ruleFieldPropertyAssociation=ruleFieldPropertyAssociation 
	 { $current=$iv_ruleFieldPropertyAssociation.current; } 
	 EOF 
;

// Rule FieldPropertyAssociation
ruleFieldPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldPropertyAssociationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyCrossReference_0_0()); 
	}

)
)
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValuePropertyExpressionParserRuleCall_2_0()); 
	    }
		lv_ownedValue_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldPropertyAssociationRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldPropertyAssociationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleContainmentPathElement
entryRuleContainmentPathElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathElementRule()); }
	 iv_ruleContainmentPathElement=ruleContainmentPathElement 
	 { $current=$iv_ruleContainmentPathElement.current; } 
	 EOF 
;

// Rule ContainmentPathElement
ruleContainmentPathElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainmentPathElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getArrayRangeArrayRangeParserRuleCall_0_1_0()); 
	    }
		lv_arrayRange_1_0=ruleArrayRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		add(
       			$current, 
       			"arrayRange",
        		lv_arrayRange_1_0, 
        		"ArrayRange");
	        afterParserOrEnumRuleCall();
	    }

)
)?)(
	otherlv_2=FullStop
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainmentPathElementAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getPathContainmentPathElementParserRuleCall_1_1_0()); 
	    }
		lv_path_3_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;







// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); } 
	 iv_rulePlusMinus=rulePlusMinus 
	 { $current=$iv_rulePlusMinus.current.getText(); }  
	 EOF 
;

// Rule PlusMinus
rulePlusMinus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleStringTerm
entryRuleStringTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringTermRule()); }
	 iv_ruleStringTerm=ruleStringTerm 
	 { $current=$iv_ruleStringTerm.current; } 
	 EOF 
;

// Rule StringTerm
ruleStringTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringTermAccess().getValueNoQuoteStringParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNoQuoteString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NoQuoteString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNoQuoteString
entryRuleNoQuoteString returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNoQuoteStringRule()); } 
	 iv_ruleNoQuoteString=ruleNoQuoteString 
	 { $current=$iv_ruleNoQuoteString.current.getText(); }  
	 EOF 
;

// Rule NoQuoteString
ruleNoQuoteString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleArrayRange
entryRuleArrayRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayRangeRule()); }
	 iv_ruleArrayRange=ruleArrayRange 
	 { $current=$iv_ruleArrayRange.current; } 
	 EOF 
;

// Rule ArrayRange
ruleArrayRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayRangeAccess().getArrayRangeAction_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayRangeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getLowerBoundINTVALUEParserRuleCall_2_0()); 
	    }
		lv_lowerBound_2_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_2_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=FullStopFullStop
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayRangeAccess().getFullStopFullStopKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getUpperBoundINTVALUEParserRuleCall_3_1_0()); 
	    }
		lv_upperBound_4_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_4_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_5=RightSquareBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayRangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSignedConstant
entryRuleSignedConstant returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignedConstantRule()); }
	 iv_ruleSignedConstant=ruleSignedConstant 
	 { $current=$iv_ruleSignedConstant.current; } 
	 EOF 
;

// Rule SignedConstant
ruleSignedConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOpPlusMinusParserRuleCall_0_0()); 
	    }
		lv_op_0_0=rulePlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionConstantValueParserRuleCall_1_0()); 
	    }
		lv_ownedPropertyExpression_1_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		add(
       			$current, 
       			"ownedPropertyExpression",
        		lv_ownedPropertyExpression_1_0, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSignedInt
entryRuleSignedInt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSignedIntRule()); } 
	 iv_ruleSignedInt=ruleSignedInt 
	 { $current=$iv_ruleSignedInt.current.getText(); }  
	 EOF 
;

// Rule SignedInt
ruleSignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_INTEGER_LIT_2=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_2);
    }

    { 
    newLeafNode(this_INTEGER_LIT_2, grammarAccess.getSignedIntAccess().getINTEGER_LITTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSignedReal
entryRuleSignedReal returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSignedRealRule()); } 
	 iv_ruleSignedReal=ruleSignedReal 
	 { $current=$iv_ruleSignedReal.current.getText(); }  
	 EOF 
;

// Rule SignedReal
ruleSignedReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedRealAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedRealAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_REAL_LIT_2=RULE_REAL_LIT    {
		$current.merge(this_REAL_LIT_2);
    }

    { 
    newLeafNode(this_REAL_LIT_2, grammarAccess.getSignedRealAccess().getREAL_LITTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleNumericRangeTerm
entryRuleNumericRangeTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumericRangeTermRule()); }
	 iv_ruleNumericRangeTerm=ruleNumericRangeTerm 
	 { $current=$iv_ruleNumericRangeTerm.current; } 
	 EOF 
;

// Rule NumericRangeTerm
ruleNumericRangeTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMinimumNumAltParserRuleCall_0_0()); 
	    }
		lv_minimum_0_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"minimum",
        		lv_minimum_0_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumericRangeTermAccess().getFullStopFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMaximumNumAltParserRuleCall_2_0()); 
	    }
		lv_maximum_2_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"maximum",
        		lv_maximum_2_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Delta
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumericRangeTermAccess().getDeltaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getDeltaNumAltParserRuleCall_3_1_0()); 
	    }
		lv_delta_4_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"delta",
        		lv_delta_4_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNumAlt
entryRuleNumAlt returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumAltRule()); }
	 iv_ruleNumAlt=ruleNumAlt 
	 { $current=$iv_ruleNumAlt.current; } 
	 EOF 
;

// Rule NumAlt
ruleNumAlt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getRealTermParserRuleCall_0()); 
    }
    this_RealTerm_0=ruleRealTerm
    {
        $current = $this_RealTerm_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getIntegerTermParserRuleCall_1()); 
    }
    this_IntegerTerm_1=ruleIntegerTerm
    {
        $current = $this_IntegerTerm_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getSignedConstantParserRuleCall_2()); 
    }
    this_SignedConstant_2=ruleSignedConstant
    {
        $current = $this_SignedConstant_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getConstantValueParserRuleCall_3()); 
    }
    this_ConstantValue_3=ruleConstantValue
    {
        $current = $this_ConstantValue_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleINTVALUE
entryRuleINTVALUE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getINTVALUERule()); } 
	 iv_ruleINTVALUE=ruleINTVALUE 
	 { $current=$iv_ruleINTVALUE.current.getText(); }  
	 EOF 
;

// Rule INTVALUE
ruleINTVALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_INTEGER_LIT_0=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_0);
    }

    { 
    newLeafNode(this_INTEGER_LIT_0, grammarAccess.getINTVALUEAccess().getINTEGER_LITTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleQPREF
entryRuleQPREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQPREFRule()); } 
	 iv_ruleQPREF=ruleQPREF 
	 { $current=$iv_ruleQPREF.current.getText(); }  
	 EOF 
;

// Rule QPREF
ruleQPREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQPREFAccess().getColonColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleQCREF
entryRuleQCREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQCREFRule()); } 
	 iv_ruleQCREF=ruleQCREF 
	 { $current=$iv_ruleQCREF.current.getText(); }  
	 EOF 
;

// Rule QCREF
ruleQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); 
    }
)*    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleSTAR
entryRuleSTAR returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTARRule()); } 
	 iv_ruleSTAR=ruleSTAR 
	 { $current=$iv_ruleSTAR.current.getText(); }  
	 EOF 
;

// Rule STAR
ruleSTAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=Asterisk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTARAccess().getAsteriskKeyword()); 
    }

    ;





