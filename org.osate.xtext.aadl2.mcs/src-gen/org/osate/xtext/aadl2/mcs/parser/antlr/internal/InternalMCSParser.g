/*
 * generated by Xtext
 */
parser grammar InternalMCSParser;

options {
	tokenVocab=InternalMCSLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package org.osate.xtext.aadl2.mcs.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.xtext.aadl2.mcs.services.MCSGrammarAccess;

}

@members {


	private MCSGrammarAccess grammarAccess;
	 	
	public InternalMCSParser(TokenStream input, MCSGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "MCSGrammarRoot";	
	} 
	   	   	
	@Override
	protected MCSGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleMCSGrammarRoot
entryRuleMCSGrammarRoot returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSGrammarRootRule()); }
	 iv_ruleMCSGrammarRoot=ruleMCSGrammarRoot 
	 { $current=$iv_ruleMCSGrammarRoot.current; } 
	 EOF 
;

// Rule MCSGrammarRoot
ruleMCSGrammarRoot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
Types
 | 
Constants
 | 
Functions
 | 
Theorems
 | 
Viewpoint
 | 
Enforce
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getMCSGrammarRootAccess().getLibMCSAnnexLibraryParserRuleCall_0_0()); 
	    }
		lv_lib_0_0=ruleMCSAnnexLibrary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSGrammarRootRule());
	        }
       		set(
       			$current, 
       			"lib",
        		lv_lib_0_0, 
        		"MCSAnnexLibrary");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSGrammarRootAccess().getSubclauseMCSAnnexSubclauseParserRuleCall_1_0()); 
	    }
		lv_subclause_1_0=ruleMCSAnnexSubclause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSGrammarRootRule());
	        }
       		set(
       			$current, 
       			"subclause",
        		lv_subclause_1_0, 
        		"MCSAnnexSubclause");
	        afterParserOrEnumRuleCall();
	    }

)
))
;









// Entry rule entryRuleMCSAnnexLibrary
entryRuleMCSAnnexLibrary returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSAnnexLibraryRule()); }
	 iv_ruleMCSAnnexLibrary=ruleMCSAnnexLibrary 
	 { $current=$iv_ruleMCSAnnexLibrary.current; } 
	 EOF 
;

// Rule MCSAnnexLibrary
ruleMCSAnnexLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMCSAnnexLibraryAccess().getMCSAnnexLibraryAction_0(),
            $current);
    }
)(
	otherlv_1=Types
    {
    	newLeafNode(otherlv_1, grammarAccess.getMCSAnnexLibraryAccess().getTypesKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getTypesType_declarationParserRuleCall_1_1_0()); 
	    }
		lv_types_2_0=ruletype_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"type_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_3=Constants
    {
    	newLeafNode(otherlv_3, grammarAccess.getMCSAnnexLibraryAccess().getConstantsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getConstantsConstant_declarationParserRuleCall_2_1_0()); 
	    }
		lv_constants_4_0=ruleconstant_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_4_0, 
        		"constant_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_5=Functions
    {
    	newLeafNode(otherlv_5, grammarAccess.getMCSAnnexLibraryAccess().getFunctionsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getFunctionsFunction_declarationParserRuleCall_3_1_0()); 
	    }
		lv_functions_6_0=rulefunction_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_6_0, 
        		"function_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_7=Theorems
    {
    	newLeafNode(otherlv_7, grammarAccess.getMCSAnnexLibraryAccess().getTheoremsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getTheoremsTheorem_declarationParserRuleCall_4_1_0()); 
	    }
		lv_theorems_8_0=ruletheorem_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"theorems",
        		lv_theorems_8_0, 
        		"theorem_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?((
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getViewpointsMCSViewpointParserRuleCall_5_0_0()); 
	    }
		lv_viewpoints_9_0=ruleMCSViewpoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"viewpoints",
        		lv_viewpoints_9_0, 
        		"MCSViewpoint");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getViewpointsMCSViewpointParserRuleCall_5_1_0()); 
	    }
		lv_viewpoints_10_0=ruleMCSViewpoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"viewpoints",
        		lv_viewpoints_10_0, 
        		"MCSViewpoint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getEnforceclausesPackageEnforceParserRuleCall_6_0_0()); 
	    }
		lv_enforceclauses_11_0=rulePackageEnforce		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"enforceclauses",
        		lv_enforceclauses_11_0, 
        		"PackageEnforce");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexLibraryAccess().getEnforceclausesPackageEnforceParserRuleCall_6_1_0()); 
	    }
		lv_enforceclauses_12_0=rulePackageEnforce		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexLibraryRule());
	        }
       		add(
       			$current, 
       			"enforceclauses",
        		lv_enforceclauses_12_0, 
        		"PackageEnforce");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuletype_declaration
entryRuletype_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getType_declarationRule()); }
	 iv_ruletype_declaration=ruletype_declaration 
	 { $current=$iv_ruletype_declaration.current; } 
	 EOF 
;

// Rule type_declaration
ruletype_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getType_declarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getType_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getType_declarationAccess().getColonKeyword_1());
    }

	otherlv_2=Type
    {
    	newLeafNode(otherlv_2, grammarAccess.getType_declarationAccess().getTypeKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getType_declarationAccess().getTypeType_expressionParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getType_declarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleconstant_declaration
entryRuleconstant_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstant_declarationRule()); }
	 iv_ruleconstant_declaration=ruleconstant_declaration 
	 { $current=$iv_ruleconstant_declaration.current; } 
	 EOF 
;

// Rule constant_declaration
ruleconstant_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_const_0_0=
	Const
    {
        newLeafNode(lv_const_0_0, grammarAccess.getConstant_declarationAccess().getConstConstKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstant_declarationRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstant_declarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstant_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstant_declarationAccess().getTypeType_expressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstant_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=ColonEqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstant_declarationAccess().getColonEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstant_declarationAccess().getLeft_exprConstant_expressionParserRuleCall_4_0()); 
	    }
		lv_left_expr_4_0=ruleconstant_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstant_declarationRule());
	        }
       		set(
       			$current, 
       			"left_expr",
        		lv_left_expr_4_0, 
        		"constant_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstant_declarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleMCSViewpoint
entryRuleMCSViewpoint returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSViewpointRule()); }
	 iv_ruleMCSViewpoint=ruleMCSViewpoint 
	 { $current=$iv_ruleMCSViewpoint.current; } 
	 EOF 
;

// Rule MCSViewpoint
ruleMCSViewpoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Viewpoint
    {
    	newLeafNode(otherlv_0, grammarAccess.getMCSViewpointAccess().getViewpointKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMCSViewpointAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSViewpointRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSViewpointAccess().getPolicyEnforcement_policyParserRuleCall_2_0()); 
	    }
		lv_policy_2_0=ruleEnforcement_policy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSViewpointRule());
	        }
       		set(
       			$current, 
       			"policy",
        		lv_policy_2_0, 
        		"Enforcement_policy");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSViewpointAccess().getPscriptPackageScriptParserRuleCall_3_0()); 
	    }
		lv_pscript_3_0=rulePackageScript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSViewpointRule());
	        }
       		set(
       			$current, 
       			"pscript",
        		lv_pscript_3_0, 
        		"PackageScript");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEnforcement_policy
entryRuleEnforcement_policy returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEnforcement_policyRule()); }
	 iv_ruleEnforcement_policy=ruleEnforcement_policy 
	 { $current=$iv_ruleEnforcement_policy.current; } 
	 EOF 
;

// Rule Enforcement_policy
ruleEnforcement_policy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_pack_0_0=
	Package
    {
        newLeafNode(lv_pack_0_0, grammarAccess.getEnforcement_policyAccess().getPackPackageKeyword_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnforcement_policyRule());
	        }
       		setWithLastConsumed($current, "pack", true, "package");
	    }

)
)
    |(
(
		lv_class_1_0=
	Classifier
    {
        newLeafNode(lv_class_1_0, grammarAccess.getEnforcement_policyAccess().getClassClassifierKeyword_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnforcement_policyRule());
	        }
       		setWithLastConsumed($current, "class", true, "classifier");
	    }

)
))
	otherlv_2=Contract
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnforcement_policyAccess().getContractKeyword_1());
    }
)
;





// Entry rule entryRulePackageScript
entryRulePackageScript returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPackageScriptRule()); }
	 iv_rulePackageScript=rulePackageScript 
	 { $current=$iv_rulePackageScript.current; } 
	 EOF 
;

// Rule PackageScript
rulePackageScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Script
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageScriptAccess().getScriptKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPackageScriptAccess().getAppliesAppliesToClauseParserRuleCall_1_0_0()); 
	    }
		lv_applies_1_0=ruleAppliesToClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageScriptRule());
	        }
       		add(
       			$current, 
       			"applies",
        		lv_applies_1_0, 
        		"AppliesToClause");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageScriptAccess().getC_blockConstraintsBlockParserRuleCall_1_1_0()); 
	    }
		lv_c_block_2_0=ruleConstraintsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageScriptRule());
	        }
       		add(
       			$current, 
       			"c_block",
        		lv_c_block_2_0, 
        		"ConstraintsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)+)*
	otherlv_3=Endscript
    {
    	newLeafNode(otherlv_3, grammarAccess.getPackageScriptAccess().getEndscriptKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageScriptAccess().getRefViewpointReferenceParserRuleCall_3_0()); 
	    }
		lv_ref_4_0=ruleViewpointReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageScriptRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_4_0, 
        		"ViewpointReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=Semicolon
    {
    	newLeafNode(otherlv_5, grammarAccess.getPackageScriptAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAppliesToClause
entryRuleAppliesToClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAppliesToClauseRule()); }
	 iv_ruleAppliesToClause=ruleAppliesToClause 
	 { $current=$iv_ruleAppliesToClause.current; } 
	 EOF 
;

// Rule AppliesToClause
ruleAppliesToClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Applies
    {
    	newLeafNode(otherlv_0, grammarAccess.getAppliesToClauseAccess().getAppliesKeyword_0());
    }

	otherlv_1=To
    {
    	newLeafNode(otherlv_1, grammarAccess.getAppliesToClauseAccess().getToKeyword_1());
    }
((
(
		lv_all_2_0=
	All
    {
        newLeafNode(lv_all_2_0, grammarAccess.getAppliesToClauseAccess().getAllAllKeyword_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAppliesToClauseRule());
	        }
       		setWithLastConsumed($current, "all", true, "all");
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAppliesToClauseAccess().getCategoryClassifierCategoryParserRuleCall_2_1_0_0()); 
	    }
		lv_category_3_0=ruleClassifierCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAppliesToClauseRule());
	        }
       		add(
       			$current, 
       			"category",
        		lv_category_3_0, 
        		"ClassifierCategory");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getAppliesToClauseAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAppliesToClauseAccess().getCategoryClassifierCategoryParserRuleCall_2_1_1_1_0()); 
	    }
		lv_category_5_0=ruleClassifierCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAppliesToClauseRule());
	        }
       		add(
       			$current, 
       			"category",
        		lv_category_5_0, 
        		"ClassifierCategory");
	        afterParserOrEnumRuleCall();
	    }

)
))*)))
;





// Entry rule entryRuleClassifierCategory
entryRuleClassifierCategory returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getClassifierCategoryRule()); }
	 iv_ruleClassifierCategory=ruleClassifierCategory 
	 { $current=$iv_ruleClassifierCategory.current; } 
	 EOF 
;

// Rule ClassifierCategory
ruleClassifierCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClassifierCategoryAccess().getClassifierCategoryAction_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierCategoryAccess().getComponentComponentCategoryParserRuleCall_1_0_0_0()); 
	    }
		lv_component_1_0=ruleComponentCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierCategoryRule());
	        }
       		set(
       			$current, 
       			"component",
        		lv_component_1_0, 
        		"ComponentCategory");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifierCategoryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassifierCategoryAccess().getCtComponentTypeCrossReference_1_0_1_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		lv_impl_3_0=
	Implementation
    {
        newLeafNode(lv_impl_3_0, grammarAccess.getClassifierCategoryAccess().getImplImplementationKeyword_1_0_2_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifierCategoryRule());
	        }
       		setWithLastConsumed($current, "impl", true, "implementation");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifierCategoryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassifierCategoryAccess().getCiComponentImplementationCrossReference_1_0_2_1_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)?)?)
    |((
(
		lv_feat_g_5_0=
	FeatureGroup
    {
        newLeafNode(lv_feat_g_5_0, grammarAccess.getClassifierCategoryAccess().getFeat_gFeatureGroupKeyword_1_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifierCategoryRule());
	        }
       		setWithLastConsumed($current, "feat_g", true, "feature group");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierCategoryAccess().getRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0()); 
	    }
		lv_ref_to_f_6_0=ruleFeatureGroupClassifierReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierCategoryRule());
	        }
       		set(
       			$current, 
       			"ref_to_f",
        		lv_ref_to_f_6_0, 
        		"FeatureGroupClassifierReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?)))
;





// Entry rule entryRuleComponentCategory
entryRuleComponentCategory returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getComponentCategoryRule()); } 
	 iv_ruleComponentCategory=ruleComponentCategory 
	 { $current=$iv_ruleComponentCategory.current.getText(); }  
	 EOF 
;

// Rule ComponentCategory
ruleComponentCategory returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Abstract 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getAbstractKeyword_0()); 
    }

    |
	kw=Bus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getBusKeyword_1()); 
    }

    |
	kw=Data 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getDataKeyword_2()); 
    }

    |
	kw=Device 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getDeviceKeyword_3()); 
    }

    |
	kw=Memory 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getMemoryKeyword_4()); 
    }

    |
	kw=Process 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getProcessKeyword_5()); 
    }

    |
	kw=Processor 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getProcessorKeyword_6()); 
    }

    |
	kw=Subprogram 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getSubprogramKeyword_7()); 
    }

    |(
	kw=Subprogram 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getSubprogramKeyword_8_0()); 
    }

	kw=Group 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getGroupKeyword_8_1()); 
    }
)
    |
	kw=KW_System 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getSystemKeyword_9()); 
    }

    |(
	kw=Thread 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getThreadKeyword_10_0()); 
    }

	kw=Group 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getGroupKeyword_10_1()); 
    }
)
    |
	kw=Thread 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getThreadKeyword_11()); 
    }

    |(
	kw=Virtual 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getVirtualKeyword_12_0()); 
    }

	kw=Bus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getBusKeyword_12_1()); 
    }
)
    |(
	kw=Virtual 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getVirtualKeyword_13_0()); 
    }

	kw=Processor 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComponentCategoryAccess().getProcessorKeyword_13_1()); 
    }
))
    ;





// Entry rule entryRuleFeatureGroupClassifierReference
entryRuleFeatureGroupClassifierReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFeatureGroupClassifierReferenceRule()); }
	 iv_ruleFeatureGroupClassifierReference=ruleFeatureGroupClassifierReference 
	 { $current=$iv_ruleFeatureGroupClassifierReference.current; } 
	 EOF 
;

// Rule FeatureGroupClassifierReference
ruleFeatureGroupClassifierReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFeatureGroupClassifierReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFeatureGroupClassifierReferenceAccess().getFgFeatureGroupTypeCrossReference_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleViewpointReference
entryRuleViewpointReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getViewpointReferenceRule()); }
	 iv_ruleViewpointReference=ruleViewpointReference 
	 { $current=$iv_ruleViewpointReference.current; } 
	 EOF 
;

// Rule ViewpointReference
ruleViewpointReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getViewpointReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getViewpointReferenceAccess().getPolicyEnforcement_policyCrossReference_0_0()); 
	}

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getViewpointReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getViewpointReferenceAccess().getVp_refMCSViewpointCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleConstraintsBlock
entryRuleConstraintsBlock returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstraintsBlockRule()); }
	 iv_ruleConstraintsBlock=ruleConstraintsBlock 
	 { $current=$iv_ruleConstraintsBlock.current; } 
	 EOF 
;

// Rule ConstraintsBlock
ruleConstraintsBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintsBlockAccess().getB_labelBlock_label_idParserRuleCall_0_0_0()); 
	    }
		lv_b_label_0_0=ruleblock_label_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintsBlockRule());
	        }
       		set(
       			$current, 
       			"b_label",
        		lv_b_label_0_0, 
        		"block_label_id");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintsBlockAccess().getColonKeyword_0_1());
    }
)?
	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstraintsBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintsBlockAccess().getCsLabelled_check_statementParserRuleCall_2_0()); 
	    }
		lv_cs_3_0=rulelabelled_check_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintsBlockRule());
	        }
       		add(
       			$current, 
       			"cs",
        		lv_cs_3_0, 
        		"labelled_check_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_4=RightCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstraintsBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulelabelled_check_statement
entryRulelabelled_check_statement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLabelled_check_statementRule()); }
	 iv_rulelabelled_check_statement=rulelabelled_check_statement 
	 { $current=$iv_rulelabelled_check_statement.current; } 
	 EOF 
;

// Rule labelled_check_statement
rulelabelled_check_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getLabelled_check_statementAccess().getC_labelCheck_label_idParserRuleCall_0_0_0()); 
	    }
		lv_c_label_0_0=rulecheck_label_id		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabelled_check_statementRule());
	        }
       		set(
       			$current, 
       			"c_label",
        		lv_c_label_0_0, 
        		"check_label_id");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getLabelled_check_statementAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLabelled_check_statementAccess().getCsCheck_statementParserRuleCall_1_0()); 
	    }
		lv_cs_2_0=rulecheck_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabelled_check_statementRule());
	        }
       		set(
       			$current, 
       			"cs",
        		lv_cs_2_0, 
        		"check_statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulecheck_statement
entryRulecheck_statement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCheck_statementRule()); }
	 iv_rulecheck_statement=rulecheck_statement 
	 { $current=$iv_rulecheck_statement.current; } 
	 EOF 
;

// Rule check_statement
rulecheck_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCheck_statementAccess().getCheck_theoremParserRuleCall_0()); 
    }
    this_check_theorem_0=rulecheck_theorem
    {
        $current = $this_check_theorem_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCheck_statementAccess().getCheck_assertionParserRuleCall_1()); 
    }
    this_check_assertion_1=rulecheck_assertion
    {
        $current = $this_check_assertion_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleblock_label_id
entryRuleblock_label_id returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBlock_label_idRule()); }
	 iv_ruleblock_label_id=ruleblock_label_id 
	 { $current=$iv_ruleblock_label_id.current; } 
	 EOF 
;

// Rule block_label_id
ruleblock_label_id returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBlock_label_idAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBlock_label_idRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRulecheck_label_id
entryRulecheck_label_id returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCheck_label_idRule()); }
	 iv_rulecheck_label_id=rulecheck_label_id 
	 { $current=$iv_rulecheck_label_id.current; } 
	 EOF 
;

// Rule check_label_id
rulecheck_label_id returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getCheck_label_idAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCheck_label_idRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRulecheck_theorem
entryRulecheck_theorem returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCheck_theoremRule()); }
	 iv_rulecheck_theorem=rulecheck_theorem 
	 { $current=$iv_rulecheck_theorem.current; } 
	 EOF 
;

// Rule check_theorem
rulecheck_theorem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Check
    {
    	newLeafNode(otherlv_0, grammarAccess.getCheck_theoremAccess().getCheckKeyword_0());
    }

	otherlv_1=Theorem
    {
    	newLeafNode(otherlv_1, grammarAccess.getCheck_theoremAccess().getTheoremKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCheck_theoremRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getCheck_theoremAccess().getNameTheorem_declarationCrossReference_2_0()); 
	}

)
)(
	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getCheck_theoremAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheck_theoremAccess().getRootRoot_elementParserRuleCall_3_1_0()); 
	    }
		lv_root_4_0=ruleroot_element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheck_theoremRule());
	        }
       		set(
       			$current, 
       			"root",
        		lv_root_4_0, 
        		"root_element");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getCheck_theoremAccess().getRightParenthesisKeyword_3_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCheck_theoremAccess().getInmodeModeSpecParserRuleCall_4_0()); 
	    }
		lv_inmode_6_0=ruleModeSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheck_theoremRule());
	        }
       		set(
       			$current, 
       			"inmode",
        		lv_inmode_6_0, 
        		"ModeSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_7=Fail
    {
    	newLeafNode(otherlv_7, grammarAccess.getCheck_theoremAccess().getFailKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheck_theoremAccess().getStrString_expressionParserRuleCall_5_1_0()); 
	    }
		lv_str_8_0=rulestring_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheck_theoremRule());
	        }
       		set(
       			$current, 
       			"str",
        		lv_str_8_0, 
        		"string_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_9=Semicolon
    {
    	newLeafNode(otherlv_9, grammarAccess.getCheck_theoremAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleModeSpec
entryRuleModeSpec returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModeSpecRule()); }
	 iv_ruleModeSpec=ruleModeSpec 
	 { $current=$iv_ruleModeSpec.current; } 
	 EOF 
;

// Rule ModeSpec
ruleModeSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=In
    {
    	newLeafNode(otherlv_0, grammarAccess.getModeSpecAccess().getInKeyword_0());
    }

	otherlv_1=Mode
    {
    	newLeafNode(otherlv_1, grammarAccess.getModeSpecAccess().getModeKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModeSpecAccess().getModeModeNameParserRuleCall_2_0()); 
	    }
		lv_mode_2_0=ruleModeName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModeSpecRule());
	        }
       		set(
       			$current, 
       			"mode",
        		lv_mode_2_0, 
        		"ModeName");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModeName
entryRuleModeName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getModeNameRule()); }
	 iv_ruleModeName=ruleModeName 
	 { $current=$iv_ruleModeName.current; } 
	 EOF 
;

// Rule ModeName
ruleModeName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getModeNameAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModeNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRulecheck_assertion
entryRulecheck_assertion returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCheck_assertionRule()); }
	 iv_rulecheck_assertion=rulecheck_assertion 
	 { $current=$iv_rulecheck_assertion.current; } 
	 EOF 
;

// Rule check_assertion
rulecheck_assertion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Check
    {
    	newLeafNode(otherlv_0, grammarAccess.getCheck_assertionAccess().getCheckKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheck_assertionAccess().getRootRoot_elementParserRuleCall_1_0()); 
	    }
		lv_root_1_0=ruleroot_element		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheck_assertionRule());
	        }
       		set(
       			$current, 
       			"root",
        		lv_root_1_0, 
        		"root_element");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCheck_assertionAccess().getInmodeModeSpecParserRuleCall_2_0()); 
	    }
		lv_inmode_2_0=ruleModeSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheck_assertionRule());
	        }
       		set(
       			$current, 
       			"inmode",
        		lv_inmode_2_0, 
        		"ModeSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getCheck_assertionAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheck_assertionAccess().getExprAssertion_expressionParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleassertion_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheck_assertionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"assertion_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getCheck_assertionAccess().getRightParenthesisKeyword_5());
    }
(
	otherlv_6=Fail
    {
    	newLeafNode(otherlv_6, grammarAccess.getCheck_assertionAccess().getFailKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheck_assertionAccess().getStrString_expressionParserRuleCall_6_1_0()); 
	    }
		lv_str_7_0=rulestring_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheck_assertionRule());
	        }
       		set(
       			$current, 
       			"str",
        		lv_str_7_0, 
        		"string_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getCheck_assertionAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleroot_element
entryRuleroot_element returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRoot_elementRule()); }
	 iv_ruleroot_element=ruleroot_element 
	 { $current=$iv_ruleroot_element.current; } 
	 EOF 
;

// Rule root_element
ruleroot_element returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getRoot_elementAccess().getElement_referenceParserRuleCall()); 
    }
    this_element_reference_0=ruleelement_reference
    {
        $current = $this_element_reference_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleelement_reference
entryRuleelement_reference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElement_referenceRule()); }
	 iv_ruleelement_reference=ruleelement_reference 
	 { $current=$iv_ruleelement_reference.current; } 
	 EOF 
;

// Rule element_reference
ruleelement_reference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getElement_referenceAccess().getElement_referenceAction_0_0(),
            $current);
    }
)(
(
		lv_self_1_0=
	Self
    {
        newLeafNode(lv_self_1_0, grammarAccess.getElement_referenceAccess().getSelfSelfKeyword_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_referenceRule());
	        }
       		setWithLastConsumed($current, "self", true, "self");
	    }

)
))
    |(
(
		lv_root_2_0=
	Root
    {
        newLeafNode(lv_root_2_0, grammarAccess.getElement_referenceAccess().getRootRootKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_referenceRule());
	        }
       		setWithLastConsumed($current, "root", true, "root");
	    }

)
)
    |(
(
		lv_currentmode_3_0=
	Current_mode
    {
        newLeafNode(lv_currentmode_3_0, grammarAccess.getElement_referenceAccess().getCurrentmodeCurrent_modeKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_referenceRule());
	        }
       		setWithLastConsumed($current, "currentmode", true, "current_mode");
	    }

)
)
    |(
	otherlv_4=Classifier
    {
    	newLeafNode(otherlv_4, grammarAccess.getElement_referenceAccess().getClassifierKeyword_3_0());
    }

	otherlv_5=LeftParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getElement_referenceAccess().getLeftParenthesisKeyword_3_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_referenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getElement_referenceAccess().getCrefClassifierCrossReference_3_2_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=RightParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getElement_referenceAccess().getRightParenthesisKeyword_3_3());
    }
)
    |(
	otherlv_8=Reference
    {
    	newLeafNode(otherlv_8, grammarAccess.getElement_referenceAccess().getReferenceKeyword_4_0());
    }

	otherlv_9=LeftParenthesis
    {
    	newLeafNode(otherlv_9, grammarAccess.getElement_referenceAccess().getLeftParenthesisKeyword_4_1());
    }
((
(
		lv_packageName_10_0=RULE_ID
		{
			newLeafNode(lv_packageName_10_0, grammarAccess.getElement_referenceAccess().getPackageNameIDTerminalRuleCall_4_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_referenceRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"packageName",
        		lv_packageName_10_0, 
        		"ID");
	    }

)
)
	otherlv_11=ColonColon
    {
    	newLeafNode(otherlv_11, grammarAccess.getElement_referenceAccess().getColonColonKeyword_4_2_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getElement_referenceAccess().getRefContainmentPathElementParserRuleCall_4_3_0()); 
	    }
		lv_ref_12_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElement_referenceRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_12_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_13=RightParenthesis
    {
    	newLeafNode(otherlv_13, grammarAccess.getElement_referenceAccess().getRightParenthesisKeyword_4_4());
    }
))
;





// Entry rule entryRuleContainmentPathElement
entryRuleContainmentPathElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathElementRule()); }
	 iv_ruleContainmentPathElement=ruleContainmentPathElement 
	 { $current=$iv_ruleContainmentPathElement.current; } 
	 EOF 
;

// Rule ContainmentPathElement
ruleContainmentPathElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainmentPathElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getArrayRangeArrayRangeParserRuleCall_0_1_0()); 
	    }
		lv_arrayRange_1_0=ruleArrayRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		add(
       			$current, 
       			"arrayRange",
        		lv_arrayRange_1_0, 
        		"ArrayRange");
	        afterParserOrEnumRuleCall();
	    }

)
)?)(
	otherlv_2=FullStop
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainmentPathElementAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getPathContainmentPathElementParserRuleCall_1_1_0()); 
	    }
		lv_path_3_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleArrayRange
entryRuleArrayRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayRangeRule()); }
	 iv_ruleArrayRange=ruleArrayRange 
	 { $current=$iv_ruleArrayRange.current; } 
	 EOF 
;

// Rule ArrayRange
ruleArrayRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftSquareBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayRangeAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_lowerBound_1_0=RULE_INT
		{
			newLeafNode(lv_lowerBound_1_0, grammarAccess.getArrayRangeAccess().getLowerBoundINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayRangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"INT");
	    }

)
)(
	otherlv_2=FullStopFullStop
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayRangeAccess().getFullStopFullStopKeyword_2_0());
    }
(
(
		lv_upperBound_3_0=RULE_INT
		{
			newLeafNode(lv_upperBound_3_0, grammarAccess.getArrayRangeAccess().getUpperBoundINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayRangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"INT");
	    }

)
))?
	otherlv_4=RightSquareBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayRangeAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRulePackageEnforce
entryRulePackageEnforce returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPackageEnforceRule()); }
	 iv_rulePackageEnforce=rulePackageEnforce 
	 { $current=$iv_rulePackageEnforce.current; } 
	 EOF 
;

// Rule PackageEnforce
rulePackageEnforce returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Enforce
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageEnforceAccess().getEnforceKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackageEnforceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPackageEnforceAccess().getViewpointMCSViewpointCrossReference_1_0()); 
	}

)
)
	otherlv_2=Semicolon
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageEnforceAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleassertion_expression
entryRuleassertion_expression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAssertion_expressionRule()); }
	 iv_ruleassertion_expression=ruleassertion_expression 
	 { $current=$iv_ruleassertion_expression.current; } 
	 EOF 
;

// Rule assertion_expression
ruleassertion_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssertion_expressionAccess().getExprExpressionParserRuleCall_0()); 
	    }
		lv_expr_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssertion_expressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulestring_expression
entryRulestring_expression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getString_expressionRule()); }
	 iv_rulestring_expression=rulestring_expression 
	 { $current=$iv_rulestring_expression.current; } 
	 EOF 
;

// Rule string_expression
rulestring_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getString_expressionAccess().getExprExpressionParserRuleCall_0()); 
	    }
		lv_expr_0_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getString_expressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleconstant_expression
entryRuleconstant_expression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstant_expressionRule()); }
	 iv_ruleconstant_expression=ruleconstant_expression 
	 { $current=$iv_ruleconstant_expression.current; } 
	 EOF 
;

// Rule constant_expression
ruleconstant_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConstant_expressionAccess().getExpressionParserRuleCall()); 
    }
    this_expression_0=ruleexpression
    {
        $current = $this_expression_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getNameXExpressionParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleXLiteral
entryRuleXLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXLiteralRule()); }
	 iv_ruleXLiteral=ruleXLiteral 
	 { $current=$iv_ruleXLiteral.current; } 
	 EOF 
;

// Rule XLiteral
ruleXLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXCollectionLiteralParserRuleCall_0()); 
    }
    this_XCollectionLiteral_0=ruleXCollectionLiteral
    {
        $current = $this_XCollectionLiteral_0.current;
        afterParserOrEnumRuleCall();
    }

    |((((
)
LeftSquareBracket
))=>
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXClosureParserRuleCall_1()); 
    }
    this_XClosure_1=ruleXClosure
    {
        $current = $this_XClosure_1.current;
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXBooleanLiteralParserRuleCall_2()); 
    }
    this_XBooleanLiteral_2=ruleXBooleanLiteral
    {
        $current = $this_XBooleanLiteral_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXNumberLiteralParserRuleCall_3()); 
    }
    this_XNumberLiteral_3=ruleXNumberLiteral
    {
        $current = $this_XNumberLiteral_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXNullLiteralParserRuleCall_4()); 
    }
    this_XNullLiteral_4=ruleXNullLiteral
    {
        $current = $this_XNullLiteral_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXStringLiteralParserRuleCall_5()); 
    }
    this_XStringLiteral_5=ruleXStringLiteral
    {
        $current = $this_XStringLiteral_5.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXTypeLiteralParserRuleCall_6()); 
    }
    this_XTypeLiteral_6=ruleXTypeLiteral
    {
        $current = $this_XTypeLiteral_6.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getElement_referenceParserRuleCall_7()); 
    }
    this_element_reference_7=ruleelement_reference
    {
        $current = $this_element_reference_7.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMCSAnnexSubclause
entryRuleMCSAnnexSubclause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSAnnexSubclauseRule()); }
	 iv_ruleMCSAnnexSubclause=ruleMCSAnnexSubclause 
	 { $current=$iv_ruleMCSAnnexSubclause.current; } 
	 EOF 
;

// Rule MCSAnnexSubclause
ruleMCSAnnexSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMCSAnnexSubclauseAccess().getMCSAnnexSubclauseAction_0(),
            $current);
    }
)(
	otherlv_1=Types
    {
    	newLeafNode(otherlv_1, grammarAccess.getMCSAnnexSubclauseAccess().getTypesKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexSubclauseAccess().getTypesType_declarationParserRuleCall_1_1_0()); 
	    }
		lv_types_2_0=ruletype_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"type_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_3=Constants
    {
    	newLeafNode(otherlv_3, grammarAccess.getMCSAnnexSubclauseAccess().getConstantsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexSubclauseAccess().getConstantsConstant_declarationParserRuleCall_2_1_0()); 
	    }
		lv_constants_4_0=ruleconstant_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_4_0, 
        		"constant_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_5=Functions
    {
    	newLeafNode(otherlv_5, grammarAccess.getMCSAnnexSubclauseAccess().getFunctionsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexSubclauseAccess().getFunctionsFunction_declarationParserRuleCall_3_1_0()); 
	    }
		lv_functions_6_0=rulefunction_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_6_0, 
        		"function_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?(
	otherlv_7=Theorems
    {
    	newLeafNode(otherlv_7, grammarAccess.getMCSAnnexSubclauseAccess().getTheoremsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexSubclauseAccess().getTheoremsTheorem_declarationParserRuleCall_4_1_0()); 
	    }
		lv_theorems_8_0=ruletheorem_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"theorems",
        		lv_theorems_8_0, 
        		"theorem_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+)((
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexSubclauseAccess().getEnforceclausesClassifierEnforceParserRuleCall_5_0_0()); 
	    }
		lv_enforceclauses_9_0=ruleClassifierEnforce		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"enforceclauses",
        		lv_enforceclauses_9_0, 
        		"ClassifierEnforce");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSAnnexSubclauseAccess().getEnforceclausesClassifierEnforceParserRuleCall_5_1_0()); 
	    }
		lv_enforceclauses_10_0=ruleClassifierEnforce		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"enforceclauses",
        		lv_enforceclauses_10_0, 
        		"ClassifierEnforce");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleClassifierEnforce
entryRuleClassifierEnforce returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getClassifierEnforceRule()); }
	 iv_ruleClassifierEnforce=ruleClassifierEnforce 
	 { $current=$iv_ruleClassifierEnforce.current; } 
	 EOF 
;

// Rule ClassifierEnforce
ruleClassifierEnforce returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Enforce
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassifierEnforceAccess().getEnforceKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassifierEnforceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getClassifierEnforceAccess().getViewpointMCSViewpointCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierEnforceAccess().getScriptClassifierScriptParserRuleCall_2_0()); 
	    }
		lv_script_2_0=ruleClassifierScript		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierEnforceRule());
	        }
       		set(
       			$current, 
       			"script",
        		lv_script_2_0, 
        		"ClassifierScript");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassifierEnforceAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleClassifierScript
entryRuleClassifierScript returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getClassifierScriptRule()); }
	 iv_ruleClassifierScript=ruleClassifierScript 
	 { $current=$iv_ruleClassifierScript.current; } 
	 EOF 
;

// Rule ClassifierScript
ruleClassifierScript returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Script
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassifierScriptAccess().getScriptKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierScriptAccess().getC_blockConstraintsBlockParserRuleCall_1_0()); 
	    }
		lv_c_block_1_0=ruleConstraintsBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierScriptRule());
	        }
       		add(
       			$current, 
       			"c_block",
        		lv_c_block_1_0, 
        		"ConstraintsBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_2=Endscript
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassifierScriptAccess().getEndscriptKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassifierScriptAccess().getRefViewpointReferenceParserRuleCall_3_0()); 
	    }
		lv_ref_3_0=ruleViewpointReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassifierScriptRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_3_0, 
        		"ViewpointReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Semicolon
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassifierScriptAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulefunction_declaration
entryRulefunction_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunction_declarationRule()); }
	 iv_rulefunction_declaration=rulefunction_declaration 
	 { $current=$iv_rulefunction_declaration.current; } 
	 EOF 
;

// Rule function_declaration
rulefunction_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunction_declarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunction_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)((
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunction_declarationAccess().getLeftParenthesisKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getArgArgumentParserRuleCall_1_0_1_0()); 
	    }
		lv_arg_2_0=ruleargument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		add(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"argument");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunction_declarationAccess().getCommaKeyword_1_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getArgArgumentParserRuleCall_1_0_2_1_0()); 
	    }
		lv_arg_4_0=ruleargument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		add(
       			$current, 
       			"arg",
        		lv_arg_4_0, 
        		"argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunction_declarationAccess().getRightParenthesisKeyword_1_0_3());
    }
(
	otherlv_6=Returns
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunction_declarationAccess().getReturnsKeyword_1_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getOutType_expressionParserRuleCall_1_0_4_1_0()); 
	    }
		lv_out_7_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		set(
       			$current, 
       			"out",
        		lv_out_7_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
	otherlv_8=Colon
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunction_declarationAccess().getColonKeyword_1_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getFtypeUnnamedFunctionTypeParserRuleCall_1_1_1_0_0()); 
	    }
		lv_ftype_9_0=ruleUnnamedFunctionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		set(
       			$current, 
       			"ftype",
        		lv_ftype_9_0, 
        		"UnnamedFunctionType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunction_declarationRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getFunction_declarationAccess().getTyperefType_declarationCrossReference_1_1_1_1_0()); 
	}

)
))))
	otherlv_11=ColonEqualsSign
    {
    	newLeafNode(otherlv_11, grammarAccess.getFunction_declarationAccess().getColonEqualsSignKeyword_2());
    }
(((((
)
LeftSquareBracket
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getClosureMCSClosureParserRuleCall_3_0_0()); 
	    }
		lv_closure_12_0=ruleMCSClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		set(
       			$current, 
       			"closure",
        		lv_closure_12_0, 
        		"MCSClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunction_declarationAccess().getExp_bodyXExpressionParserRuleCall_3_1_0()); 
	    }
		lv_exp_body_13_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunction_declarationRule());
	        }
       		set(
       			$current, 
       			"exp_body",
        		lv_exp_body_13_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_14=Semicolon
    {
    	newLeafNode(otherlv_14, grammarAccess.getFunction_declarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleargument
entryRuleargument returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleargument=ruleargument 
	 { $current=$iv_ruleargument.current; } 
	 EOF 
;

// Rule argument
ruleargument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentAccess().getArgumentAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getArgumentAccess().getColonKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getArg_typeType_expressionParserRuleCall_2_1_0()); 
	    }
		lv_arg_type_3_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"arg_type",
        		lv_arg_type_3_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMCSClosure
entryRuleMCSClosure returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMCSClosureRule()); }
	 iv_ruleMCSClosure=ruleMCSClosure 
	 { $current=$iv_ruleMCSClosure.current; } 
	 EOF 
;

// Rule MCSClosure
ruleMCSClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)
LeftSquareBracket
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMCSClosureAccess().getMCSClosureAction_0_0_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getMCSClosureAccess().getLeftSquareBracketKeyword_0_0_1());
    }
))(((((
(
ruleargument
)
)(
Comma
(
(
ruleargument
)
))*)?(
(

VerticalLine


)
)))=>(((
(
		{ 
	        newCompositeNode(grammarAccess.getMCSClosureAccess().getDeclaredFormalParametersArgumentParserRuleCall_1_0_0_0_0()); 
	    }
		lv_declaredFormalParameters_2_0=ruleargument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_2_0, 
        		"argument");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getMCSClosureAccess().getCommaKeyword_1_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSClosureAccess().getDeclaredFormalParametersArgumentParserRuleCall_1_0_0_1_1_0()); 
	    }
		lv_declaredFormalParameters_4_0=ruleargument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_4_0, 
        		"argument");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_5_0=
	VerticalLine
    {
        newLeafNode(lv_explicitSyntax_5_0, grammarAccess.getMCSClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMCSClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getMCSClosureAccess().getExpressionXExpressionInClosureParserRuleCall_2_0()); 
	    }
		lv_expression_6_0=ruleXExpressionInClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMCSClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"XExpressionInClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=RightSquareBracket
    {
    	newLeafNode(otherlv_7, grammarAccess.getMCSClosureAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuletheorem_declaration
entryRuletheorem_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTheorem_declarationRule()); }
	 iv_ruletheorem_declaration=ruletheorem_declaration 
	 { $current=$iv_ruletheorem_declaration.current; } 
	 EOF 
;

// Rule theorem_declaration
ruletheorem_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Theorem
    {
    	newLeafNode(otherlv_0, grammarAccess.getTheorem_declarationAccess().getTheoremKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTheorem_declarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTheorem_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_declarationAccess().getMlIn_modes_listParserRuleCall_2_0()); 
	    }
		lv_ml_2_0=rulein_modes_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_declarationRule());
	        }
       		set(
       			$current, 
       			"ml",
        		true, 
        		"in_modes_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_declarationAccess().getLocalsLocal_declarationParserRuleCall_3_0()); 
	    }
		lv_locals_3_0=rulelocal_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_declarationRule());
	        }
       		add(
       			$current, 
       			"locals",
        		lv_locals_3_0, 
        		"local_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_declarationAccess().getStatementsTheorem_statementParserRuleCall_4_0()); 
	    }
		lv_statements_4_0=ruletheorem_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_declarationRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"theorem_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=End
    {
    	newLeafNode(otherlv_5, grammarAccess.getTheorem_declarationAccess().getEndKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTheorem_declarationRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getTheorem_declarationAccess().getEndnameTheorem_declarationCrossReference_6_0()); 
	}

)
)
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getTheorem_declarationAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRulein_modes_list
entryRulein_modes_list returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIn_modes_listRule()); }
	 iv_rulein_modes_list=rulein_modes_list 
	 { $current=$iv_rulein_modes_list.current; } 
	 EOF 
;

// Rule in_modes_list
rulein_modes_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=In
    {
    	newLeafNode(otherlv_0, grammarAccess.getIn_modes_listAccess().getInKeyword_0());
    }

	otherlv_1=Modes
    {
    	newLeafNode(otherlv_1, grammarAccess.getIn_modes_listAccess().getModesKeyword_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getIn_modes_listAccess().getLeftParenthesisKeyword_2());
    }
(
(
		lv_modes_3_0=RULE_ID
		{
			newLeafNode(lv_modes_3_0, grammarAccess.getIn_modes_listAccess().getModesIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIn_modes_listRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"modes",
        		lv_modes_3_0, 
        		"ID");
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getIn_modes_listAccess().getCommaKeyword_4_0());
    }
(
(
		lv_modes_5_0=RULE_ID
		{
			newLeafNode(lv_modes_5_0, grammarAccess.getIn_modes_listAccess().getModesIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIn_modes_listRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"modes",
        		lv_modes_5_0, 
        		"ID");
	    }

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getIn_modes_listAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRulelocal_declaration
entryRulelocal_declaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLocal_declarationRule()); }
	 iv_rulelocal_declaration=rulelocal_declaration 
	 { $current=$iv_rulelocal_declaration.current; } 
	 EOF 
;

// Rule local_declaration
rulelocal_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_const_0_0=
	Const
    {
        newLeafNode(lv_const_0_0, grammarAccess.getLocal_declarationAccess().getConstConstKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocal_declarationRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocal_declarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocal_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocal_declarationAccess().getTypeType_expressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocal_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_3=ColonEqualsSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocal_declarationAccess().getColonEqualsSignKeyword_3());
    }
(((((
)
LeftSquareBracket
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getLocal_declarationAccess().getLeft_exprMCSClosureParserRuleCall_4_0_0()); 
	    }
		lv_left_expr_4_0=ruleMCSClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocal_declarationRule());
	        }
       		set(
       			$current, 
       			"left_expr",
        		lv_left_expr_4_0, 
        		"MCSClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLocal_declarationAccess().getLeft_exprConstant_expressionParserRuleCall_4_1_0()); 
	    }
		lv_left_expr_5_0=ruleconstant_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocal_declarationRule());
	        }
       		set(
       			$current, 
       			"left_expr",
        		lv_left_expr_5_0, 
        		"constant_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getLocal_declarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuletheorem_statement
entryRuletheorem_statement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTheorem_statementRule()); }
	 iv_ruletheorem_statement=ruletheorem_statement 
	 { $current=$iv_ruletheorem_statement.current; } 
	 EOF 
;

// Rule theorem_statement
ruletheorem_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTheorem_statementAccess().getStatementCheck_statementParserRuleCall_0()); 
	    }
		lv_statement_0_0=rulecheck_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTheorem_statementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_0_0, 
        		"check_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuletype_expression
entryRuletype_expression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getType_expressionRule()); }
	 iv_ruletype_expression=ruletype_expression 
	 { $current=$iv_ruletype_expression.current; } 
	 EOF 
;

// Rule type_expression
ruletype_expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
rulebasic_type
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getType_expressionAccess().getBasicBasic_typeParserRuleCall_0_0()); 
	    }
		lv_basic_0_0=rulebasic_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_expressionRule());
	        }
       		set(
       			$current, 
       			"basic",
        		lv_basic_0_0, 
        		"basic_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getType_expressionAccess().getCompositeComposite_typeParserRuleCall_1_0()); 
	    }
		lv_composite_1_0=rulecomposite_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_expressionRule());
	        }
       		set(
       			$current, 
       			"composite",
        		lv_composite_1_0, 
        		"composite_type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getType_expressionAccess().getElementElement_typeParserRuleCall_2_0()); 
	    }
		lv_element_2_0=ruleelement_type		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_expressionRule());
	        }
       		set(
       			$current, 
       			"element",
        		lv_element_2_0, 
        		"element_type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulebasic_type
entryRulebasic_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBasic_typeRule()); }
	 iv_rulebasic_type=rulebasic_type 
	 { $current=$iv_rulebasic_type.current; } 
	 EOF 
;

// Rule basic_type
rulebasic_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getBoolUnnamedBooleanTypeParserRuleCall_0_0()); 
	    }
		lv_bool_0_0=ruleUnnamedBooleanType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"bool",
        		lv_bool_0_0, 
        		"UnnamedBooleanType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getStringUnnamedStringTypeParserRuleCall_1_0()); 
	    }
		lv_string_1_0=ruleUnnamedStringType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"string",
        		lv_string_1_0, 
        		"UnnamedStringType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getEnumerUnnamedEnumerationTypeParserRuleCall_2_0()); 
	    }
		lv_enumer_2_0=ruleUnnamedEnumerationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"enumer",
        		lv_enumer_2_0, 
        		"UnnamedEnumerationType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getUnitsUnnamedUnitsTypeParserRuleCall_3_0()); 
	    }
		lv_units_3_0=ruleUnnamedUnitsType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"units",
        		lv_units_3_0, 
        		"UnnamedUnitsType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getIntegerUnnamedIntegerTypeParserRuleCall_4_0()); 
	    }
		lv_integer_4_0=ruleUnnamedIntegerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"integer",
        		lv_integer_4_0, 
        		"UnnamedIntegerType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getRealUnnamedRealTypeParserRuleCall_5_0()); 
	    }
		lv_real_5_0=ruleUnnamedRealType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"real",
        		lv_real_5_0, 
        		"UnnamedRealType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getRangeUnnamedRangeTypeParserRuleCall_6_0()); 
	    }
		lv_range_6_0=ruleUnnamedRangeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_6_0, 
        		"UnnamedRangeType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getClassUnnamedClassifierTypeParserRuleCall_7_0()); 
	    }
		lv_class_7_0=ruleUnnamedClassifierType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_7_0, 
        		"UnnamedClassifierType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getRefUnnamedReferenceTypeParserRuleCall_8_0()); 
	    }
		lv_ref_8_0=ruleUnnamedReferenceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_8_0, 
        		"UnnamedReferenceType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBasic_typeAccess().getFuncUnnamedFunctionTypeParserRuleCall_9_0()); 
	    }
		lv_func_9_0=ruleUnnamedFunctionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasic_typeRule());
	        }
       		set(
       			$current, 
       			"func",
        		lv_func_9_0, 
        		"UnnamedFunctionType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasic_typeRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getBasic_typeAccess().getTypenameType_declarationCrossReference_10_0()); 
	}

)
))
;





// Entry rule entryRuleUnnamedFunctionType
entryRuleUnnamedFunctionType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedFunctionTypeRule()); }
	 iv_ruleUnnamedFunctionType=ruleUnnamedFunctionType 
	 { $current=$iv_ruleUnnamedFunctionType.current; } 
	 EOF 
;

// Rule UnnamedFunctionType
ruleUnnamedFunctionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftParenthesis
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnnamedFunctionTypeAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedFunctionTypeAccess().getParmType_expressionParserRuleCall_1_0()); 
	    }
		lv_parm_1_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedFunctionTypeRule());
	        }
       		add(
       			$current, 
       			"parm",
        		lv_parm_1_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedFunctionTypeAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedFunctionTypeAccess().getParmType_expressionParserRuleCall_2_1_0()); 
	    }
		lv_parm_3_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedFunctionTypeRule());
	        }
       		add(
       			$current, 
       			"parm",
        		lv_parm_3_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))+
	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnnamedFunctionTypeAccess().getRightParenthesisKeyword_3());
    }
((
(
		lv_outspec_5_0=
	Returns
    {
        newLeafNode(lv_outspec_5_0, grammarAccess.getUnnamedFunctionTypeAccess().getOutspecReturnsKeyword_4_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnnamedFunctionTypeRule());
	        }
       		setWithLastConsumed($current, "outspec", true, "returns");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedFunctionTypeAccess().getResultType_expressionParserRuleCall_4_1_0()); 
	    }
		lv_result_6_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedFunctionTypeRule());
	        }
       		set(
       			$current, 
       			"result",
        		lv_result_6_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleUnnamedBooleanType
entryRuleUnnamedBooleanType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedBooleanTypeRule()); }
	 iv_ruleUnnamedBooleanType=ruleUnnamedBooleanType 
	 { $current=$iv_ruleUnnamedBooleanType.current; } 
	 EOF 
;

// Rule UnnamedBooleanType
ruleUnnamedBooleanType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedBooleanTypeAccess().getAadlBooleanAction_0(),
            $current);
    }
)
	otherlv_1=Aadlboolean
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedBooleanTypeAccess().getAadlbooleanKeyword_1());
    }
)
;





// Entry rule entryRuleUnnamedStringType
entryRuleUnnamedStringType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedStringTypeRule()); }
	 iv_ruleUnnamedStringType=ruleUnnamedStringType 
	 { $current=$iv_ruleUnnamedStringType.current; } 
	 EOF 
;

// Rule UnnamedStringType
ruleUnnamedStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedStringTypeAccess().getAadlStringAction_0(),
            $current);
    }
)
	otherlv_1=Aadlstring
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedStringTypeAccess().getAadlstringKeyword_1());
    }
)
;





// Entry rule entryRuleUnnamedEnumerationType
entryRuleUnnamedEnumerationType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedEnumerationTypeRule()); }
	 iv_ruleUnnamedEnumerationType=ruleUnnamedEnumerationType 
	 { $current=$iv_ruleUnnamedEnumerationType.current; } 
	 EOF 
;

// Rule UnnamedEnumerationType
ruleUnnamedEnumerationType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Enumeration
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnnamedEnumerationTypeAccess().getEnumerationKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedEnumerationTypeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedEnumerationTypeAccess().getOwnedLiteralEnumerationLiteralParserRuleCall_2_0()); 
	    }
		lv_ownedLiteral_2_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedEnumerationTypeRule());
	        }
       		add(
       			$current, 
       			"ownedLiteral",
        		lv_ownedLiteral_2_0, 
        		"EnumerationLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnnamedEnumerationTypeAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedEnumerationTypeAccess().getOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0()); 
	    }
		lv_ownedLiteral_4_0=ruleEnumerationLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedEnumerationTypeRule());
	        }
       		add(
       			$current, 
       			"ownedLiteral",
        		lv_ownedLiteral_4_0, 
        		"EnumerationLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnnamedEnumerationTypeAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getEnumerationLiteralRule()); }
	 iv_ruleEnumerationLiteral=ruleEnumerationLiteral 
	 { $current=$iv_ruleEnumerationLiteral.current; } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumerationLiteralAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumerationLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleUnnamedUnitsType
entryRuleUnnamedUnitsType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedUnitsTypeRule()); }
	 iv_ruleUnnamedUnitsType=ruleUnnamedUnitsType 
	 { $current=$iv_ruleUnnamedUnitsType.current; } 
	 EOF 
;

// Rule UnnamedUnitsType
ruleUnnamedUnitsType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Units
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnnamedUnitsTypeAccess().getUnitsKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedUnitsTypeAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedUnitsTypeAccess().getOwnedLiteralUnitLiteralParserRuleCall_2_0()); 
	    }
		lv_ownedLiteral_2_0=ruleUnitLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedUnitsTypeRule());
	        }
       		add(
       			$current, 
       			"ownedLiteral",
        		lv_ownedLiteral_2_0, 
        		"UnitLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnnamedUnitsTypeAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedUnitsTypeAccess().getOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0()); 
	    }
		lv_ownedLiteral_4_0=ruleUnitLiteralConversion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedUnitsTypeRule());
	        }
       		add(
       			$current, 
       			"ownedLiteral",
        		lv_ownedLiteral_4_0, 
        		"UnitLiteralConversion");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnnamedUnitsTypeAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleUnitLiteral
entryRuleUnitLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnitLiteralRule()); }
	 iv_ruleUnitLiteral=ruleUnitLiteral 
	 { $current=$iv_ruleUnitLiteral.current; } 
	 EOF 
;

// Rule UnitLiteral
ruleUnitLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnitLiteralAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleUnitLiteralConversion
entryRuleUnitLiteralConversion returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnitLiteralConversionRule()); }
	 iv_ruleUnitLiteralConversion=ruleUnitLiteralConversion 
	 { $current=$iv_ruleUnitLiteralConversion.current; } 
	 EOF 
;

// Rule UnitLiteralConversion
ruleUnitLiteralConversion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUnitLiteralConversionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitLiteralConversionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnitLiteralConversionAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitLiteralConversionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getUnitLiteralConversionAccess().getBaseUnitUnitLiteralCrossReference_2_0()); 
	}

)
)
	otherlv_3=Asterisk
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnitLiteralConversionAccess().getAsteriskKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitLiteralConversionAccess().getFactorNumberValueParserRuleCall_4_0()); 
	    }
		lv_factor_4_0=ruleNumberValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitLiteralConversionRule());
	        }
       		set(
       			$current, 
       			"factor",
        		lv_factor_4_0, 
        		"NumberValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	 iv_ruleNumberValue=ruleNumberValue 
	 { $current=$iv_ruleNumberValue.current; } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberValueAccess().getRealLitParserRuleCall_0()); 
    }
    this_RealLit_0=ruleRealLit
    {
        $current = $this_RealLit_0.current;
        afterParserOrEnumRuleCall();
    }

    |((ruleIntegerLit)=>
    { 
        newCompositeNode(grammarAccess.getNumberValueAccess().getIntegerLitParserRuleCall_1()); 
    }
    this_IntegerLit_1=ruleIntegerLit
    {
        $current = $this_IntegerLit_1.current;
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleRealLit
entryRuleRealLit returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealLitRule()); }
	 iv_ruleRealLit=ruleRealLit 
	 { $current=$iv_ruleRealLit.current; } 
	 EOF 
;

// Rule RealLit
ruleRealLit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRealLitAccess().getValueSignedRealParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleSignedReal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealLitRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedReal");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIntegerLit
entryRuleIntegerLit returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerLitRule()); }
	 iv_ruleIntegerLit=ruleIntegerLit 
	 { $current=$iv_ruleIntegerLit.current; } 
	 EOF 
;

// Rule IntegerLit
ruleIntegerLit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLitAccess().getValueSignedIntParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLitRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSignedInt
entryRuleSignedInt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSignedIntRule()); } 
	 iv_ruleSignedInt=ruleSignedInt 
	 { $current=$iv_ruleSignedInt.current.getText(); }  
	 EOF 
;

// Rule SignedInt
ruleSignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntAccess().getHyphenMinusKeyword_0_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getSignedIntAccess().getNumberParserRuleCall_1()); 
    }
    this_Number_2=ruleNumber    {
		$current.merge(this_Number_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSignedReal
entryRuleSignedReal returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSignedRealRule()); } 
	 iv_ruleSignedReal=ruleSignedReal 
	 { $current=$iv_ruleSignedReal.current.getText(); }  
	 EOF 
;

// Rule SignedReal
ruleSignedReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedRealAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedRealAccess().getHyphenMinusKeyword_0_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getSignedRealAccess().getNumberParserRuleCall_1()); 
    }
    this_Number_2=ruleNumber    {
		$current.merge(this_Number_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleUnnamedIntegerType
entryRuleUnnamedIntegerType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedIntegerTypeRule()); }
	 iv_ruleUnnamedIntegerType=ruleUnnamedIntegerType 
	 { $current=$iv_ruleUnnamedIntegerType.current; } 
	 EOF 
;

// Rule UnnamedIntegerType
ruleUnnamedIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedIntegerTypeAccess().getAadlIntegerAction_0(),
            $current);
    }
)
	otherlv_1=Aadlinteger
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedIntegerTypeAccess().getAadlintegerKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedIntegerTypeAccess().getRangeIntegerRangeParserRuleCall_2_0()); 
	    }
		lv_range_2_0=ruleIntegerRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedIntegerTypeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"IntegerRange");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedIntegerTypeAccess().getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0()); 
	    }
		lv_ownedUnitsType_3_0=ruleUnnamedUnitsType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedIntegerTypeRule());
	        }
       		set(
       			$current, 
       			"ownedUnitsType",
        		lv_ownedUnitsType_3_0, 
        		"UnnamedUnitsType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
	otherlv_4=Units
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnnamedIntegerTypeAccess().getUnitsKeyword_3_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnnamedIntegerTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUnnamedIntegerTypeAccess().getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleIntegerRange
entryRuleIntegerRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerRangeRule()); }
	 iv_ruleIntegerRange=ruleIntegerRange 
	 { $current=$iv_ruleIntegerRange.current; } 
	 EOF 
;

// Rule IntegerRange
ruleIntegerRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getLowerBoundIntegerTermParserRuleCall_0_0_0()); 
	    }
		lv_lowerBound_0_1=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_1, 
        		"IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getLowerBoundSignedConstantParserRuleCall_0_0_1()); 
	    }
		lv_lowerBound_0_2=ruleSignedConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_2, 
        		"SignedConstant");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getLowerBoundConstantValueParserRuleCall_0_0_2()); 
	    }
		lv_lowerBound_0_3=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_3, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerRangeAccess().getFullStopFullStopKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getUpperBoundIntegerTermParserRuleCall_2_0_0()); 
	    }
		lv_upperBound_2_1=ruleIntegerTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_1, 
        		"IntegerTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getUpperBoundSignedConstantParserRuleCall_2_0_1()); 
	    }
		lv_upperBound_2_2=ruleSignedConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_2, 
        		"SignedConstant");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getUpperBoundConstantValueParserRuleCall_2_0_2()); 
	    }
		lv_upperBound_2_3=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_3, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleIntegerTerm
entryRuleIntegerTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerTermRule()); }
	 iv_ruleIntegerTerm=ruleIntegerTerm 
	 { $current=$iv_ruleIntegerTerm.current; } 
	 EOF 
;

// Rule IntegerTerm
ruleIntegerTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerTermAccess().getValueSignedIntParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleSignedConstant
entryRuleSignedConstant returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignedConstantRule()); }
	 iv_ruleSignedConstant=ruleSignedConstant 
	 { $current=$iv_ruleSignedConstant.current; } 
	 EOF 
;

// Rule SignedConstant
ruleSignedConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOpPlusMinusParserRuleCall_0_0()); 
	    }
		lv_op_0_0=rulePlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionConstantValueParserRuleCall_1_0()); 
	    }
		lv_ownedPropertyExpression_1_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		add(
       			$current, 
       			"ownedPropertyExpression",
        		lv_ownedPropertyExpression_1_0, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); } 
	 iv_rulePlusMinus=rulePlusMinus 
	 { $current=$iv_rulePlusMinus.current.getText(); }  
	 EOF 
;

// Rule PlusMinus
rulePlusMinus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); }
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current; } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantValueRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUnnamedRealType
entryRuleUnnamedRealType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedRealTypeRule()); }
	 iv_ruleUnnamedRealType=ruleUnnamedRealType 
	 { $current=$iv_ruleUnnamedRealType.current; } 
	 EOF 
;

// Rule UnnamedRealType
ruleUnnamedRealType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedRealTypeAccess().getAadlRealAction_0(),
            $current);
    }
)
	otherlv_1=Aadlreal
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedRealTypeAccess().getAadlrealKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRealTypeAccess().getRangeRealRangeParserRuleCall_2_0()); 
	    }
		lv_range_2_0=ruleRealRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedRealTypeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"RealRange");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRealTypeAccess().getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0()); 
	    }
		lv_ownedUnitsType_3_0=ruleUnnamedUnitsType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedRealTypeRule());
	        }
       		set(
       			$current, 
       			"ownedUnitsType",
        		lv_ownedUnitsType_3_0, 
        		"UnnamedUnitsType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
	otherlv_4=Units
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnnamedRealTypeAccess().getUnitsKeyword_3_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnnamedRealTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRealTypeAccess().getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleRealRange
entryRuleRealRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealRangeRule()); }
	 iv_ruleRealRange=ruleRealRange 
	 { $current=$iv_ruleRealRange.current; } 
	 EOF 
;

// Rule RealRange
ruleRealRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getLowerBoundRealTermParserRuleCall_0_0_0()); 
	    }
		lv_lowerBound_0_1=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_1, 
        		"RealTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getLowerBoundSignedConstantParserRuleCall_0_0_1()); 
	    }
		lv_lowerBound_0_2=ruleSignedConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_2, 
        		"SignedConstant");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getLowerBoundConstantValueParserRuleCall_0_0_2()); 
	    }
		lv_lowerBound_0_3=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_3, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getRealRangeAccess().getFullStopFullStopKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getUpperBoundRealTermParserRuleCall_2_0_0()); 
	    }
		lv_upperBound_2_1=ruleRealTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_1, 
        		"RealTerm");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getUpperBoundSignedConstantParserRuleCall_2_0_1()); 
	    }
		lv_upperBound_2_2=ruleSignedConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_2, 
        		"SignedConstant");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRealRangeAccess().getUpperBoundConstantValueParserRuleCall_2_0_2()); 
	    }
		lv_upperBound_2_3=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_3, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleRealTerm
entryRuleRealTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealTermRule()); }
	 iv_ruleRealTerm=ruleRealTerm 
	 { $current=$iv_ruleRealTerm.current; } 
	 EOF 
;

// Rule RealTerm
ruleRealTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRealTermAccess().getValueSignedRealParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleSignedReal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedReal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRealTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleUnnamedRangeType
entryRuleUnnamedRangeType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedRangeTypeRule()); }
	 iv_ruleUnnamedRangeType=ruleUnnamedRangeType 
	 { $current=$iv_ruleUnnamedRangeType.current; } 
	 EOF 
;

// Rule UnnamedRangeType
ruleUnnamedRangeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedRangeTypeAccess().getRangeTypeAction_0(),
            $current);
    }
)
	otherlv_1=Range
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedRangeTypeAccess().getRangeKeyword_1());
    }

	otherlv_2=Of
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedRangeTypeAccess().getOfKeyword_2());
    }
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRangeTypeAccess().getOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_3_0_0_0()); 
	    }
		lv_ownedNumberType_3_1=ruleUnnamedIntegerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedRangeTypeRule());
	        }
       		set(
       			$current, 
       			"ownedNumberType",
        		lv_ownedNumberType_3_1, 
        		"UnnamedIntegerType");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getUnnamedRangeTypeAccess().getOwnedNumberTypeUnnamedRealTypeParserRuleCall_3_0_0_1()); 
	    }
		lv_ownedNumberType_3_2=ruleUnnamedRealType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedRangeTypeRule());
	        }
       		set(
       			$current, 
       			"ownedNumberType",
        		lv_ownedNumberType_3_2, 
        		"UnnamedRealType");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnnamedRangeTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getUnnamedRangeTypeAccess().getNumberTypeNumberTypeCrossReference_3_1_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleUnnamedClassifierType
entryRuleUnnamedClassifierType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedClassifierTypeRule()); }
	 iv_ruleUnnamedClassifierType=ruleUnnamedClassifierType 
	 { $current=$iv_ruleUnnamedClassifierType.current; } 
	 EOF 
;

// Rule UnnamedClassifierType
ruleUnnamedClassifierType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedClassifierTypeAccess().getClassifierTypeAction_0(),
            $current);
    }
)
	otherlv_1=Classifier
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnnamedClassifierTypeAccess().getClassifierKeyword_1());
    }
(
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedClassifierTypeAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedClassifierTypeAccess().getClassifierReferenceQMReferenceParserRuleCall_2_1_0()); 
	    }
		lv_classifierReference_3_0=ruleQMReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedClassifierTypeRule());
	        }
       		add(
       			$current, 
       			"classifierReference",
        		lv_classifierReference_3_0, 
        		"QMReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnnamedClassifierTypeAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedClassifierTypeAccess().getClassifierReferenceQMReferenceParserRuleCall_2_2_1_0()); 
	    }
		lv_classifierReference_5_0=ruleQMReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedClassifierTypeRule());
	        }
       		add(
       			$current, 
       			"classifierReference",
        		lv_classifierReference_5_0, 
        		"QMReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnnamedClassifierTypeAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleUnnamedReferenceType
entryRuleUnnamedReferenceType returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnnamedReferenceTypeRule()); }
	 iv_ruleUnnamedReferenceType=ruleUnnamedReferenceType 
	 { $current=$iv_ruleUnnamedReferenceType.current; } 
	 EOF 
;

// Rule UnnamedReferenceType
ruleUnnamedReferenceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Reference
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnnamedReferenceTypeAccess().getReferenceKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnnamedReferenceTypeAccess().getReferenceTypeAction_1(),
            $current);
    }
)(
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnnamedReferenceTypeAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedReferenceTypeAccess().getNamedElementReferenceQMReferenceParserRuleCall_2_1_0()); 
	    }
		lv_namedElementReference_3_0=ruleQMReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedReferenceTypeRule());
	        }
       		add(
       			$current, 
       			"namedElementReference",
        		lv_namedElementReference_3_0, 
        		"QMReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnnamedReferenceTypeAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnnamedReferenceTypeAccess().getNamedElementReferenceQMReferenceParserRuleCall_2_2_1_0()); 
	    }
		lv_namedElementReference_5_0=ruleQMReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnnamedReferenceTypeRule());
	        }
       		add(
       			$current, 
       			"namedElementReference",
        		lv_namedElementReference_5_0, 
        		"QMReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnnamedReferenceTypeAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleQMReference
entryRuleQMReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQMReferenceRule()); }
	 iv_ruleQMReference=ruleQMReference 
	 { $current=$iv_ruleQMReference.current; } 
	 EOF 
;

// Rule QMReference
ruleQMReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=LeftCurlyBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getQMReferenceAccess().getLeftCurlyBracketKeyword_0_0());
    }
(
(
		lv_annexName_1_0=RULE_ID
		{
			newLeafNode(lv_annexName_1_0, grammarAccess.getQMReferenceAccess().getAnnexNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQMReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"annexName",
        		lv_annexName_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=RightCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getQMReferenceAccess().getRightCurlyBracketKeyword_0_2());
    }

	otherlv_3=Asterisk
    {
    	newLeafNode(otherlv_3, grammarAccess.getQMReferenceAccess().getAsteriskKeyword_0_3());
    }

	otherlv_4=Asterisk
    {
    	newLeafNode(otherlv_4, grammarAccess.getQMReferenceAccess().getAsteriskKeyword_0_4());
    }
)?(
(
		lv_metaclassName_5_0=RULE_ID
		{
			newLeafNode(lv_metaclassName_5_0, grammarAccess.getQMReferenceAccess().getMetaclassNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQMReferenceRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"metaclassName",
        		lv_metaclassName_5_0, 
        		"ID");
	    }

)
)+)
;







// Entry rule entryRulecomposite_type
entryRulecomposite_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComposite_typeRule()); }
	 iv_rulecomposite_type=rulecomposite_type 
	 { $current=$iv_rulecomposite_type.current; } 
	 EOF 
;

// Rule composite_type
rulecomposite_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getSet_typeParserRuleCall_0()); 
    }
    this_set_type_0=ruleset_type
    {
        $current = $this_set_type_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getList_typeParserRuleCall_1()); 
    }
    this_list_type_1=rulelist_type
    {
        $current = $this_list_type_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getMap_typeParserRuleCall_2()); 
    }
    this_map_type_2=rulemap_type
    {
        $current = $this_map_type_2.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getRecord_typeParserRuleCall_3()); 
    }
    this_record_type_3=rulerecord_type
    {
        $current = $this_record_type_3.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComposite_typeAccess().getUnion_typeParserRuleCall_4()); 
    }
    this_union_type_4=ruleunion_type
    {
        $current = $this_union_type_4.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleset_type
entryRuleset_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSet_typeRule()); }
	 iv_ruleset_type=ruleset_type 
	 { $current=$iv_ruleset_type.current; } 
	 EOF 
;

// Rule set_type
ruleset_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Set
    {
    	newLeafNode(otherlv_0, grammarAccess.getSet_typeAccess().getSetKeyword_0());
    }

	otherlv_1=Of
    {
    	newLeafNode(otherlv_1, grammarAccess.getSet_typeAccess().getOfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSet_typeAccess().getTypeType_expressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSet_typeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulelist_type
entryRulelist_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getList_typeRule()); }
	 iv_rulelist_type=rulelist_type 
	 { $current=$iv_rulelist_type.current; } 
	 EOF 
;

// Rule list_type
rulelist_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=List
    {
    	newLeafNode(otherlv_0, grammarAccess.getList_typeAccess().getListKeyword_0());
    }

	otherlv_1=Of
    {
    	newLeafNode(otherlv_1, grammarAccess.getList_typeAccess().getOfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList_typeAccess().getTypeType_expressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList_typeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulemap_type
entryRulemap_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getMap_typeRule()); }
	 iv_rulemap_type=rulemap_type 
	 { $current=$iv_rulemap_type.current; } 
	 EOF 
;

// Rule map_type
rulemap_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Map
    {
    	newLeafNode(otherlv_0, grammarAccess.getMap_typeAccess().getMapKeyword_0());
    }

	otherlv_1=Of
    {
    	newLeafNode(otherlv_1, grammarAccess.getMap_typeAccess().getOfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMap_typeAccess().getTypeType_expressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMap_typeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulerecord_type
entryRulerecord_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecord_typeRule()); }
	 iv_rulerecord_type=rulerecord_type 
	 { $current=$iv_rulerecord_type.current; } 
	 EOF 
;

// Rule record_type
rulerecord_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Record
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecord_typeAccess().getRecordKeyword_0());
    }

	otherlv_1=LeftParenthesisSpace
    {
    	newLeafNode(otherlv_1, grammarAccess.getRecord_typeAccess().getLeftParenthesisSpaceKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecord_typeAccess().getFieldId_type_pairParserRuleCall_2_0()); 
	    }
		lv_field_2_0=ruleid_type_pair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecord_typeRule());
	        }
       		add(
       			$current, 
       			"field",
        		lv_field_2_0, 
        		"id_type_pair");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getRecord_typeAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleunion_type
entryRuleunion_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getUnion_typeRule()); }
	 iv_ruleunion_type=ruleunion_type 
	 { $current=$iv_ruleunion_type.current; } 
	 EOF 
;

// Rule union_type
ruleunion_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftParenthesis
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnion_typeAccess().getLeftParenthesisKeyword_0());
    }
((
(
		lv_typename_1_0=RULE_ID
		{
			newLeafNode(lv_typename_1_0, grammarAccess.getUnion_typeAccess().getTypenameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnion_typeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"typename",
        		lv_typename_1_0, 
        		"ID");
	    }

)
)
	otherlv_2=Colon
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnion_typeAccess().getColonKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnion_typeAccess().getTypeType_expressionParserRuleCall_2_0()); 
	    }
		lv_type_3_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnion_typeRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnion_typeAccess().getCommaKeyword_3_0());
    }
((
(
		lv_typename_5_0=RULE_ID
		{
			newLeafNode(lv_typename_5_0, grammarAccess.getUnion_typeAccess().getTypenameIDTerminalRuleCall_3_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnion_typeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"typename",
        		lv_typename_5_0, 
        		"ID");
	    }

)
)
	otherlv_6=Colon
    {
    	newLeafNode(otherlv_6, grammarAccess.getUnion_typeAccess().getColonKeyword_3_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUnion_typeAccess().getTypeType_expressionParserRuleCall_3_2_0()); 
	    }
		lv_type_7_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnion_typeRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_7_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_8=RightParenthesis
    {
    	newLeafNode(otherlv_8, grammarAccess.getUnion_typeAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleid_type_pair
entryRuleid_type_pair returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getId_type_pairRule()); }
	 iv_ruleid_type_pair=ruleid_type_pair 
	 { $current=$iv_ruleid_type_pair.current; } 
	 EOF 
;

// Rule id_type_pair
ruleid_type_pair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getId_type_pairAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getId_type_pairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getId_type_pairAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getId_type_pairAccess().getTypeType_expressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruletype_expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getId_type_pairRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"type_expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleelement_type
entryRuleelement_type returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElement_typeRule()); }
	 iv_ruleelement_type=ruleelement_type 
	 { $current=$iv_ruleelement_type.current; } 
	 EOF 
;

// Rule element_type
ruleelement_type returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_telem_0_0=
	T_Element
    {
        newLeafNode(lv_telem_0_0, grammarAccess.getElement_typeAccess().getTelemT_ElementKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElement_typeRule());
	        }
       		setWithLastConsumed($current, "telem", true, "T_Element");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getElement_typeAccess().getT_classT_classifiersParserRuleCall_1_0()); 
	    }
		lv_t_class_1_0=rulet_classifiers		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElement_typeRule());
	        }
       		set(
       			$current, 
       			"t_class",
        		true, 
        		"t_classifiers");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getElement_typeAccess().getT_refT_named_referencesParserRuleCall_2_0()); 
	    }
		lv_t_ref_2_0=rulet_named_references		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElement_typeRule());
	        }
       		set(
       			$current, 
       			"t_ref",
        		true, 
        		"t_named_references");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulet_classifiers
entryRulet_classifiers returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_classifiersRule()); }
	 iv_rulet_classifiers=rulet_classifiers 
	 { $current=$iv_rulet_classifiers.current; } 
	 EOF 
;

// Rule t_classifiers
rulet_classifiers returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_class_0_0=
	T_Classifier
    {
        newLeafNode(lv_t_class_0_0, grammarAccess.getT_classifiersAccess().getT_classT_ClassifierKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifiersRule());
	        }
       		setWithLastConsumed($current, "t_class", true, "T_Classifier");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getT_classifiersAccess().getT_class_subtypeT_classifier_subtypesParserRuleCall_1_0()); 
	    }
		lv_t_class_subtype_1_0=rulet_classifier_subtypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getT_classifiersRule());
	        }
       		set(
       			$current, 
       			"t_class_subtype",
        		true, 
        		"t_classifier_subtypes");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulet_classifier_subtypes
entryRulet_classifier_subtypes returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_classifier_subtypesRule()); }
	 iv_rulet_classifier_subtypes=rulet_classifier_subtypes 
	 { $current=$iv_rulet_classifier_subtypes.current; } 
	 EOF 
;

// Rule t_classifier_subtypes
rulet_classifier_subtypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_t_ctype_0_0=
	T_Component_Type_Classifier
    {
        newLeafNode(lv_t_ctype_0_0, grammarAccess.getT_classifier_subtypesAccess().getT_ctypeT_Component_Type_ClassifierKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifier_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_ctype", true, "T_Component_Type_Classifier");
	    }

)
)
    |(
(
		lv_t_cimpl_1_0=
	T_Component_Impl_Classifier
    {
        newLeafNode(lv_t_cimpl_1_0, grammarAccess.getT_classifier_subtypesAccess().getT_cimplT_Component_Impl_ClassifierKeyword_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifier_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_cimpl", true, "T_Component_Impl_Classifier");
	    }

)
)
    |(
(
		lv_t_fgclass_2_0=
	T_Feature_Group_Classifier
    {
        newLeafNode(lv_t_fgclass_2_0, grammarAccess.getT_classifier_subtypesAccess().getT_fgclassT_Feature_Group_ClassifierKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifier_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_fgclass", true, "T_Feature_Group_Classifier");
	    }

)
)
    |(
(
		lv_t_annexclass_3_0=
	T_Annex_Classifier
    {
        newLeafNode(lv_t_annexclass_3_0, grammarAccess.getT_classifier_subtypesAccess().getT_annexclassT_Annex_ClassifierKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_classifier_subtypesRule());
	        }
       		setWithLastConsumed($current, "t_annexclass", true, "T_Annex_Classifier");
	    }

)
))
;





// Entry rule entryRulet_named_references
entryRulet_named_references returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getT_named_referencesRule()); }
	 iv_rulet_named_references=rulet_named_references 
	 { $current=$iv_rulet_named_references.current; } 
	 EOF 
;

// Rule t_named_references
rulet_named_references returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_t_nref_0_0=
	T_Named_Reference
    {
        newLeafNode(lv_t_nref_0_0, grammarAccess.getT_named_referencesAccess().getT_nrefT_Named_ReferenceKeyword_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getT_named_referencesRule());
	        }
       		setWithLastConsumed($current, "t_nref", true, "T_Named_Reference");
	    }

)
)
;





// Entry rule entryRuleFQCREF
entryRuleFQCREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFQCREFRule()); } 
	 iv_ruleFQCREF=ruleFQCREF 
	 { $current=$iv_ruleFQCREF.current.getText(); }  
	 EOF 
;

// Rule FQCREF
ruleFQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQCREFAccess().getColonColonKeyword_0_1()); 
    }
)+    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQCREFAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQCREFAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getFQCREFAccess().getIDTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleQCREF
entryRuleQCREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQCREFRule()); } 
	 iv_ruleQCREF=ruleQCREF 
	 { $current=$iv_ruleQCREF.current.getText(); }  
	 EOF 
;

// Rule QCREF
ruleQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); 
    }
)*    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleQPREF
entryRuleQPREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQPREFRule()); } 
	 iv_ruleQPREF=ruleQPREF 
	 { $current=$iv_ruleQPREF.current.getText(); }  
	 EOF 
;

// Rule QPREF
ruleQPREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQPREFAccess().getColonColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleXExpression
entryRuleXExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXExpressionRule()); }
	 iv_ruleXExpression=ruleXExpression 
	 { $current=$iv_ruleXExpression.current; } 
	 EOF 
;

// Rule XExpression
ruleXExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getXExpressionAccess().getXAssignmentParserRuleCall()); 
    }
    this_XAssignment_0=ruleXAssignment
    {
        $current = $this_XAssignment_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleXAssignment
entryRuleXAssignment returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXAssignmentRule()); }
	 iv_ruleXAssignment=ruleXAssignment 
	 { $current=$iv_ruleXAssignment.current; } 
	 EOF 
;

// Rule XAssignment
ruleXAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXAssignmentAccess().getXAssignmentAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getXAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); 
    }
ruleOpSingleAssign
    {
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getValueXAssignmentParserRuleCall_0_3_0()); 
	    }
		lv_value_3_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
    { 
        newCompositeNode(grammarAccess.getXAssignmentAccess().getXOrExpressionParserRuleCall_1_0()); 
    }
    this_XOrExpression_4=ruleXOrExpression
    {
        $current = $this_XOrExpression_4.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpMultiAssign
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
	    }
		ruleOpMultiAssign		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getRightOperandXAssignmentParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_7_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAssignmentRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_7_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleOpSingleAssign
entryRuleOpSingleAssign returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpSingleAssignRule()); } 
	 iv_ruleOpSingleAssign=ruleOpSingleAssign 
	 { $current=$iv_ruleOpSingleAssign.current.getText(); }  
	 EOF 
;

// Rule OpSingleAssign
ruleOpSingleAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleOpMultiAssign
entryRuleOpMultiAssign returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpMultiAssignRule()); } 
	 iv_ruleOpMultiAssign=ruleOpMultiAssign 
	 { $current=$iv_ruleOpMultiAssign.current.getText(); }  
	 EOF 
;

// Rule OpMultiAssign
ruleOpMultiAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=PlusSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); 
    }

    |
	kw=HyphenMinusEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); 
    }

    |
	kw=AsteriskEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); 
    }

    |
	kw=SolidusEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); 
    }

    |
	kw=PercentSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); 
    }

    |(
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_0()); 
    }

	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_1()); 
    }

	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getEqualsSignKeyword_5_2()); 
    }
)
    |(
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_0()); 
    }
(
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_1()); 
    }
)?
	kw=GreaterThanSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignEqualsSignKeyword_6_2()); 
    }
))
    ;





// Entry rule entryRuleXOrExpression
entryRuleXOrExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXOrExpressionRule()); }
	 iv_ruleXOrExpression=ruleXOrExpression 
	 { $current=$iv_ruleXOrExpression.current; } 
	 EOF 
;

// Rule XOrExpression
ruleXOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXOrExpressionAccess().getXAndExpressionParserRuleCall_0()); 
    }
    this_XAndExpression_0=ruleXAndExpression
    {
        $current = $this_XAndExpression_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpOr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXOrExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXOrExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpOr		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXOrExpressionAccess().getRightOperandXAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpOrRule()); } 
	 iv_ruleOpOr=ruleOpOr 
	 { $current=$iv_ruleOpOr.current.getText(); }  
	 EOF 
;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=VerticalLineVerticalLine 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); 
    }

    ;





// Entry rule entryRuleXAndExpression
entryRuleXAndExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXAndExpressionRule()); }
	 iv_ruleXAndExpression=ruleXAndExpression 
	 { $current=$iv_ruleXAndExpression.current; } 
	 EOF 
;

// Rule XAndExpression
ruleXAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXAndExpressionAccess().getXEqualityExpressionParserRuleCall_0()); 
    }
    this_XEqualityExpression_0=ruleXEqualityExpression
    {
        $current = $this_XEqualityExpression_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpAnd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAndExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAndExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpAnd		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAndExpressionAccess().getRightOperandXEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XEqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpAndRule()); } 
	 iv_ruleOpAnd=ruleOpAnd 
	 { $current=$iv_ruleOpAnd.current.getText(); }  
	 EOF 
;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=AmpersandAmpersand 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); 
    }

    ;





// Entry rule entryRuleXEqualityExpression
entryRuleXEqualityExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXEqualityExpressionRule()); }
	 iv_ruleXEqualityExpression=ruleXEqualityExpression 
	 { $current=$iv_ruleXEqualityExpression.current; } 
	 EOF 
;

// Rule XEqualityExpression
ruleXEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getXRelationalExpressionParserRuleCall_0()); 
    }
    this_XRelationalExpression_0=ruleXRelationalExpression
    {
        $current = $this_XRelationalExpression_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpEquality
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXEqualityExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpEquality		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getRightOperandXRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XRelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpEquality
entryRuleOpEquality returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpEqualityRule()); } 
	 iv_ruleOpEquality=ruleOpEquality 
	 { $current=$iv_ruleOpEquality.current.getText(); }  
	 EOF 
;

// Rule OpEquality
ruleOpEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=EqualsSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw=ExclamationMarkEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw=EqualsSignEqualsSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); 
    }

    |
	kw=ExclamationMarkEqualsSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXRelationalExpression
entryRuleXRelationalExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXRelationalExpressionRule()); }
	 iv_ruleXRelationalExpression=ruleXRelationalExpression 
	 { $current=$iv_ruleXRelationalExpression.current; } 
	 EOF 
;

// Rule XRelationalExpression
ruleXRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getXOtherOperatorExpressionParserRuleCall_0()); 
    }
    this_XOtherOperatorExpression_0=ruleXOtherOperatorExpression
    {
        $current = $this_XOtherOperatorExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((((((
)
Instanceof
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0(),
            $current);
    }
)
	otherlv_2=Instanceof
    {
    	newLeafNode(otherlv_2, grammarAccess.getXRelationalExpressionAccess().getInstanceofKeyword_1_0_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_0_1_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(
(
		ruleOpCompare
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXRelationalExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
	    }
		ruleOpCompare		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_6_0=ruleXOtherOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_6_0, 
        		"XOtherOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpCompareRule()); } 
	 iv_ruleOpCompare=ruleOpCompare 
	 { $current=$iv_ruleOpCompare.current.getText(); }  
	 EOF 
;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=GreaterThanSignEqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); 
    }

    |(
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); 
    }

	kw=EqualsSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); 
    }
)
    |
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXOtherOperatorExpression
entryRuleXOtherOperatorExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXOtherOperatorExpressionRule()); }
	 iv_ruleXOtherOperatorExpression=ruleXOtherOperatorExpression 
	 { $current=$iv_ruleXOtherOperatorExpression.current; } 
	 EOF 
;

// Rule XOtherOperatorExpression
ruleXOtherOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0()); 
    }
    this_XAdditiveExpression_0=ruleXAdditiveExpression
    {
        $current = $this_XAdditiveExpression_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpOther
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXOtherOperatorExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpOther		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XAdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOther
entryRuleOpOther returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpOtherRule()); } 
	 iv_ruleOpOther=ruleOpOther 
	 { $current=$iv_ruleOpOther.current.getText(); }  
	 EOF 
;

// Rule OpOther
ruleOpOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=HyphenMinusGreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getHyphenMinusGreaterThanSignKeyword_0()); 
    }

    |
	kw=FullStopFullStopLessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_1()); 
    }

    |(
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_2_0()); 
    }

	kw=FullStopFullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2_1()); 
    }
)
    |
	kw=FullStopFullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_3()); 
    }

    |
	kw=EqualsSignGreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_4()); 
    }

    |(
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_0()); 
    }
((((
	GreaterThanSign 

	GreaterThanSign 
))=>(
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_0()); 
    }

	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_1()); 
    }
))
    |
	kw=GreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_1()); 
    }
))
    |(
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_0()); 
    }
((((
	LessThanSign 

	LessThanSign 
))=>(
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_0()); 
    }

	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_1()); 
    }
))
    |
	kw=LessThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); 
    }

    |
	kw=EqualsSignGreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_6_1_2()); 
    }
))
    |
	kw=LessThanSignGreaterThanSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_7()); 
    }

    |
	kw=QuestionMarkColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleXAdditiveExpression
entryRuleXAdditiveExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXAdditiveExpressionRule()); }
	 iv_ruleXAdditiveExpression=ruleXAdditiveExpression 
	 { $current=$iv_ruleXAdditiveExpression.current; } 
	 EOF 
;

// Rule XAdditiveExpression
ruleXAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getXMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_XMultiplicativeExpression_0=ruleXMultiplicativeExpression
    {
        $current = $this_XMultiplicativeExpression_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpAdd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAdditiveExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpAdd		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XMultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpAddRule()); } 
	 iv_ruleOpAdd=ruleOpAdd 
	 { $current=$iv_ruleOpAdd.current.getText(); }  
	 EOF 
;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXMultiplicativeExpression
entryRuleXMultiplicativeExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXMultiplicativeExpressionRule()); }
	 iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression 
	 { $current=$iv_ruleXMultiplicativeExpression.current; } 
	 EOF 
;

// Rule XMultiplicativeExpression
ruleXMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getXUnaryOperationParserRuleCall_0()); 
    }
    this_XUnaryOperation_0=ruleXUnaryOperation
    {
        $current = $this_XUnaryOperation_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpMulti
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMultiplicativeExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpMulti		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getRightOperandXUnaryOperationParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XUnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpMulti
entryRuleOpMulti returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpMultiRule()); } 
	 iv_ruleOpMulti=ruleOpMulti 
	 { $current=$iv_ruleOpMulti.current.getText(); }  
	 EOF 
;

// Rule OpMulti
ruleOpMulti returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=Asterisk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); 
    }

    |
	kw=AsteriskAsterisk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); 
    }

    |
	kw=Solidus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); 
    }

    |
	kw=PercentSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXUnaryOperation
entryRuleXUnaryOperation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXUnaryOperationRule()); }
	 iv_ruleXUnaryOperation=ruleXUnaryOperation 
	 { $current=$iv_ruleXUnaryOperation.current; } 
	 EOF 
;

// Rule XUnaryOperation
ruleXUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXUnaryOperationAccess().getXUnaryOperationAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXUnaryOperationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
	    }
		ruleOpUnary		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getOperandXUnaryOperationParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleXUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"XUnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getXCastedExpressionParserRuleCall_1()); 
    }
    this_XCastedExpression_3=ruleXCastedExpression
    {
        $current = $this_XCastedExpression_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpUnaryRule()); } 
	 iv_ruleOpUnary=ruleOpUnary 
	 { $current=$iv_ruleOpUnary.current.getText(); }  
	 EOF 
;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=ExclamationMark 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleXCastedExpression
entryRuleXCastedExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXCastedExpressionRule()); }
	 iv_ruleXCastedExpression=ruleXCastedExpression 
	 { $current=$iv_ruleXCastedExpression.current; } 
	 EOF 
;

// Rule XCastedExpression
ruleXCastedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXCastedExpressionAccess().getXPostfixOperationParserRuleCall_0()); 
    }
    this_XPostfixOperation_0=ruleXPostfixOperation
    {
        $current = $this_XPostfixOperation_0.current;
        afterParserOrEnumRuleCall();
    }
(((((
)
As
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0(),
            $current);
    }
)
	otherlv_2=As
    {
    	newLeafNode(otherlv_2, grammarAccess.getXCastedExpressionAccess().getAsKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXCastedExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCastedExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXPostfixOperation
entryRuleXPostfixOperation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXPostfixOperationRule()); }
	 iv_ruleXPostfixOperation=ruleXPostfixOperation 
	 { $current=$iv_ruleXPostfixOperation.current; } 
	 EOF 
;

// Rule XPostfixOperation
ruleXPostfixOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXPostfixOperationAccess().getXMemberFeatureCallParserRuleCall_0()); 
    }
    this_XMemberFeatureCall_0=ruleXMemberFeatureCall
    {
        $current = $this_XMemberFeatureCall_0.current;
        afterParserOrEnumRuleCall();
    }
((((
)(
(
		ruleOpPostfix
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXPostfixOperationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_1_0()); 
	    }
		ruleOpPostfix		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleOpPostfix
entryRuleOpPostfix returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getOpPostfixRule()); } 
	 iv_ruleOpPostfix=ruleOpPostfix 
	 { $current=$iv_ruleOpPostfix.current.getText(); }  
	 EOF 
;

// Rule OpPostfix
ruleOpPostfix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=PlusSignPlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpPostfixAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw=HyphenMinusHyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpPostfixAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXMemberFeatureCall
entryRuleXMemberFeatureCall returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXMemberFeatureCallRule()); }
	 iv_ruleXMemberFeatureCall=ruleXMemberFeatureCall 
	 { $current=$iv_ruleXMemberFeatureCall.current; } 
	 EOF 
;

// Rule XMemberFeatureCall
ruleXMemberFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getXPrimaryExpressionParserRuleCall_0()); 
    }
    this_XPrimaryExpression_0=ruleXPrimaryExpression
    {
        $current = $this_XPrimaryExpression_0.current;
        afterParserOrEnumRuleCall();
    }
((((((
)(
FullStop

    |(
(

ColonColon


)
))(
(
		ruleFeatureCallID
)
)ruleOpSingleAssign))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0(),
            $current);
    }
)(
	otherlv_2=FullStop
    {
    	newLeafNode(otherlv_2, grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1_0());
    }

    |(
(
		lv_explicitStatic_3_0=
	ColonColon
    {
        newLeafNode(lv_explicitStatic_3_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitStatic", true, "::");
	    }

)
))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
    }
ruleOpSingleAssign
    {
        afterParserOrEnumRuleCall();
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getValueXAssignmentParserRuleCall_1_0_1_0()); 
	    }
		lv_value_6_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(
FullStop

    |(
(

QuestionMarkFullStop


)
)
    |(
(

ColonColon


)
))))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0(),
            $current);
    }
)(
	otherlv_8=FullStop
    {
    	newLeafNode(otherlv_8, grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1_0());
    }

    |(
(
		lv_nullSafe_9_0=
	QuestionMarkFullStop
    {
        newLeafNode(lv_nullSafe_9_0, grammarAccess.getXMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "nullSafe", true, "?.");
	    }

)
)
    |(
(
		lv_explicitStatic_10_0=
	ColonColon
    {
        newLeafNode(lv_explicitStatic_10_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitStatic", true, "::");
	    }

)
))))(
	otherlv_11=LessThanSign
    {
    	newLeafNode(otherlv_11, grammarAccess.getXMemberFeatureCallAccess().getLessThanSignKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0()); 
	    }
		lv_typeArguments_12_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_12_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_13=Comma
    {
    	newLeafNode(otherlv_13, grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0()); 
	    }
		lv_typeArguments_14_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_14_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_15=GreaterThanSign
    {
    	newLeafNode(otherlv_15, grammarAccess.getXMemberFeatureCallAccess().getGreaterThanSignKeyword_1_1_1_3());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_2_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(

LeftParenthesis


)
)=>
(
		lv_explicitOperationCall_17_0=
	LeftParenthesis
    {
        newLeafNode(lv_explicitOperationCall_17_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(
Comma
(
(
ruleJvmFormalParameter
)
))*)?(
(

VerticalLine


)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0()); 
	    }
		lv_memberCallArguments_18_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_18_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0()); 
	    }
		lv_memberCallArguments_19_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_19_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_20=Comma
    {
    	newLeafNode(otherlv_20, grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0()); 
	    }
		lv_memberCallArguments_21_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_21_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?
	otherlv_22=RightParenthesis
    {
    	newLeafNode(otherlv_22, grammarAccess.getXMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_3_2());
    }
)?((((
)
LeftSquareBracket
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0()); 
	    }
		lv_memberCallArguments_23_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_23_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?))*)
;





// Entry rule entryRuleXPrimaryExpression
entryRuleXPrimaryExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXPrimaryExpressionRule()); }
	 iv_ruleXPrimaryExpression=ruleXPrimaryExpression 
	 { $current=$iv_ruleXPrimaryExpression.current; } 
	 EOF 
;

// Rule XPrimaryExpression
ruleXPrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXConstructorCallParserRuleCall_0()); 
    }
    this_XConstructorCall_0=ruleXConstructorCall
    {
        $current = $this_XConstructorCall_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXBlockExpressionParserRuleCall_1()); 
    }
    this_XBlockExpression_1=ruleXBlockExpression
    {
        $current = $this_XBlockExpression_1.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSwitchExpressionParserRuleCall_2()); 
    }
    this_XSwitchExpression_2=ruleXSwitchExpression
    {
        $current = $this_XSwitchExpression_2.current;
        afterParserOrEnumRuleCall();
    }

    |((((
)
Synchronized

LeftParenthesis
))=>
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSynchronizedExpressionParserRuleCall_3()); 
    }
    this_XSynchronizedExpression_3=ruleXSynchronizedExpression
    {
        $current = $this_XSynchronizedExpression_3.current;
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXFeatureCallParserRuleCall_4()); 
    }
    this_XFeatureCall_4=ruleXFeatureCall
    {
        $current = $this_XFeatureCall_4.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXLiteralParserRuleCall_5()); 
    }
    this_XLiteral_5=ruleXLiteral
    {
        $current = $this_XLiteral_5.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXIfExpressionParserRuleCall_6()); 
    }
    this_XIfExpression_6=ruleXIfExpression
    {
        $current = $this_XIfExpression_6.current;
        afterParserOrEnumRuleCall();
    }

    |((((
)
For

LeftParenthesis
(
(
ruleJvmFormalParameter
)
)
Colon
))=>
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXForLoopExpressionParserRuleCall_7()); 
    }
    this_XForLoopExpression_7=ruleXForLoopExpression
    {
        $current = $this_XForLoopExpression_7.current;
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXBasicForLoopExpressionParserRuleCall_8()); 
    }
    this_XBasicForLoopExpression_8=ruleXBasicForLoopExpression
    {
        $current = $this_XBasicForLoopExpression_8.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXWhileExpressionParserRuleCall_9()); 
    }
    this_XWhileExpression_9=ruleXWhileExpression
    {
        $current = $this_XWhileExpression_9.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXDoWhileExpressionParserRuleCall_10()); 
    }
    this_XDoWhileExpression_10=ruleXDoWhileExpression
    {
        $current = $this_XDoWhileExpression_10.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXThrowExpressionParserRuleCall_11()); 
    }
    this_XThrowExpression_11=ruleXThrowExpression
    {
        $current = $this_XThrowExpression_11.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXReturnExpressionParserRuleCall_12()); 
    }
    this_XReturnExpression_12=ruleXReturnExpression
    {
        $current = $this_XReturnExpression_12.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXTryCatchFinallyExpressionParserRuleCall_13()); 
    }
    this_XTryCatchFinallyExpression_13=ruleXTryCatchFinallyExpression
    {
        $current = $this_XTryCatchFinallyExpression_13.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXParenthesizedExpressionParserRuleCall_14()); 
    }
    this_XParenthesizedExpression_14=ruleXParenthesizedExpression
    {
        $current = $this_XParenthesizedExpression_14.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXCollectionLiteral
entryRuleXCollectionLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXCollectionLiteralRule()); }
	 iv_ruleXCollectionLiteral=ruleXCollectionLiteral 
	 { $current=$iv_ruleXCollectionLiteral.current; } 
	 EOF 
;

// Rule XCollectionLiteral
ruleXCollectionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXCollectionLiteralAccess().getXSetLiteralParserRuleCall_0()); 
    }
    this_XSetLiteral_0=ruleXSetLiteral
    {
        $current = $this_XSetLiteral_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXCollectionLiteralAccess().getXListLiteralParserRuleCall_1()); 
    }
    this_XListLiteral_1=ruleXListLiteral
    {
        $current = $this_XListLiteral_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXSetLiteral
entryRuleXSetLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXSetLiteralRule()); }
	 iv_ruleXSetLiteral=ruleXSetLiteral 
	 { $current=$iv_ruleXSetLiteral.current; } 
	 EOF 
;

// Rule XSetLiteral
ruleXSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSetLiteralAccess().getXSetLiteralAction_0(),
            $current);
    }
)
	otherlv_1=NumberSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSetLiteralAccess().getNumberSignKeyword_1());
    }

	otherlv_2=LeftCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSetLiteralAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
	    }
		lv_elements_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSetLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_elements_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=RightCurlyBracket
    {
    	newLeafNode(otherlv_6, grammarAccess.getXSetLiteralAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXListLiteral
entryRuleXListLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXListLiteralRule()); }
	 iv_ruleXListLiteral=ruleXListLiteral 
	 { $current=$iv_ruleXListLiteral.current; } 
	 EOF 
;

// Rule XListLiteral
ruleXListLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXListLiteralAccess().getXListLiteralAction_0(),
            $current);
    }
)
	otherlv_1=NumberSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getXListLiteralAccess().getNumberSignKeyword_1());
    }

	otherlv_2=LeftSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getXListLiteralAccess().getLeftSquareBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
	    }
		lv_elements_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getXListLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_elements_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=RightSquareBracket
    {
    	newLeafNode(otherlv_6, grammarAccess.getXListLiteralAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXClosure
entryRuleXClosure returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXClosureRule()); }
	 iv_ruleXClosure=ruleXClosure 
	 { $current=$iv_ruleXClosure.current; } 
	 EOF 
;

// Rule XClosure
ruleXClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)
LeftSquareBracket
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXClosureAccess().getXClosureAction_0_0_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getXClosureAccess().getLeftSquareBracketKeyword_0_0_1());
    }
))(((((
(
ruleJvmFormalParameter
)
)(
Comma
(
(
ruleJvmFormalParameter
)
))*)?(
(

VerticalLine


)
)))=>(((
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0()); 
	    }
		lv_declaredFormalParameters_2_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_2_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getXClosureAccess().getCommaKeyword_1_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0()); 
	    }
		lv_declaredFormalParameters_4_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_4_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_5_0=
	VerticalLine
    {
        newLeafNode(lv_explicitSyntax_5_0, grammarAccess.getXClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getExpressionXExpressionInClosureParserRuleCall_2_0()); 
	    }
		lv_expression_6_0=ruleXExpressionInClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"XExpressionInClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_7=RightSquareBracket
    {
    	newLeafNode(otherlv_7, grammarAccess.getXClosureAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXExpressionInClosure
entryRuleXExpressionInClosure returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXExpressionInClosureRule()); }
	 iv_ruleXExpressionInClosure=ruleXExpressionInClosure 
	 { $current=$iv_ruleXExpressionInClosure.current; } 
	 EOF 
;

// Rule XExpressionInClosure
ruleXExpressionInClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXExpressionInClosureAccess().getXBlockExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionInClosureAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_expressions_1_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionInClosureRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Semicolon
    {
    	newLeafNode(otherlv_2, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
    }
)?)*)
;





// Entry rule entryRuleXShortClosure
entryRuleXShortClosure returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXShortClosureRule()); }
	 iv_ruleXShortClosure=ruleXShortClosure 
	 { $current=$iv_ruleXShortClosure.current; } 
	 EOF 
;

// Rule XShortClosure
ruleXShortClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)((
(
ruleJvmFormalParameter
)
)(
Comma
(
(
ruleJvmFormalParameter
)
))*)?(
(

VerticalLine


)
)))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXShortClosureAccess().getXClosureAction_0_0_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0()); 
	    }
		lv_declaredFormalParameters_1_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_1_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getXShortClosureAccess().getCommaKeyword_0_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0()); 
	    }
		lv_declaredFormalParameters_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_4_0=
	VerticalLine
    {
        newLeafNode(lv_explicitSyntax_4_0, grammarAccess.getXShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXShortClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getExpressionXExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXParenthesizedExpression
entryRuleXParenthesizedExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXParenthesizedExpressionRule()); }
	 iv_ruleXParenthesizedExpression=ruleXParenthesizedExpression 
	 { $current=$iv_ruleXParenthesizedExpression.current; } 
	 EOF 
;

// Rule XParenthesizedExpression
ruleXParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftParenthesis
    {
    	newLeafNode(otherlv_0, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getXParenthesizedExpressionAccess().getXExpressionParserRuleCall_1()); 
    }
    this_XExpression_1=ruleXExpression
    {
        $current = $this_XExpression_1.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_2=RightParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getXParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleXIfExpression
entryRuleXIfExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXIfExpressionRule()); }
	 iv_ruleXIfExpression=ruleXIfExpression 
	 { $current=$iv_ruleXIfExpression.current; } 
	 EOF 
;

// Rule XIfExpression
ruleXIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXIfExpressionAccess().getXIfExpressionAction_0(),
            $current);
    }
)
	otherlv_1=If
    {
    	newLeafNode(otherlv_1, grammarAccess.getXIfExpressionAccess().getIfKeyword_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getXIfExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getIfXExpressionParserRuleCall_3_0()); 
	    }
		lv_if_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getXIfExpressionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getThenXExpressionParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
Else
)=>
	otherlv_6=Else
    {
    	newLeafNode(otherlv_6, grammarAccess.getXIfExpressionAccess().getElseKeyword_6_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getElseXExpressionParserRuleCall_6_1_0()); 
	    }
		lv_else_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleXSwitchExpression
entryRuleXSwitchExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXSwitchExpressionRule()); }
	 iv_ruleXSwitchExpression=ruleXSwitchExpression 
	 { $current=$iv_ruleXSwitchExpression.current; } 
	 EOF 
;

// Rule XSwitchExpression
ruleXSwitchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSwitchExpressionAccess().getXSwitchExpressionAction_0(),
            $current);
    }
)
	otherlv_1=Switch
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSwitchExpressionAccess().getSwitchKeyword_1());
    }
(((((
LeftParenthesis
(
(
ruleJvmFormalParameter
)
)
Colon
))=>(
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSwitchExpressionAccess().getLeftParenthesisKeyword_2_0_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0()); 
	    }
		lv_declaredParam_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Colon
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_0_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_0_1_0()); 
	    }
		lv_switch_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getXSwitchExpressionAccess().getRightParenthesisKeyword_2_0_2());
    }
)
    |(((((
(
ruleJvmFormalParameter
)
)
Colon
))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0()); 
	    }
		lv_declaredParam_7_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_7_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_8=Colon
    {
    	newLeafNode(otherlv_8, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_1_0_0_1());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_switch_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
	otherlv_10=LeftCurlyBracket
    {
    	newLeafNode(otherlv_10, grammarAccess.getXSwitchExpressionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getCasesXCasePartParserRuleCall_4_0()); 
	    }
		lv_cases_11_0=ruleXCasePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_11_0, 
        		"XCasePart");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
	otherlv_12=Default
    {
    	newLeafNode(otherlv_12, grammarAccess.getXSwitchExpressionAccess().getDefaultKeyword_5_0());
    }

	otherlv_13=Colon
    {
    	newLeafNode(otherlv_13, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDefaultXExpressionParserRuleCall_5_2_0()); 
	    }
		lv_default_14_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_14_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_15=RightCurlyBracket
    {
    	newLeafNode(otherlv_15, grammarAccess.getXSwitchExpressionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleXCasePart
entryRuleXCasePart returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXCasePartRule()); }
	 iv_ruleXCasePart=ruleXCasePart 
	 { $current=$iv_ruleXCasePart.current; } 
	 EOF 
;

// Rule XCasePart
ruleXCasePart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXCasePartAccess().getXCasePartAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getTypeGuardJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeGuard_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"typeGuard",
        		lv_typeGuard_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
	otherlv_2=Case
    {
    	newLeafNode(otherlv_2, grammarAccess.getXCasePartAccess().getCaseKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getCaseXExpressionParserRuleCall_2_1_0()); 
	    }
		lv_case_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"case",
        		lv_case_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
	otherlv_4=Colon
    {
    	newLeafNode(otherlv_4, grammarAccess.getXCasePartAccess().getColonKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getThenXExpressionParserRuleCall_3_0_1_0()); 
	    }
		lv_then_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_fallThrough_6_0=
	Comma
    {
        newLeafNode(lv_fallThrough_6_0, grammarAccess.getXCasePartAccess().getFallThroughCommaKeyword_3_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXCasePartRule());
	        }
       		setWithLastConsumed($current, "fallThrough", true, ",");
	    }

)
)))
;





// Entry rule entryRuleXForLoopExpression
entryRuleXForLoopExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXForLoopExpressionRule()); }
	 iv_ruleXForLoopExpression=ruleXForLoopExpression 
	 { $current=$iv_ruleXForLoopExpression.current; } 
	 EOF 
;

// Rule XForLoopExpression
ruleXForLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)
For

LeftParenthesis
(
(
ruleJvmFormalParameter
)
)
Colon
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXForLoopExpressionAccess().getXForLoopExpressionAction_0_0_0(),
            $current);
    }
)
	otherlv_1=For
    {
    	newLeafNode(otherlv_1, grammarAccess.getXForLoopExpressionAccess().getForKeyword_0_0_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getXForLoopExpressionAccess().getLeftParenthesisKeyword_0_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0()); 
	    }
		lv_declaredParam_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=Colon
    {
    	newLeafNode(otherlv_4, grammarAccess.getXForLoopExpressionAccess().getColonKeyword_0_0_4());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getForExpressionXExpressionParserRuleCall_1_0()); 
	    }
		lv_forExpression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"forExpression",
        		lv_forExpression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getXForLoopExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_3_0()); 
	    }
		lv_eachExpression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXBasicForLoopExpression
entryRuleXBasicForLoopExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXBasicForLoopExpressionRule()); }
	 iv_ruleXBasicForLoopExpression=ruleXBasicForLoopExpression 
	 { $current=$iv_ruleXBasicForLoopExpression.current; } 
	 EOF 
;

// Rule XBasicForLoopExpression
ruleXBasicForLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBasicForLoopExpressionAccess().getXBasicForLoopExpressionAction_0(),
            $current);
    }
)
	otherlv_1=For
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBasicForLoopExpressionAccess().getForKeyword_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getXBasicForLoopExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_initExpressions_3_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_3_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_initExpressions_5_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_5_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_6=Semicolon
    {
    	newLeafNode(otherlv_6, grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getExpressionXExpressionParserRuleCall_5_0()); 
	    }
		lv_expression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_0_0()); 
	    }
		lv_updateExpressions_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=Comma
    {
    	newLeafNode(otherlv_10, grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_1_1_0()); 
	    }
		lv_updateExpressions_11_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_11_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_12=RightParenthesis
    {
    	newLeafNode(otherlv_12, grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_9_0()); 
	    }
		lv_eachExpression_13_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_13_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXWhileExpression
entryRuleXWhileExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXWhileExpressionRule()); }
	 iv_ruleXWhileExpression=ruleXWhileExpression 
	 { $current=$iv_ruleXWhileExpression.current; } 
	 EOF 
;

// Rule XWhileExpression
ruleXWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0(),
            $current);
    }
)
	otherlv_1=While
    {
    	newLeafNode(otherlv_1, grammarAccess.getXWhileExpressionAccess().getWhileKeyword_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getXWhileExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getPredicateXExpressionParserRuleCall_3_0()); 
	    }
		lv_predicate_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getXWhileExpressionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getBodyXExpressionParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXDoWhileExpression
entryRuleXDoWhileExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXDoWhileExpressionRule()); }
	 iv_ruleXDoWhileExpression=ruleXDoWhileExpression 
	 { $current=$iv_ruleXDoWhileExpression.current; } 
	 EOF 
;

// Rule XDoWhileExpression
ruleXDoWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXDoWhileExpressionAccess().getXDoWhileExpressionAction_0(),
            $current);
    }
)
	otherlv_1=Do
    {
    	newLeafNode(otherlv_1, grammarAccess.getXDoWhileExpressionAccess().getDoKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXDoWhileExpressionAccess().getBodyXExpressionParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXDoWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=While
    {
    	newLeafNode(otherlv_3, grammarAccess.getXDoWhileExpressionAccess().getWhileKeyword_3());
    }

	otherlv_4=LeftParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getXDoWhileExpressionAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXDoWhileExpressionAccess().getPredicateXExpressionParserRuleCall_5_0()); 
	    }
		lv_predicate_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXDoWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getXDoWhileExpressionAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleXBlockExpression
entryRuleXBlockExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXBlockExpressionRule()); }
	 iv_ruleXBlockExpression=ruleXBlockExpression 
	 { $current=$iv_ruleXBlockExpression.current; } 
	 EOF 
;

// Rule XBlockExpression
ruleXBlockExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBlockExpressionAccess().getXBlockExpressionAction_0(),
            $current);
    }
)
	otherlv_1=LeftCurlyBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBlockExpressionAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0()); 
	    }
		lv_expressions_2_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBlockExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
    }
)?)*
	otherlv_4=RightCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getXBlockExpressionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXExpressionOrVarDeclaration
entryRuleXExpressionOrVarDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationRule()); }
	 iv_ruleXExpressionOrVarDeclaration=ruleXExpressionOrVarDeclaration 
	 { $current=$iv_ruleXExpressionOrVarDeclaration.current; } 
	 EOF 
;

// Rule XExpressionOrVarDeclaration
ruleXExpressionOrVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationAccess().getXVariableDeclarationParserRuleCall_0()); 
    }
    this_XVariableDeclaration_0=ruleXVariableDeclaration
    {
        $current = $this_XVariableDeclaration_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationAccess().getXExpressionParserRuleCall_1()); 
    }
    this_XExpression_1=ruleXExpression
    {
        $current = $this_XExpression_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXVariableDeclaration
entryRuleXVariableDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXVariableDeclarationRule()); }
	 iv_ruleXVariableDeclaration=ruleXVariableDeclaration 
	 { $current=$iv_ruleXVariableDeclaration.current; } 
	 EOF 
;

// Rule XVariableDeclaration
ruleXVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXVariableDeclarationAccess().getXVariableDeclarationAction_0(),
            $current);
    }
)((
(
		lv_writeable_1_0=
	Var
    {
        newLeafNode(lv_writeable_1_0, grammarAccess.getXVariableDeclarationAccess().getWriteableVarKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "writeable", true, "var");
	    }

)
)
    |
	otherlv_2=Val
    {
    	newLeafNode(otherlv_2, grammarAccess.getXVariableDeclarationAccess().getValKeyword_1_1());
    }
)(((((
(
ruleJvmTypeReference
)
)(
(
ruleValidID
)
)))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getNameValidIDParserRuleCall_2_0_0_1_0()); 
	    }
		lv_name_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getNameValidIDParserRuleCall_2_1_0()); 
	    }
		lv_name_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))(
	otherlv_6=EqualsSign
    {
    	newLeafNode(otherlv_6, grammarAccess.getXVariableDeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getRightXExpressionParserRuleCall_3_1_0()); 
	    }
		lv_right_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJvmFormalParameter
entryRuleJvmFormalParameter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmFormalParameterRule()); }
	 iv_ruleJvmFormalParameter=ruleJvmFormalParameter 
	 { $current=$iv_ruleJvmFormalParameter.current; } 
	 EOF 
;

// Rule JvmFormalParameter
ruleJvmFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_parameterType_0_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		lv_parameterType_0_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFullJvmFormalParameter
entryRuleFullJvmFormalParameter returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFullJvmFormalParameterRule()); }
	 iv_ruleFullJvmFormalParameter=ruleFullJvmFormalParameter 
	 { $current=$iv_ruleFullJvmFormalParameter.current; } 
	 EOF 
;

// Rule FullJvmFormalParameter
ruleFullJvmFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_parameterType_0_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		lv_parameterType_0_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXFeatureCall
entryRuleXFeatureCall returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXFeatureCallRule()); }
	 iv_ruleXFeatureCall=ruleXFeatureCall 
	 { $current=$iv_ruleXFeatureCall.current; } 
	 EOF 
;

// Rule XFeatureCall
ruleXFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXFeatureCallAccess().getXFeatureCallAction_0(),
            $current);
    }
)(
	otherlv_1=LessThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getXFeatureCallAccess().getLessThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_typeArguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getXFeatureCallAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_typeArguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=GreaterThanSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getXFeatureCallAccess().getGreaterThanSignKeyword_1_3());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_2_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(

LeftParenthesis


)
)=>
(
		lv_explicitOperationCall_7_0=
	LeftParenthesis
    {
        newLeafNode(lv_explicitOperationCall_7_0, grammarAccess.getXFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(
Comma
(
(
ruleJvmFormalParameter
)
))*)?(
(

VerticalLine


)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0()); 
	    }
		lv_featureCallArguments_8_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_8_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0()); 
	    }
		lv_featureCallArguments_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=Comma
    {
    	newLeafNode(otherlv_10, grammarAccess.getXFeatureCallAccess().getCommaKeyword_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0()); 
	    }
		lv_featureCallArguments_11_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_11_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?
	otherlv_12=RightParenthesis
    {
    	newLeafNode(otherlv_12, grammarAccess.getXFeatureCallAccess().getRightParenthesisKeyword_3_2());
    }
)?((((
)
LeftSquareBracket
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXClosureParserRuleCall_4_0()); 
	    }
		lv_featureCallArguments_13_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_13_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFeatureCallID
entryRuleFeatureCallID returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getFeatureCallIDRule()); } 
	 iv_ruleFeatureCallID=ruleFeatureCallID 
	 { $current=$iv_ruleFeatureCallID.current.getText(); }  
	 EOF 
;

// Rule FeatureCallID
ruleFeatureCallID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureCallIDAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=Extends 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getExtendsKeyword_1()); 
    }

    |
	kw=Static 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getStaticKeyword_2()); 
    }

    |
	kw=Import 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getImportKeyword_3()); 
    }

    |
	kw=Extension 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getExtensionKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleIdOrSuper
entryRuleIdOrSuper returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getIdOrSuperRule()); } 
	 iv_ruleIdOrSuper=ruleIdOrSuper 
	 { $current=$iv_ruleIdOrSuper.current.getText(); }  
	 EOF 
;

// Rule IdOrSuper
ruleIdOrSuper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getIdOrSuperAccess().getFeatureCallIDParserRuleCall_0()); 
    }
    this_FeatureCallID_0=ruleFeatureCallID    {
		$current.merge(this_FeatureCallID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw=Super 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXConstructorCall
entryRuleXConstructorCall returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXConstructorCallRule()); }
	 iv_ruleXConstructorCall=ruleXConstructorCall 
	 { $current=$iv_ruleXConstructorCall.current; } 
	 EOF 
;

// Rule XConstructorCall
ruleXConstructorCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXConstructorCallAccess().getXConstructorCallAction_0(),
            $current);
    }
)
	otherlv_1=New
    {
    	newLeafNode(otherlv_1, grammarAccess.getXConstructorCallAccess().getNewKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXConstructorCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getConstructorJvmConstructorCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
LessThanSign
)=>
	otherlv_3=LessThanSign
    {
    	newLeafNode(otherlv_3, grammarAccess.getXConstructorCallAccess().getLessThanSignKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0()); 
	    }
		lv_typeArguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getXConstructorCallAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0()); 
	    }
		lv_typeArguments_6_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_6_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_7=GreaterThanSign
    {
    	newLeafNode(otherlv_7, grammarAccess.getXConstructorCallAccess().getGreaterThanSignKeyword_3_3());
    }
)?(((
(

LeftParenthesis


)
)=>
(
		lv_explicitConstructorCall_8_0=
	LeftParenthesis
    {
        newLeafNode(lv_explicitConstructorCall_8_0, grammarAccess.getXConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXConstructorCallRule());
	        }
       		setWithLastConsumed($current, "explicitConstructorCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(
Comma
(
(
ruleJvmFormalParameter
)
))*)?(
(

VerticalLine


)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXShortClosureParserRuleCall_4_1_0_0()); 
	    }
		lv_arguments_9_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_9_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_0_0()); 
	    }
		lv_arguments_10_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_11=Comma
    {
    	newLeafNode(otherlv_11, grammarAccess.getXConstructorCallAccess().getCommaKeyword_4_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_1_1_0()); 
	    }
		lv_arguments_12_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?
	otherlv_13=RightParenthesis
    {
    	newLeafNode(otherlv_13, grammarAccess.getXConstructorCallAccess().getRightParenthesisKeyword_4_2());
    }
)?((((
)
LeftSquareBracket
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXClosureParserRuleCall_5_0()); 
	    }
		lv_arguments_14_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_14_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleXBooleanLiteral
entryRuleXBooleanLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXBooleanLiteralRule()); }
	 iv_ruleXBooleanLiteral=ruleXBooleanLiteral 
	 { $current=$iv_ruleXBooleanLiteral.current; } 
	 EOF 
;

// Rule XBooleanLiteral
ruleXBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBooleanLiteralAccess().getXBooleanLiteralAction_0(),
            $current);
    }
)(
	otherlv_1=False
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBooleanLiteralAccess().getFalseKeyword_1_0());
    }

    |(
(
		lv_isTrue_2_0=
	True
    {
        newLeafNode(lv_isTrue_2_0, grammarAccess.getXBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "isTrue", true, "true");
	    }

)
)))
;





// Entry rule entryRuleXNullLiteral
entryRuleXNullLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXNullLiteralRule()); }
	 iv_ruleXNullLiteral=ruleXNullLiteral 
	 { $current=$iv_ruleXNullLiteral.current; } 
	 EOF 
;

// Rule XNullLiteral
ruleXNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXNullLiteralAccess().getXNullLiteralAction_0(),
            $current);
    }
)
	otherlv_1=Null
    {
    	newLeafNode(otherlv_1, grammarAccess.getXNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleXNumberLiteral
entryRuleXNumberLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXNumberLiteralRule()); }
	 iv_ruleXNumberLiteral=ruleXNumberLiteral 
	 { $current=$iv_ruleXNumberLiteral.current; } 
	 EOF 
;

// Rule XNumberLiteral
ruleXNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXNumberLiteralAccess().getXNumberLiteralAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXNumberLiteralAccess().getValueNumberParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXStringLiteral
entryRuleXStringLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXStringLiteralRule()); }
	 iv_ruleXStringLiteral=ruleXStringLiteral 
	 { $current=$iv_ruleXStringLiteral.current; } 
	 EOF 
;

// Rule XStringLiteral
ruleXStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXStringLiteralAccess().getXStringLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getXStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleXTypeLiteral
entryRuleXTypeLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXTypeLiteralRule()); }
	 iv_ruleXTypeLiteral=ruleXTypeLiteral 
	 { $current=$iv_ruleXTypeLiteral.current; } 
	 EOF 
;

// Rule XTypeLiteral
ruleXTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXTypeLiteralAccess().getXTypeLiteralAction_0(),
            $current);
    }
)
	otherlv_1=Typeof
    {
    	newLeafNode(otherlv_1, grammarAccess.getXTypeLiteralAccess().getTypeofKeyword_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getXTypeLiteralAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXTypeLiteralRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXTypeLiteralAccess().getTypeJvmTypeCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXTypeLiteralAccess().getArrayDimensionsArrayBracketsParserRuleCall_4_0()); 
	    }
		lv_arrayDimensions_4_0=ruleArrayBrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTypeLiteralRule());
	        }
       		add(
       			$current, 
       			"arrayDimensions",
        		lv_arrayDimensions_4_0, 
        		"ArrayBrackets");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getXTypeLiteralAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleXThrowExpression
entryRuleXThrowExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXThrowExpressionRule()); }
	 iv_ruleXThrowExpression=ruleXThrowExpression 
	 { $current=$iv_ruleXThrowExpression.current; } 
	 EOF 
;

// Rule XThrowExpression
ruleXThrowExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXThrowExpressionAccess().getXThrowExpressionAction_0(),
            $current);
    }
)
	otherlv_1=Throw
    {
    	newLeafNode(otherlv_1, grammarAccess.getXThrowExpressionAccess().getThrowKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXThrowExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXThrowExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXReturnExpression
entryRuleXReturnExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXReturnExpressionRule()); }
	 iv_ruleXReturnExpression=ruleXReturnExpression 
	 { $current=$iv_ruleXReturnExpression.current; } 
	 EOF 
;

// Rule XReturnExpression
ruleXReturnExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXReturnExpressionAccess().getXReturnExpressionAction_0(),
            $current);
    }
)
	otherlv_1=Return
    {
    	newLeafNode(otherlv_1, grammarAccess.getXReturnExpressionAccess().getReturnKeyword_1());
    }
((
Extends
 | 
Static
 | 
Import
 | 
Extension
 | 
ExclamationMark
 | 
HyphenMinus
 | 
PlusSign
 | 
New
 | 
LeftCurlyBracket
 | 
Switch
 | 
Synchronized
 | 
LessThanSign
 | 
Super
 | 
NumberSign
 | 
LeftSquareBracket
 | 
False
 | 
True
 | 
Null
 | 
Typeof
 | 
Self
 | 
Root
 | 
Current_mode
 | 
Classifier
 | 
Reference
 | 
If
 | 
For
 | 
While
 | 
Do
 | 
Throw
 | 
Return
 | 
Try
 | 
LeftParenthesis
 | RULE_ID | RULE_HEX | RULE_INT | RULE_DECIMAL | RULE_STRING)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXReturnExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXReturnExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleXTryCatchFinallyExpression
entryRuleXTryCatchFinallyExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionRule()); }
	 iv_ruleXTryCatchFinallyExpression=ruleXTryCatchFinallyExpression 
	 { $current=$iv_ruleXTryCatchFinallyExpression.current; } 
	 EOF 
;

// Rule XTryCatchFinallyExpression
ruleXTryCatchFinallyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXTryCatchFinallyExpressionAccess().getXTryCatchFinallyExpressionAction_0(),
            $current);
    }
)
	otherlv_1=Try
    {
    	newLeafNode(otherlv_1, grammarAccess.getXTryCatchFinallyExpressionAccess().getTryKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((((
Catch
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesXCatchClauseParserRuleCall_3_0_0_0()); 
	    }
		lv_catchClauses_3_0=ruleXCatchClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		add(
       			$current, 
       			"catchClauses",
        		lv_catchClauses_3_0, 
        		"XCatchClause");
	        afterParserOrEnumRuleCall();
	    }

)
)+(((
Finally
)=>
	otherlv_4=Finally
    {
    	newLeafNode(otherlv_4, grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_3_0_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0()); 
	    }
		lv_finallyExpression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		lv_finallyExpression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(
	otherlv_6=Finally
    {
    	newLeafNode(otherlv_6, grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_finallyExpression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		lv_finallyExpression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleXSynchronizedExpression
entryRuleXSynchronizedExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXSynchronizedExpressionRule()); }
	 iv_ruleXSynchronizedExpression=ruleXSynchronizedExpression 
	 { $current=$iv_ruleXSynchronizedExpression.current; } 
	 EOF 
;

// Rule XSynchronizedExpression
ruleXSynchronizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)
Synchronized

LeftParenthesis
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSynchronizedExpressionAccess().getXSynchronizedExpressionAction_0_0_0(),
            $current);
    }
)
	otherlv_1=Synchronized
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSynchronizedExpressionAccess().getSynchronizedKeyword_0_0_1());
    }

	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSynchronizedExpressionAccess().getLeftParenthesisKeyword_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXSynchronizedExpressionAccess().getParamXExpressionParserRuleCall_1_0()); 
	    }
		lv_param_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSynchronizedExpressionRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSynchronizedExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSynchronizedExpressionAccess().getExpressionXExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSynchronizedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXCatchClause
entryRuleXCatchClause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXCatchClauseRule()); }
	 iv_ruleXCatchClause=ruleXCatchClause 
	 { $current=$iv_ruleXCatchClause.current; } 
	 EOF 
;

// Rule XCatchClause
ruleXCatchClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
Catch
)=>
	otherlv_0=Catch
    {
    	newLeafNode(otherlv_0, grammarAccess.getXCatchClauseAccess().getCatchKeyword_0());
    }
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getXCatchClauseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCatchClauseAccess().getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0()); 
	    }
		lv_declaredParam_2_0=ruleFullJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCatchClauseRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_2_0, 
        		"FullJvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getXCatchClauseAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCatchClauseAccess().getExpressionXExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCatchClauseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	FullStop 
)=>
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule();
    }:
(    this_HEX_0=RULE_HEX    {
		$current.merge(this_HEX_0);
    }

    { 
    newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
    }

    |((    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
    }

    |    this_DECIMAL_2=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_2);
    }

    { 
    newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
    }
)(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
    }
(    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
    }

    |    this_DECIMAL_5=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_5);
    }

    { 
    newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
    }
))?))
    ;
finally {
	myHiddenTokenState.restore();
}







// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmTypeReferenceRule()); }
	 iv_ruleJvmTypeReference=ruleJvmTypeReference 
	 { $current=$iv_ruleJvmTypeReference.current; } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
    }
    this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference
    {
        $current = $this_JvmParameterizedTypeReference_0.current;
        afterParserOrEnumRuleCall();
    }
((((
)ruleArrayBrackets))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
    }
ruleArrayBrackets
    {
        afterParserOrEnumRuleCall();
    }
))*)
    |
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1()); 
    }
    this_XFunctionTypeRef_3=ruleXFunctionTypeRef
    {
        $current = $this_XFunctionTypeRef_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayBrackets
entryRuleArrayBrackets returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getArrayBracketsRule()); } 
	 iv_ruleArrayBrackets=ruleArrayBrackets 
	 { $current=$iv_ruleArrayBrackets.current.getText(); }  
	 EOF 
;

// Rule ArrayBrackets
ruleArrayBrackets returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=LeftSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getLeftSquareBracketKeyword_0()); 
    }

	kw=RightSquareBracket 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getRightSquareBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXFunctionTypeRef
entryRuleXFunctionTypeRef returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXFunctionTypeRefRule()); }
	 iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef 
	 { $current=$iv_ruleXFunctionTypeRef.current; } 
	 EOF 
;

// Rule XFunctionTypeRef
ruleXFunctionTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=LeftParenthesis
    {
    	newLeafNode(otherlv_0, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
	    }
		lv_paramTypes_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_2=Comma
    {
    	newLeafNode(otherlv_2, grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
	    }
		lv_paramTypes_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2());
    }
)?
	otherlv_5=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_returnType_6_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_6_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceRule()); }
	 iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference 
	 { $current=$iv_ruleJvmParameterizedTypeReference.current; } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
LessThanSign
)=>
	otherlv_1=LessThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_5=GreaterThanSign
    {
    	newLeafNode(otherlv_5, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
    }
(((((
)
FullStop
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0(),
            $current);
    }
)
	otherlv_7=FullStop
    {
    	newLeafNode(otherlv_7, grammarAccess.getJvmParameterizedTypeReferenceAccess().getFullStopKeyword_1_4_0_0_1());
    }
))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
LessThanSign
)=>
	otherlv_9=LessThanSign
    {
    	newLeafNode(otherlv_9, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_4_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
	    }
		lv_arguments_10_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_11=Comma
    {
    	newLeafNode(otherlv_11, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_4_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
	    }
		lv_arguments_12_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_13=GreaterThanSign
    {
    	newLeafNode(otherlv_13, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_4_2_3());
    }
)?)*)?)
;





// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceRule()); }
	 iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference 
	 { $current=$iv_ruleJvmArgumentTypeReference.current; } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
    }
    this_JvmTypeReference_0=ruleJvmTypeReference
    {
        $current = $this_JvmTypeReference_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
    }
    this_JvmWildcardTypeReference_1=ruleJvmWildcardTypeReference
    {
        $current = $this_JvmWildcardTypeReference_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceRule()); }
	 iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference 
	 { $current=$iv_ruleJvmWildcardTypeReference.current; } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0(),
            $current);
    }
)
	otherlv_1=QuestionMark
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0_0()); 
	    }
		lv_constraints_2_0=ruleJvmUpperBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"JvmUpperBound");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_2_0_1_0()); 
	    }
		lv_constraints_3_0=ruleJvmUpperBoundAnded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_3_0, 
        		"JvmUpperBoundAnded");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0_0()); 
	    }
		lv_constraints_4_0=ruleJvmLowerBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_4_0, 
        		"JvmLowerBound");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundAndedParserRuleCall_2_1_1_0()); 
	    }
		lv_constraints_5_0=ruleJvmLowerBoundAnded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_5_0, 
        		"JvmLowerBoundAnded");
	        afterParserOrEnumRuleCall();
	    }

)
)*))?)
;





// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundRule()); }
	 iv_ruleJvmUpperBound=ruleJvmUpperBound 
	 { $current=$iv_ruleJvmUpperBound.current; } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Extends
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmUpperBoundAnded
entryRuleJvmUpperBoundAnded returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundAndedRule()); }
	 iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded 
	 { $current=$iv_ruleJvmUpperBoundAnded.current; } 
	 EOF 
;

// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Ampersand
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundRule()); }
	 iv_ruleJvmLowerBound=ruleJvmLowerBound 
	 { $current=$iv_ruleJvmLowerBound.current; } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Super
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBoundAnded
entryRuleJvmLowerBoundAnded returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundAndedRule()); }
	 iv_ruleJvmLowerBoundAnded=ruleJvmLowerBoundAnded 
	 { $current=$iv_ruleJvmLowerBoundAnded.current; } 
	 EOF 
;

// Rule JvmLowerBoundAnded
ruleJvmLowerBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Ampersand
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1()); 
    }

	kw=Asterisk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleXImportDeclaration
entryRuleXImportDeclaration returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getXImportDeclarationRule()); }
	 iv_ruleXImportDeclaration=ruleXImportDeclaration 
	 { $current=$iv_ruleXImportDeclaration.current; } 
	 EOF 
;

// Rule XImportDeclaration
ruleXImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Import
    {
    	newLeafNode(otherlv_0, grammarAccess.getXImportDeclarationAccess().getImportKeyword_0());
    }
(((
(
		lv_static_1_0=
	Static
    {
        newLeafNode(lv_static_1_0, grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)(
(
		lv_extension_2_0=
	Extension
    {
        newLeafNode(lv_extension_2_0, grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "extension", true, "extension");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
	    }
		ruleQualifiedNameInStaticImport		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_wildcard_4_0=
	Asterisk
    {
        newLeafNode(lv_wildcard_4_0, grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getMemberNameValidIDParserRuleCall_1_0_3_1_0()); 
	    }
		lv_memberName_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"memberName",
        		lv_memberName_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
	    }
		lv_importedNamespace_7_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_7_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))(
	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleQualifiedNameInStaticImport
entryRuleQualifiedNameInStaticImport returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedNameInStaticImportRule()); } 
	 iv_ruleQualifiedNameInStaticImport=ruleQualifiedNameInStaticImport 
	 { $current=$iv_ruleQualifiedNameInStaticImport.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameInStaticImport
ruleQualifiedNameInStaticImport returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameInStaticImportAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameInStaticImportAccess().getFullStopKeyword_1()); 
    }
)+
    ;





