/*
 * generated by Xtext
 */
package org.osate.xtext.aadl2.mcs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MCSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MCSGrammarRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSGrammarRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLibAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLibMCSAnnexLibraryParserRuleCall_0_0 = (RuleCall)cLibAssignment_0.eContents().get(0);
		private final Assignment cSubclauseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSubclauseMCSAnnexSubclauseParserRuleCall_1_0 = (RuleCall)cSubclauseAssignment_1.eContents().get(0);
		
		//MCSGrammarRoot:
		//	-> lib=MCSAnnexLibrary | subclause=MCSAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//-> lib=MCSAnnexLibrary | subclause=MCSAnnexSubclause
		public Alternatives getAlternatives() { return cAlternatives; }

		//-> lib=MCSAnnexLibrary
		public Assignment getLibAssignment_0() { return cLibAssignment_0; }

		//MCSAnnexLibrary
		public RuleCall getLibMCSAnnexLibraryParserRuleCall_0_0() { return cLibMCSAnnexLibraryParserRuleCall_0_0; }

		//subclause=MCSAnnexSubclause
		public Assignment getSubclauseAssignment_1() { return cSubclauseAssignment_1; }

		//MCSAnnexSubclause
		public RuleCall getSubclauseMCSAnnexSubclauseParserRuleCall_1_0() { return cSubclauseMCSAnnexSubclauseParserRuleCall_1_0; }
	}

	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cMCSAnnexLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//	MCSAnnexLibrary;
		@Override public ParserRule getRule() { return rule; }

		//MCSAnnexLibrary
		public RuleCall getMCSAnnexLibraryParserRuleCall() { return cMCSAnnexLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cMCSAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	MCSAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//MCSAnnexSubclause
		public RuleCall getMCSAnnexSubclauseParserRuleCall() { return cMCSAnnexSubclauseParserRuleCall; }
	}

	public class MCSAnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSAnnexLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSAnnexLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTypesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypesType_declarationParserRuleCall_1_1_0 = (RuleCall)cTypesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConstantsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantsConstant_declarationParserRuleCall_2_1_0 = (RuleCall)cConstantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunctionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionsFunction_declarationParserRuleCall_3_1_0 = (RuleCall)cFunctionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheoremsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTheoremsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTheoremsTheorem_declarationParserRuleCall_4_1_0 = (RuleCall)cTheoremsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cViewpointsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cViewpointsMCSViewpointParserRuleCall_5_0_0 = (RuleCall)cViewpointsAssignment_5_0.eContents().get(0);
		private final Assignment cViewpointsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cViewpointsMCSViewpointParserRuleCall_5_1_0 = (RuleCall)cViewpointsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cEnforceclausesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cEnforceclausesPackageEnforceParserRuleCall_6_0_0 = (RuleCall)cEnforceclausesAssignment_6_0.eContents().get(0);
		private final Assignment cEnforceclausesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEnforceclausesPackageEnforceParserRuleCall_6_1_0 = (RuleCall)cEnforceclausesAssignment_6_1.eContents().get(0);
		
		//MCSAnnexLibrary:
		//	{MCSAnnexLibrary} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
		//	functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+)? (viewpoints+=MCSViewpoint
		//	viewpoints+=MCSViewpoint*)? (enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSAnnexLibrary} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
		//functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+)? (viewpoints+=MCSViewpoint
		//viewpoints+=MCSViewpoint*)? (enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?
		public Group getGroup() { return cGroup; }

		//{MCSAnnexLibrary}
		public Action getMCSAnnexLibraryAction_0() { return cMCSAnnexLibraryAction_0; }

		//("types" types+=Type_declaration+)?
		public Group getGroup_1() { return cGroup_1; }

		//"types"
		public Keyword getTypesKeyword_1_0() { return cTypesKeyword_1_0; }

		//types+=Type_declaration+
		public Assignment getTypesAssignment_1_1() { return cTypesAssignment_1_1; }

		//Type_declaration
		public RuleCall getTypesType_declarationParserRuleCall_1_1_0() { return cTypesType_declarationParserRuleCall_1_1_0; }

		//("constants" constants+=Constant_declaration+)?
		public Group getGroup_2() { return cGroup_2; }

		//"constants"
		public Keyword getConstantsKeyword_2_0() { return cConstantsKeyword_2_0; }

		//constants+=Constant_declaration+
		public Assignment getConstantsAssignment_2_1() { return cConstantsAssignment_2_1; }

		//Constant_declaration
		public RuleCall getConstantsConstant_declarationParserRuleCall_2_1_0() { return cConstantsConstant_declarationParserRuleCall_2_1_0; }

		//("functions" functions+=Function_declaration+)?
		public Group getGroup_3() { return cGroup_3; }

		//"functions"
		public Keyword getFunctionsKeyword_3_0() { return cFunctionsKeyword_3_0; }

		//functions+=Function_declaration+
		public Assignment getFunctionsAssignment_3_1() { return cFunctionsAssignment_3_1; }

		//Function_declaration
		public RuleCall getFunctionsFunction_declarationParserRuleCall_3_1_0() { return cFunctionsFunction_declarationParserRuleCall_3_1_0; }

		//("theorems" theorems+=Theorem_declaration+)?
		public Group getGroup_4() { return cGroup_4; }

		//"theorems"
		public Keyword getTheoremsKeyword_4_0() { return cTheoremsKeyword_4_0; }

		//theorems+=Theorem_declaration+
		public Assignment getTheoremsAssignment_4_1() { return cTheoremsAssignment_4_1; }

		//Theorem_declaration
		public RuleCall getTheoremsTheorem_declarationParserRuleCall_4_1_0() { return cTheoremsTheorem_declarationParserRuleCall_4_1_0; }

		//(viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)?
		public Group getGroup_5() { return cGroup_5; }

		//viewpoints+=MCSViewpoint
		public Assignment getViewpointsAssignment_5_0() { return cViewpointsAssignment_5_0; }

		//MCSViewpoint
		public RuleCall getViewpointsMCSViewpointParserRuleCall_5_0_0() { return cViewpointsMCSViewpointParserRuleCall_5_0_0; }

		//viewpoints+=MCSViewpoint*
		public Assignment getViewpointsAssignment_5_1() { return cViewpointsAssignment_5_1; }

		//MCSViewpoint
		public RuleCall getViewpointsMCSViewpointParserRuleCall_5_1_0() { return cViewpointsMCSViewpointParserRuleCall_5_1_0; }

		//(enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?
		public Group getGroup_6() { return cGroup_6; }

		//enforceclauses+=PackageEnforce
		public Assignment getEnforceclausesAssignment_6_0() { return cEnforceclausesAssignment_6_0; }

		//PackageEnforce
		public RuleCall getEnforceclausesPackageEnforceParserRuleCall_6_0_0() { return cEnforceclausesPackageEnforceParserRuleCall_6_0_0; }

		//enforceclauses+=PackageEnforce*
		public Assignment getEnforceclausesAssignment_6_1() { return cEnforceclausesAssignment_6_1; }

		//PackageEnforce
		public RuleCall getEnforceclausesPackageEnforceParserRuleCall_6_1_0() { return cEnforceclausesPackageEnforceParserRuleCall_6_1_0; }
	}

	public class Type_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeType_expressionParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Type_declaration:
		//	name=ID ":" "type" type=Type_expression ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" "type" type=Type_expression ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//type=Type_expression
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_3_0() { return cTypeType_expressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Constant_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeft_exprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeft_exprConstant_expressionParserRuleCall_4_0 = (RuleCall)cLeft_exprAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Constant_declaration:
		//	const?="const"? name=ID type=Type_expression? ":=" left_expr=constant_expression ";";
		@Override public ParserRule getRule() { return rule; }

		//const?="const"? name=ID type=Type_expression? ":=" left_expr=constant_expression ";"
		public Group getGroup() { return cGroup; }

		//const?="const"?
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }

		//"const"
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=Type_expression?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//left_expr=constant_expression
		public Assignment getLeft_exprAssignment_4() { return cLeft_exprAssignment_4; }

		//constant_expression
		public RuleCall getLeft_exprConstant_expressionParserRuleCall_4_0() { return cLeft_exprConstant_expressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class MCSViewpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSViewpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPolicyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPolicyEnforcement_policyParserRuleCall_2_0 = (RuleCall)cPolicyAssignment_2.eContents().get(0);
		private final Assignment cPscriptAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPscriptPackageScriptParserRuleCall_3_0 = (RuleCall)cPscriptAssignment_3.eContents().get(0);
		
		//MCSViewpoint:
		//	"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript?;
		@Override public ParserRule getRule() { return rule; }

		//"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript?
		public Group getGroup() { return cGroup; }

		//"viewpoint"
		public Keyword getViewpointKeyword_0() { return cViewpointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//policy=Enforcement_policy
		public Assignment getPolicyAssignment_2() { return cPolicyAssignment_2; }

		//Enforcement_policy
		public RuleCall getPolicyEnforcement_policyParserRuleCall_2_0() { return cPolicyEnforcement_policyParserRuleCall_2_0; }

		//pscript=PackageScript?
		public Assignment getPscriptAssignment_3() { return cPscriptAssignment_3; }

		//PackageScript
		public RuleCall getPscriptPackageScriptParserRuleCall_3_0() { return cPscriptPackageScriptParserRuleCall_3_0; }
	}

	public class Enforcement_policyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enforcement_policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPackAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPackPackageKeyword_0_0_0 = (Keyword)cPackAssignment_0_0.eContents().get(0);
		private final Assignment cClassAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cClassClassifierKeyword_0_1_0 = (Keyword)cClassAssignment_0_1.eContents().get(0);
		private final Keyword cContractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Enforcement_policy:
		//	(pack?="package" | class?="classifier") "contract";
		@Override public ParserRule getRule() { return rule; }

		//(pack?="package" | class?="classifier") "contract"
		public Group getGroup() { return cGroup; }

		//pack?="package" | class?="classifier"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//pack?="package"
		public Assignment getPackAssignment_0_0() { return cPackAssignment_0_0; }

		//"package"
		public Keyword getPackPackageKeyword_0_0_0() { return cPackPackageKeyword_0_0_0; }

		//class?="classifier"
		public Assignment getClassAssignment_0_1() { return cClassAssignment_0_1; }

		//"classifier"
		public Keyword getClassClassifierKeyword_0_1_0() { return cClassClassifierKeyword_0_1_0; }

		//"contract"
		public Keyword getContractKeyword_1() { return cContractKeyword_1; }
	}

	public class PackageScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAppliesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAppliesAppliesToClauseParserRuleCall_1_0_0 = (RuleCall)cAppliesAssignment_1_0.eContents().get(0);
		private final Assignment cC_blockAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cC_blockConstraintsBlockParserRuleCall_1_1_0 = (RuleCall)cC_blockAssignment_1_1.eContents().get(0);
		private final Keyword cEndscriptKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefViewpointReferenceParserRuleCall_3_0 = (RuleCall)cRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageScript:
		//	"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";";
		@Override public ParserRule getRule() { return rule; }

		//"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//(applies+=AppliesToClause c_block+=ConstraintsBlock+)*
		public Group getGroup_1() { return cGroup_1; }

		//applies+=AppliesToClause
		public Assignment getAppliesAssignment_1_0() { return cAppliesAssignment_1_0; }

		//AppliesToClause
		public RuleCall getAppliesAppliesToClauseParserRuleCall_1_0_0() { return cAppliesAppliesToClauseParserRuleCall_1_0_0; }

		//c_block+=ConstraintsBlock+
		public Assignment getC_blockAssignment_1_1() { return cC_blockAssignment_1_1; }

		//ConstraintsBlock
		public RuleCall getC_blockConstraintsBlockParserRuleCall_1_1_0() { return cC_blockConstraintsBlockParserRuleCall_1_1_0; }

		//"endscript"
		public Keyword getEndscriptKeyword_2() { return cEndscriptKeyword_2; }

		//ref=ViewpointReference
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//ViewpointReference
		public RuleCall getRefViewpointReferenceParserRuleCall_3_0() { return cRefViewpointReferenceParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AppliesToClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppliesToClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppliesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAllAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cAllAllKeyword_2_0_0 = (Keyword)cAllAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCategoryAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cCategoryClassifierCategoryParserRuleCall_2_1_1_0 = (RuleCall)cCategoryAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cCategoryAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cCategoryClassifierCategoryParserRuleCall_2_1_2_1_0 = (RuleCall)cCategoryAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//AppliesToClause:
		//	"applies" "to" (all?="all" | "(" category+=ClassifierCategory ("," category+=ClassifierCategory)* ")");
		@Override public ParserRule getRule() { return rule; }

		//"applies" "to" (all?="all" | "(" category+=ClassifierCategory ("," category+=ClassifierCategory)* ")")
		public Group getGroup() { return cGroup; }

		//"applies"
		public Keyword getAppliesKeyword_0() { return cAppliesKeyword_0; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//all?="all" | "(" category+=ClassifierCategory ("," category+=ClassifierCategory)* ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//all?="all"
		public Assignment getAllAssignment_2_0() { return cAllAssignment_2_0; }

		//"all"
		public Keyword getAllAllKeyword_2_0_0() { return cAllAllKeyword_2_0_0; }

		//"(" category+=ClassifierCategory ("," category+=ClassifierCategory)* ")"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }

		//category+=ClassifierCategory
		public Assignment getCategoryAssignment_2_1_1() { return cCategoryAssignment_2_1_1; }

		//ClassifierCategory
		public RuleCall getCategoryClassifierCategoryParserRuleCall_2_1_1_0() { return cCategoryClassifierCategoryParserRuleCall_2_1_1_0; }

		//("," category+=ClassifierCategory)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//category+=ClassifierCategory
		public Assignment getCategoryAssignment_2_1_2_1() { return cCategoryAssignment_2_1_2_1; }

		//ClassifierCategory
		public RuleCall getCategoryClassifierCategoryParserRuleCall_2_1_2_1_0() { return cCategoryClassifierCategoryParserRuleCall_2_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
	}

	public class ClassifierCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassifierCategoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cComponentAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cComponentComponentCategoryParserRuleCall_1_0_0_0 = (RuleCall)cComponentAssignment_1_0_0.eContents().get(0);
		private final Assignment cCtAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cCtComponentTypeCrossReference_1_0_1_0 = (CrossReference)cCtAssignment_1_0_1.eContents().get(0);
		private final RuleCall cCtComponentTypeQCREFParserRuleCall_1_0_1_0_1 = (RuleCall)cCtComponentTypeCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Assignment cImplAssignment_1_0_2_0 = (Assignment)cGroup_1_0_2.eContents().get(0);
		private final Keyword cImplImplementationKeyword_1_0_2_0_0 = (Keyword)cImplAssignment_1_0_2_0.eContents().get(0);
		private final Assignment cCiAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final CrossReference cCiComponentImplementationCrossReference_1_0_2_1_0 = (CrossReference)cCiAssignment_1_0_2_1.eContents().get(0);
		private final RuleCall cCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1 = (RuleCall)cCiComponentImplementationCrossReference_1_0_2_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cFeat_gAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cFeat_gFeatureGroupKeyword_1_1_0_0 = (Keyword)cFeat_gAssignment_1_1_0.eContents().get(0);
		private final Assignment cRef_to_fAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0 = (RuleCall)cRef_to_fAssignment_1_1_1.eContents().get(0);
		
		//ClassifierCategory:
		//	{ClassifierCategory} (component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//	ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?);
		@Override public ParserRule getRule() { return rule; }

		//{ClassifierCategory} (component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?)
		public Group getGroup() { return cGroup; }

		//{ClassifierCategory}
		public Action getClassifierCategoryAction_0() { return cClassifierCategoryAction_0; }

		//component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//component=ComponentCategory
		public Assignment getComponentAssignment_1_0_0() { return cComponentAssignment_1_0_0; }

		//ComponentCategory
		public RuleCall getComponentComponentCategoryParserRuleCall_1_0_0_0() { return cComponentComponentCategoryParserRuleCall_1_0_0_0; }

		//ct=[aadl2::ComponentType|QCREF]?
		public Assignment getCtAssignment_1_0_1() { return cCtAssignment_1_0_1; }

		//[aadl2::ComponentType|QCREF]
		public CrossReference getCtComponentTypeCrossReference_1_0_1_0() { return cCtComponentTypeCrossReference_1_0_1_0; }

		//QCREF
		public RuleCall getCtComponentTypeQCREFParserRuleCall_1_0_1_0_1() { return cCtComponentTypeQCREFParserRuleCall_1_0_1_0_1; }

		//(impl?="implementation" ci=[aadl2::ComponentImplementation|QCREF]?)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//impl?="implementation"
		public Assignment getImplAssignment_1_0_2_0() { return cImplAssignment_1_0_2_0; }

		//"implementation"
		public Keyword getImplImplementationKeyword_1_0_2_0_0() { return cImplImplementationKeyword_1_0_2_0_0; }

		//ci=[aadl2::ComponentImplementation|QCREF]?
		public Assignment getCiAssignment_1_0_2_1() { return cCiAssignment_1_0_2_1; }

		//[aadl2::ComponentImplementation|QCREF]
		public CrossReference getCiComponentImplementationCrossReference_1_0_2_1_0() { return cCiComponentImplementationCrossReference_1_0_2_1_0; }

		//QCREF
		public RuleCall getCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1() { return cCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1; }

		//feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//feat_g?="feature group"
		public Assignment getFeat_gAssignment_1_1_0() { return cFeat_gAssignment_1_1_0; }

		//"feature group"
		public Keyword getFeat_gFeatureGroupKeyword_1_1_0_0() { return cFeat_gFeatureGroupKeyword_1_1_0_0; }

		//ref_to_f=FeatureGroupClassifierReference?
		public Assignment getRef_to_fAssignment_1_1_1() { return cRef_to_fAssignment_1_1_1; }

		//FeatureGroupClassifierReference
		public RuleCall getRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0() { return cRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0; }
	}

	public class ComponentCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentCategory");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAbstractKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDataKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDeviceKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMemoryKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cProcessKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cProcessorKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cSubprogramKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cSubprogramKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cGroupKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cSystemKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cThreadKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cGroupKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cThreadKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Keyword cVirtualKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cBusKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Keyword cVirtualKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cProcessorKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		
		//ComponentCategory returns aadl2::ComponentCategory:
		//	"abstract" | "bus" | "data" | "device" | "memory" | "process" | "processor" | "subprogram" | "subprogram" "group" |
		//	"system" | "thread" "group" | "thread" | "virtual" "bus" | "virtual" "processor";
		@Override public ParserRule getRule() { return rule; }

		//"abstract" | "bus" | "data" | "device" | "memory" | "process" | "processor" | "subprogram" | "subprogram" "group" |
		//"system" | "thread" "group" | "thread" | "virtual" "bus" | "virtual" "processor"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"abstract"
		public Keyword getAbstractKeyword_0() { return cAbstractKeyword_0; }

		//"bus"
		public Keyword getBusKeyword_1() { return cBusKeyword_1; }

		//"data"
		public Keyword getDataKeyword_2() { return cDataKeyword_2; }

		//"device"
		public Keyword getDeviceKeyword_3() { return cDeviceKeyword_3; }

		//"memory"
		public Keyword getMemoryKeyword_4() { return cMemoryKeyword_4; }

		//"process"
		public Keyword getProcessKeyword_5() { return cProcessKeyword_5; }

		//"processor"
		public Keyword getProcessorKeyword_6() { return cProcessorKeyword_6; }

		//"subprogram"
		public Keyword getSubprogramKeyword_7() { return cSubprogramKeyword_7; }

		//"subprogram" "group"
		public Group getGroup_8() { return cGroup_8; }

		//"subprogram"
		public Keyword getSubprogramKeyword_8_0() { return cSubprogramKeyword_8_0; }

		//"group"
		public Keyword getGroupKeyword_8_1() { return cGroupKeyword_8_1; }

		//"system"
		public Keyword getSystemKeyword_9() { return cSystemKeyword_9; }

		//"thread" "group"
		public Group getGroup_10() { return cGroup_10; }

		//"thread"
		public Keyword getThreadKeyword_10_0() { return cThreadKeyword_10_0; }

		//"group"
		public Keyword getGroupKeyword_10_1() { return cGroupKeyword_10_1; }

		//"thread"
		public Keyword getThreadKeyword_11() { return cThreadKeyword_11; }

		//"virtual" "bus"
		public Group getGroup_12() { return cGroup_12; }

		//"virtual"
		public Keyword getVirtualKeyword_12_0() { return cVirtualKeyword_12_0; }

		//"bus"
		public Keyword getBusKeyword_12_1() { return cBusKeyword_12_1; }

		//"virtual" "processor"
		public Group getGroup_13() { return cGroup_13; }

		//"virtual"
		public Keyword getVirtualKeyword_13_0() { return cVirtualKeyword_13_0; }

		//"processor"
		public Keyword getProcessorKeyword_13_1() { return cProcessorKeyword_13_1; }
	}

	public class FeatureGroupClassifierReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureGroupClassifierReference");
		private final Assignment cFgAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFgFeatureGroupTypeCrossReference_0 = (CrossReference)cFgAssignment.eContents().get(0);
		private final RuleCall cFgFeatureGroupTypeQCREFParserRuleCall_0_1 = (RuleCall)cFgFeatureGroupTypeCrossReference_0.eContents().get(1);
		
		//FeatureGroupClassifierReference:
		//	fg=[aadl2::FeatureGroupType|QCREF];
		@Override public ParserRule getRule() { return rule; }

		//fg=[aadl2::FeatureGroupType|QCREF]
		public Assignment getFgAssignment() { return cFgAssignment; }

		//[aadl2::FeatureGroupType|QCREF]
		public CrossReference getFgFeatureGroupTypeCrossReference_0() { return cFgFeatureGroupTypeCrossReference_0; }

		//QCREF
		public RuleCall getFgFeatureGroupTypeQCREFParserRuleCall_0_1() { return cFgFeatureGroupTypeQCREFParserRuleCall_0_1; }
	}

	public class ViewpointReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewpointReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolicyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPolicyEnforcement_policyCrossReference_0_0 = (CrossReference)cPolicyAssignment_0.eContents().get(0);
		private final RuleCall cPolicyEnforcement_policyIDTerminalRuleCall_0_0_1 = (RuleCall)cPolicyEnforcement_policyCrossReference_0_0.eContents().get(1);
		private final Assignment cVp_refAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVp_refMCSViewpointCrossReference_1_0 = (CrossReference)cVp_refAssignment_1.eContents().get(0);
		private final RuleCall cVp_refMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cVp_refMCSViewpointCrossReference_1_0.eContents().get(1);
		
		//ViewpointReference:
		//	policy=[Enforcement_policy]? vp_ref=[MCSViewpoint];
		@Override public ParserRule getRule() { return rule; }

		//policy=[Enforcement_policy]? vp_ref=[MCSViewpoint]
		public Group getGroup() { return cGroup; }

		//policy=[Enforcement_policy]?
		public Assignment getPolicyAssignment_0() { return cPolicyAssignment_0; }

		//[Enforcement_policy]
		public CrossReference getPolicyEnforcement_policyCrossReference_0_0() { return cPolicyEnforcement_policyCrossReference_0_0; }

		//ID
		public RuleCall getPolicyEnforcement_policyIDTerminalRuleCall_0_0_1() { return cPolicyEnforcement_policyIDTerminalRuleCall_0_0_1; }

		//vp_ref=[MCSViewpoint]
		public Assignment getVp_refAssignment_1() { return cVp_refAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getVp_refMCSViewpointCrossReference_1_0() { return cVp_refMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getVp_refMCSViewpointIDTerminalRuleCall_1_0_1() { return cVp_refMCSViewpointIDTerminalRuleCall_1_0_1; }
	}

	public class ConstraintsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cB_labelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cB_labelBlock_label_idParserRuleCall_0_0_0 = (RuleCall)cB_labelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCsLabelled_check_statementParserRuleCall_2_0 = (RuleCall)cCsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstraintsBlock:
		//	(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}";
		@Override public ParserRule getRule() { return rule; }

		//(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}"
		public Group getGroup() { return cGroup; }

		//(b_label=block_label_id ":")?
		public Group getGroup_0() { return cGroup_0; }

		//b_label=block_label_id
		public Assignment getB_labelAssignment_0_0() { return cB_labelAssignment_0_0; }

		//block_label_id
		public RuleCall getB_labelBlock_label_idParserRuleCall_0_0_0() { return cB_labelBlock_label_idParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//cs+=labelled_check_statement+
		public Assignment getCsAssignment_2() { return cCsAssignment_2; }

		//labelled_check_statement
		public RuleCall getCsLabelled_check_statementParserRuleCall_2_0() { return cCsLabelled_check_statementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class Labelled_check_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "labelled_check_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cC_labelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cC_labelCheck_label_idParserRuleCall_0_0_0 = (RuleCall)cC_labelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCsCheck_statementParserRuleCall_1_0 = (RuleCall)cCsAssignment_1.eContents().get(0);
		
		//labelled_check_statement:
		//	(c_label=check_label_id ":")? cs=check_statement;
		@Override public ParserRule getRule() { return rule; }

		//(c_label=check_label_id ":")? cs=check_statement
		public Group getGroup() { return cGroup; }

		//(c_label=check_label_id ":")?
		public Group getGroup_0() { return cGroup_0; }

		//c_label=check_label_id
		public Assignment getC_labelAssignment_0_0() { return cC_labelAssignment_0_0; }

		//check_label_id
		public RuleCall getC_labelCheck_label_idParserRuleCall_0_0_0() { return cC_labelCheck_label_idParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//cs=check_statement
		public Assignment getCsAssignment_1() { return cCsAssignment_1; }

		//check_statement
		public RuleCall getCsCheck_statementParserRuleCall_1_0() { return cCsCheck_statementParserRuleCall_1_0; }
	}

	public class Check_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheck_theoremParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheck_assertionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//check_statement:
		//	check_theorem | check_assertion;
		@Override public ParserRule getRule() { return rule; }

		//check_theorem | check_assertion
		public Alternatives getAlternatives() { return cAlternatives; }

		//check_theorem
		public RuleCall getCheck_theoremParserRuleCall_0() { return cCheck_theoremParserRuleCall_0; }

		//check_assertion
		public RuleCall getCheck_assertionParserRuleCall_1() { return cCheck_assertionParserRuleCall_1; }
	}

	public class Block_label_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block_label_id");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//block_label_id:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_label_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_label_id");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//check_label_id:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_theoremElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_theorem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheoremKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameTheorem_declarationCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameTheorem_declarationIDTerminalRuleCall_2_0_1 = (RuleCall)cNameTheorem_declarationCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRootAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRootRoot_elementParserRuleCall_3_1_0 = (RuleCall)cRootAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cInmodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInmodeModeSpecParserRuleCall_4_0 = (RuleCall)cInmodeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFailKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStrAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStrString_expressionParserRuleCall_5_1_0 = (RuleCall)cStrAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//check_theorem:
		//	"check" "theorem" name=[Theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
		//	str=string_expression)? ";";
		@Override public ParserRule getRule() { return rule; }

		//"check" "theorem" name=[Theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
		//str=string_expression)? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//"theorem"
		public Keyword getTheoremKeyword_1() { return cTheoremKeyword_1; }

		//name=[Theorem_declaration]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[Theorem_declaration]
		public CrossReference getNameTheorem_declarationCrossReference_2_0() { return cNameTheorem_declarationCrossReference_2_0; }

		//ID
		public RuleCall getNameTheorem_declarationIDTerminalRuleCall_2_0_1() { return cNameTheorem_declarationIDTerminalRuleCall_2_0_1; }

		//("(" root=root_element ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//root=root_element
		public Assignment getRootAssignment_3_1() { return cRootAssignment_3_1; }

		//root_element
		public RuleCall getRootRoot_elementParserRuleCall_3_1_0() { return cRootRoot_elementParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//inmode=ModeSpec?
		public Assignment getInmodeAssignment_4() { return cInmodeAssignment_4; }

		//ModeSpec
		public RuleCall getInmodeModeSpecParserRuleCall_4_0() { return cInmodeModeSpecParserRuleCall_4_0; }

		//("fail" str=string_expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"fail"
		public Keyword getFailKeyword_5_0() { return cFailKeyword_5_0; }

		//str=string_expression
		public Assignment getStrAssignment_5_1() { return cStrAssignment_5_1; }

		//string_expression
		public RuleCall getStrString_expressionParserRuleCall_5_1_0() { return cStrString_expressionParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ModeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeModeNameParserRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		
		//ModeSpec:
		//	"in" "mode" mode=ModeName;
		@Override public ParserRule getRule() { return rule; }

		//"in" "mode" mode=ModeName
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//"mode"
		public Keyword getModeKeyword_1() { return cModeKeyword_1; }

		//mode=ModeName
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }

		//ModeName
		public RuleCall getModeModeNameParserRuleCall_2_0() { return cModeModeNameParserRuleCall_2_0; }
	}

	public class ModeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ModeName:
		//	name= //temporary
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//name= //temporary
		//ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		////temporary
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_assertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootRoot_elementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Assignment cInmodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInmodeModeSpecParserRuleCall_2_0 = (RuleCall)cInmodeAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprAssertion_expressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFailKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cStrAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStrString_expressionParserRuleCall_6_1_0 = (RuleCall)cStrAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//check_assertion:
		//	"check" root=root_element? inmode=ModeSpec? "(" expr=assertion_expression ")" ("fail" str=string_expression)? ";";
		@Override public ParserRule getRule() { return rule; }

		//"check" root=root_element? inmode=ModeSpec? "(" expr=assertion_expression ")" ("fail" str=string_expression)? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//root=root_element?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }

		//root_element
		public RuleCall getRootRoot_elementParserRuleCall_1_0() { return cRootRoot_elementParserRuleCall_1_0; }

		//inmode=ModeSpec?
		public Assignment getInmodeAssignment_2() { return cInmodeAssignment_2; }

		//ModeSpec
		public RuleCall getInmodeModeSpecParserRuleCall_2_0() { return cInmodeModeSpecParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expr=assertion_expression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//assertion_expression
		public RuleCall getExprAssertion_expressionParserRuleCall_4_0() { return cExprAssertion_expressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("fail" str=string_expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"fail"
		public Keyword getFailKeyword_6_0() { return cFailKeyword_6_0; }

		//str=string_expression
		public Assignment getStrAssignment_6_1() { return cStrAssignment_6_1; }

		//string_expression
		public RuleCall getStrString_expressionParserRuleCall_6_1_0() { return cStrString_expressionParserRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class Root_elementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "root_element");
		private final RuleCall cElement_referenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//root_element:
		//	element_reference;
		@Override public ParserRule getRule() { return rule; }

		//element_reference
		public RuleCall getElement_referenceParserRuleCall() { return cElement_referenceParserRuleCall; }
	}

	public class Property_referenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "property_reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProperty_referenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEl_refAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEl_refElement_referenceParserRuleCall_1_0 = (RuleCall)cEl_refAssignment_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExistsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cExistsQuestionMarkKeyword_3_0 = (Keyword)cExistsAssignment_3.eContents().get(0);
		private final Assignment cPropertyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cPropertyPropertyCrossReference_4_0 = (CrossReference)cPropertyAssignment_4.eContents().get(0);
		private final RuleCall cPropertyPropertyQPREFParserRuleCall_4_0_1 = (RuleCall)cPropertyPropertyCrossReference_4_0.eContents().get(1);
		
		//property_reference:
		//	{property_reference} el_ref=element_reference "#" exists?="?"? property=[aadl2::Property|QPREF];
		@Override public ParserRule getRule() { return rule; }

		//{property_reference} el_ref=element_reference "#" exists?="?"? property=[aadl2::Property|QPREF]
		public Group getGroup() { return cGroup; }

		//{property_reference}
		public Action getProperty_referenceAction_0() { return cProperty_referenceAction_0; }

		//el_ref=element_reference
		public Assignment getEl_refAssignment_1() { return cEl_refAssignment_1; }

		//element_reference
		public RuleCall getEl_refElement_referenceParserRuleCall_1_0() { return cEl_refElement_referenceParserRuleCall_1_0; }

		//"#"
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }

		//exists?="?"?
		public Assignment getExistsAssignment_3() { return cExistsAssignment_3; }

		//"?"
		public Keyword getExistsQuestionMarkKeyword_3_0() { return cExistsQuestionMarkKeyword_3_0; }

		//property=[aadl2::Property|QPREF]
		public Assignment getPropertyAssignment_4() { return cPropertyAssignment_4; }

		//[aadl2::Property|QPREF]
		public CrossReference getPropertyPropertyCrossReference_4_0() { return cPropertyPropertyCrossReference_4_0; }

		//QPREF
		public RuleCall getPropertyPropertyQPREFParserRuleCall_4_0_1() { return cPropertyPropertyQPREFParserRuleCall_4_0_1; }
	}

	public class Element_referenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "element_reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cElement_referenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSelfAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cSelfSelfKeyword_0_1_0 = (Keyword)cSelfAssignment_0_1.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cRootRootKeyword_1_0 = (Keyword)cRootAssignment_1.eContents().get(0);
		private final Assignment cCurrentmodeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cCurrentmodeCurrent_modeKeyword_2_0 = (Keyword)cCurrentmodeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cClassifierKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cCrefAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cCrefClassifierCrossReference_3_2_0 = (CrossReference)cCrefAssignment_3_2.eContents().get(0);
		private final RuleCall cCrefClassifierQCREFParserRuleCall_3_2_0_1 = (RuleCall)cCrefClassifierCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cReferenceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cPackageNameAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cPackageNameIDTerminalRuleCall_4_2_0_0 = (RuleCall)cPackageNameAssignment_4_2_0.eContents().get(0);
		private final Keyword cColonColonKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cRefAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cRefContainmentPathElementParserRuleCall_4_3_0 = (RuleCall)cRefAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//element_reference:
		//	{element_reference} self?="self" | root?="root" | currentmode?="current_mode" | "classifier" "("
		//	cref=[aadl2::Classifier|QCREF] ")" | "reference" "(" (packageName+=ID "::")* ref=ContainmentPathElement ")";
		@Override public ParserRule getRule() { return rule; }

		//{element_reference} self?="self" | root?="root" | currentmode?="current_mode" | "classifier" "("
		//cref=[aadl2::Classifier|QCREF] ")" | "reference" "(" (packageName+=ID "::")* ref=ContainmentPathElement ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{element_reference} self?="self"
		public Group getGroup_0() { return cGroup_0; }

		//{element_reference}
		public Action getElement_referenceAction_0_0() { return cElement_referenceAction_0_0; }

		//self?="self"
		public Assignment getSelfAssignment_0_1() { return cSelfAssignment_0_1; }

		//"self"
		public Keyword getSelfSelfKeyword_0_1_0() { return cSelfSelfKeyword_0_1_0; }

		//root?="root"
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }

		//"root"
		public Keyword getRootRootKeyword_1_0() { return cRootRootKeyword_1_0; }

		//currentmode?="current_mode"
		public Assignment getCurrentmodeAssignment_2() { return cCurrentmodeAssignment_2; }

		//"current_mode"
		public Keyword getCurrentmodeCurrent_modeKeyword_2_0() { return cCurrentmodeCurrent_modeKeyword_2_0; }

		//"classifier" "(" cref=[aadl2::Classifier|QCREF] ")"
		public Group getGroup_3() { return cGroup_3; }

		//"classifier"
		public Keyword getClassifierKeyword_3_0() { return cClassifierKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//cref=[aadl2::Classifier|QCREF]
		public Assignment getCrefAssignment_3_2() { return cCrefAssignment_3_2; }

		//[aadl2::Classifier|QCREF]
		public CrossReference getCrefClassifierCrossReference_3_2_0() { return cCrefClassifierCrossReference_3_2_0; }

		//QCREF
		public RuleCall getCrefClassifierQCREFParserRuleCall_3_2_0_1() { return cCrefClassifierQCREFParserRuleCall_3_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//"reference" "(" (packageName+=ID "::")* ref=ContainmentPathElement ")"
		public Group getGroup_4() { return cGroup_4; }

		//"reference"
		public Keyword getReferenceKeyword_4_0() { return cReferenceKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//(packageName+=ID "::")*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//packageName+=ID
		public Assignment getPackageNameAssignment_4_2_0() { return cPackageNameAssignment_4_2_0; }

		//ID
		public RuleCall getPackageNameIDTerminalRuleCall_4_2_0_0() { return cPackageNameIDTerminalRuleCall_4_2_0_0; }

		//"::"
		public Keyword getColonColonKeyword_4_2_1() { return cColonColonKeyword_4_2_1; }

		//ref=ContainmentPathElement
		public Assignment getRefAssignment_4_3() { return cRefAssignment_4_3; }

		//ContainmentPathElement
		public RuleCall getRefContainmentPathElementParserRuleCall_4_3_0() { return cRefContainmentPathElementParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}

	public class ContainmentPathElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContainmentPathElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNamedElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cNamedElementNamedElementCrossReference_0_0_0 = (CrossReference)cNamedElementAssignment_0_0.eContents().get(0);
		private final RuleCall cNamedElementNamedElementIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNamedElementNamedElementCrossReference_0_0_0.eContents().get(1);
		private final Assignment cArrayRangeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cArrayRangeArrayRangeParserRuleCall_0_1_0 = (RuleCall)cArrayRangeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPathAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPathContainmentPathElementParserRuleCall_1_1_0 = (RuleCall)cPathAssignment_1_1.eContents().get(0);
		
		//// returns aadl2::ContainmentPathElement:
		////	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
		//ContainmentPathElement:
		//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange?) ("." path=ContainmentPathElement)?;
		@Override public ParserRule getRule() { return rule; }

		//(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange?) ("." path=ContainmentPathElement)?
		public Group getGroup() { return cGroup; }

		//namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange?
		public Group getGroup_0() { return cGroup_0; }

		//namedElement=[aadl2::NamedElement]
		public Assignment getNamedElementAssignment_0_0() { return cNamedElementAssignment_0_0; }

		//[aadl2::NamedElement]
		public CrossReference getNamedElementNamedElementCrossReference_0_0_0() { return cNamedElementNamedElementCrossReference_0_0_0; }

		//ID
		public RuleCall getNamedElementNamedElementIDTerminalRuleCall_0_0_0_1() { return cNamedElementNamedElementIDTerminalRuleCall_0_0_0_1; }

		//arrayRange+=ArrayRange?
		public Assignment getArrayRangeAssignment_0_1() { return cArrayRangeAssignment_0_1; }

		//ArrayRange
		public RuleCall getArrayRangeArrayRangeParserRuleCall_0_1_0() { return cArrayRangeArrayRangeParserRuleCall_0_1_0; }

		//("." path=ContainmentPathElement)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//path=ContainmentPathElement
		public Assignment getPathAssignment_1_1() { return cPathAssignment_1_1; }

		//ContainmentPathElement
		public RuleCall getPathContainmentPathElementParserRuleCall_1_1_0() { return cPathContainmentPathElementParserRuleCall_1_1_0; }
	}

	public class ArrayRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundINTTerminalRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUpperBoundAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUpperBoundINTTerminalRuleCall_2_1_0 = (RuleCall)cUpperBoundAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////returns aadl2::ArrayRange: {aadl2::ArrayRange}
		//ArrayRange:
		//	"[" lowerBound=INT (".." upperBound=INT)? "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" lowerBound=INT (".." upperBound=INT)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=INT
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//INT
		public RuleCall getLowerBoundINTTerminalRuleCall_1_0() { return cLowerBoundINTTerminalRuleCall_1_0; }

		//(".." upperBound=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_0() { return cFullStopFullStopKeyword_2_0; }

		//upperBound=INT
		public Assignment getUpperBoundAssignment_2_1() { return cUpperBoundAssignment_2_1; }

		//INT
		public RuleCall getUpperBoundINTTerminalRuleCall_2_1_0() { return cUpperBoundINTTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class PackageEnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageEnforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViewpointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cViewpointMCSViewpointCrossReference_1_0 = (CrossReference)cViewpointAssignment_1.eContents().get(0);
		private final RuleCall cViewpointMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cViewpointMCSViewpointCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageEnforce:
		//	"enforce" viewpoint=[MCSViewpoint] ";";
		@Override public ParserRule getRule() { return rule; }

		//"enforce" viewpoint=[MCSViewpoint] ";"
		public Group getGroup() { return cGroup; }

		//"enforce"
		public Keyword getEnforceKeyword_0() { return cEnforceKeyword_0; }

		//viewpoint=[MCSViewpoint]
		public Assignment getViewpointAssignment_1() { return cViewpointAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getViewpointMCSViewpointCrossReference_1_0() { return cViewpointMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getViewpointMCSViewpointIDTerminalRuleCall_1_0_1() { return cViewpointMCSViewpointIDTerminalRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Assertion_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assertion_expression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//assertion_expression:
		//	expr=expression;
		@Override public ParserRule getRule() { return rule; }

		//expr=expression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}

	public class String_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "string_expression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//string_expression:
		//	expr=expression;
		@Override public ParserRule getRule() { return rule; }

		//expr=expression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}

	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_expression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//constant_expression:
		//	expression;
		@Override public ParserRule getRule() { return rule; }

		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameXExpressionParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// using XBase expressions
		//expression:
		//	name=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//name=XExpression
		public Assignment getNameAssignment() { return cNameAssignment; }

		//XExpression
		public RuleCall getNameXExpressionParserRuleCall_0() { return cNameXExpressionParserRuleCall_0; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXClosureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNumberLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXTypeLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProperty_referenceParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cElement_referenceParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//XLiteral returns XExpression:
		//	CollectionTerm | //	XCollectionLiteral |
		//	XClosure | BooleanTerm | //	XBooleanLiteral |
		//	XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral | => property_reference | // incrementing XBase with AADL specific expression literals 
		//	element_reference;
		@Override public ParserRule getRule() { return rule; }

		//CollectionTerm | //	XCollectionLiteral |
		//XClosure | BooleanTerm | //	XBooleanLiteral |
		//XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral | => property_reference | // incrementing XBase with AADL specific expression literals 
		//element_reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//CollectionTerm
		public RuleCall getCollectionTermParserRuleCall_0() { return cCollectionTermParserRuleCall_0; }

		////	XCollectionLiteral |
		//XClosure
		public RuleCall getXClosureParserRuleCall_1() { return cXClosureParserRuleCall_1; }

		//BooleanTerm
		public RuleCall getBooleanTermParserRuleCall_2() { return cBooleanTermParserRuleCall_2; }

		////	XBooleanLiteral |
		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_3() { return cXNumberLiteralParserRuleCall_3; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_4() { return cXNullLiteralParserRuleCall_4; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_5() { return cXStringLiteralParserRuleCall_5; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_6() { return cXTypeLiteralParserRuleCall_6; }

		//=> property_reference
		public RuleCall getProperty_referenceParserRuleCall_7() { return cProperty_referenceParserRuleCall_7; }

		//// incrementing XBase with AADL specific expression literals 
		//element_reference
		public RuleCall getElement_referenceParserRuleCall_8() { return cElement_referenceParserRuleCall_8; }
	}

	public class BooleanTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cXboolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cXboolXBooleanLiteralParserRuleCall_0_0 = (RuleCall)cXboolAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIs_memberKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMember_checkAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMember_checkExpressionParserRuleCall_1_1_0 = (RuleCall)cMember_checkAssignment_1_1.eContents().get(0);
		private final Keyword cInKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCollect_exprAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCollect_exprExpressionParserRuleCall_1_3_0 = (RuleCall)cCollect_exprAssignment_1_3.eContents().get(0);
		
		//BooleanTerm:
		//	xbool=XBooleanLiteral | "is_member" member_check=expression "in" collect_expr=expression;
		@Override public ParserRule getRule() { return rule; }

		//xbool=XBooleanLiteral | "is_member" member_check=expression "in" collect_expr=expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//xbool=XBooleanLiteral
		public Assignment getXboolAssignment_0() { return cXboolAssignment_0; }

		//XBooleanLiteral
		public RuleCall getXboolXBooleanLiteralParserRuleCall_0_0() { return cXboolXBooleanLiteralParserRuleCall_0_0; }

		//"is_member" member_check=expression "in" collect_expr=expression
		public Group getGroup_1() { return cGroup_1; }

		//"is_member"
		public Keyword getIs_memberKeyword_1_0() { return cIs_memberKeyword_1_0; }

		//member_check=expression
		public Assignment getMember_checkAssignment_1_1() { return cMember_checkAssignment_1_1; }

		//expression
		public RuleCall getMember_checkExpressionParserRuleCall_1_1_0() { return cMember_checkExpressionParserRuleCall_1_1_0; }

		//"in"
		public Keyword getInKeyword_1_2() { return cInKeyword_1_2; }

		//collect_expr=expression
		public Assignment getCollect_exprAssignment_1_3() { return cCollect_exprAssignment_1_3; }

		//expression
		public RuleCall getCollect_exprExpressionParserRuleCall_1_3_0() { return cCollect_exprExpressionParserRuleCall_1_3_0; }
	}

	public class CollectionTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cXcAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cXcXCollectionLiteralParserRuleCall_0_0 = (RuleCall)cXcAssignment_0.eContents().get(0);
		private final Assignment cQuery_setAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cQuery_setQuery_element_setParserRuleCall_1_0 = (RuleCall)cQuery_setAssignment_1.eContents().get(0);
		private final Assignment cSet_cAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSet_cSet_comprehensionParserRuleCall_2_0 = (RuleCall)cSet_cAssignment_2.eContents().get(0);
		
		//CollectionTerm:
		//	xc=XCollectionLiteral | => query_set=Query_element_set | set_c=Set_comprehension;
		@Override public ParserRule getRule() { return rule; }

		//xc=XCollectionLiteral | => query_set=Query_element_set | set_c=Set_comprehension
		public Alternatives getAlternatives() { return cAlternatives; }

		//xc=XCollectionLiteral
		public Assignment getXcAssignment_0() { return cXcAssignment_0; }

		//XCollectionLiteral
		public RuleCall getXcXCollectionLiteralParserRuleCall_0_0() { return cXcXCollectionLiteralParserRuleCall_0_0; }

		//=> query_set=Query_element_set
		public Assignment getQuery_setAssignment_1() { return cQuery_setAssignment_1; }

		//Query_element_set
		public RuleCall getQuery_setQuery_element_setParserRuleCall_1_0() { return cQuery_setQuery_element_setParserRuleCall_1_0; }

		//set_c=Set_comprehension
		public Assignment getSet_cAssignment_2() { return cSet_cAssignment_2; }

		//Set_comprehension
		public RuleCall getSet_cSet_comprehensionParserRuleCall_2_0() { return cSet_cSet_comprehensionParserRuleCall_2_0; }
	}

	public class Set_comprehensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Set_comprehension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultExpressionParserRuleCall_2_0 = (RuleCall)cResultAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVarAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVarIDTerminalRuleCall_4_0 = (RuleCall)cVarAssignment_4.eContents().get(0);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSetAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSetExpressionParserRuleCall_6_0 = (RuleCall)cSetAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVerticalLineKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCondAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_7_1_0 = (RuleCall)cCondAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Set_comprehension:
		//	"set" "{" result=expression "for" var=ID "in" set=expression ("|" cond?=expression)? "}";
		@Override public ParserRule getRule() { return rule; }

		//"set" "{" result=expression "for" var=ID "in" set=expression ("|" cond?=expression)? "}"
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//result=expression
		public Assignment getResultAssignment_2() { return cResultAssignment_2; }

		//expression
		public RuleCall getResultExpressionParserRuleCall_2_0() { return cResultExpressionParserRuleCall_2_0; }

		//"for"
		public Keyword getForKeyword_3() { return cForKeyword_3; }

		//var=ID
		public Assignment getVarAssignment_4() { return cVarAssignment_4; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_4_0() { return cVarIDTerminalRuleCall_4_0; }

		//"in"
		public Keyword getInKeyword_5() { return cInKeyword_5; }

		//set=expression
		public Assignment getSetAssignment_6() { return cSetAssignment_6; }

		//expression
		public RuleCall getSetExpressionParserRuleCall_6_0() { return cSetExpressionParserRuleCall_6_0; }

		//("|" cond?=expression)?
		public Group getGroup_7() { return cGroup_7; }

		//"|"
		public Keyword getVerticalLineKeyword_7_0() { return cVerticalLineKeyword_7_0; }

		//cond?=expression
		public Assignment getCondAssignment_7_1() { return cCondAssignment_7_1; }

		//expression
		public RuleCall getCondExpressionParserRuleCall_7_1_0() { return cCondExpressionParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class Query_element_setElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query_element_set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDirectDirectKeyword_0_0 = (Keyword)cDirectAssignment_0.eContents().get(0);
		private final Keyword cQueryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cResult_typesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResult_typesElement_typesParserRuleCall_4_0 = (RuleCall)cResult_typesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cResult_typesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cResult_typesElement_typesParserRuleCall_5_1_0 = (RuleCall)cResult_typesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cFromKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElem_setAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElem_setExpressionParserRuleCall_8_0 = (RuleCall)cElem_setAssignment_8.eContents().get(0);
		private final Assignment cMode_specAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMode_specModeSpecParserRuleCall_9_0 = (RuleCall)cMode_specAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Query_element_set:
		//	direct?="direct"? "query" "{" "(" result_types+=Element_types ("," result_types+=Element_types)* ")" "from"
		//	elem_set=expression mode_spec?=ModeSpec? "}";
		@Override public ParserRule getRule() { return rule; }

		//direct?="direct"? "query" "{" "(" result_types+=Element_types ("," result_types+=Element_types)* ")" "from"
		//elem_set=expression mode_spec?=ModeSpec? "}"
		public Group getGroup() { return cGroup; }

		//direct?="direct"?
		public Assignment getDirectAssignment_0() { return cDirectAssignment_0; }

		//"direct"
		public Keyword getDirectDirectKeyword_0_0() { return cDirectDirectKeyword_0_0; }

		//"query"
		public Keyword getQueryKeyword_1() { return cQueryKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//result_types+=Element_types
		public Assignment getResult_typesAssignment_4() { return cResult_typesAssignment_4; }

		//Element_types
		public RuleCall getResult_typesElement_typesParserRuleCall_4_0() { return cResult_typesElement_typesParserRuleCall_4_0; }

		//("," result_types+=Element_types)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//result_types+=Element_types
		public Assignment getResult_typesAssignment_5_1() { return cResult_typesAssignment_5_1; }

		//Element_types
		public RuleCall getResult_typesElement_typesParserRuleCall_5_1_0() { return cResult_typesElement_typesParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"from"
		public Keyword getFromKeyword_7() { return cFromKeyword_7; }

		//elem_set=expression
		public Assignment getElem_setAssignment_8() { return cElem_setAssignment_8; }

		//expression
		public RuleCall getElem_setExpressionParserRuleCall_8_0() { return cElem_setExpressionParserRuleCall_8_0; }

		//mode_spec?=ModeSpec?
		public Assignment getMode_specAssignment_9() { return cMode_specAssignment_9; }

		//ModeSpec
		public RuleCall getMode_specModeSpecParserRuleCall_9_0() { return cMode_specModeSpecParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class Element_typesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element_types");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEl_typeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEl_typeElement_typeParserRuleCall_0_0 = (RuleCall)cEl_typeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEl_typesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEl_typesElement_typeParserRuleCall_1_1_0 = (RuleCall)cEl_typesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cEl_typesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cEl_typesElement_typeParserRuleCall_1_2_1_0 = (RuleCall)cEl_typesAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Element_types:
		//	el_type=Element_type | "(" el_types+=Element_type ("," el_types+=Element_type)+ ")";
		@Override public ParserRule getRule() { return rule; }

		//el_type=Element_type | "(" el_types+=Element_type ("," el_types+=Element_type)+ ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//el_type=Element_type
		public Assignment getEl_typeAssignment_0() { return cEl_typeAssignment_0; }

		//Element_type
		public RuleCall getEl_typeElement_typeParserRuleCall_0_0() { return cEl_typeElement_typeParserRuleCall_0_0; }

		//"(" el_types+=Element_type ("," el_types+=Element_type)+ ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//el_types+=Element_type
		public Assignment getEl_typesAssignment_1_1() { return cEl_typesAssignment_1_1; }

		//Element_type
		public RuleCall getEl_typesElement_typeParserRuleCall_1_1_0() { return cEl_typesElement_typeParserRuleCall_1_1_0; }

		//("," el_types+=Element_type)+
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//el_types+=Element_type
		public Assignment getEl_typesAssignment_1_2_1() { return cEl_typesAssignment_1_2_1; }

		//Element_type
		public RuleCall getEl_typesElement_typeParserRuleCall_1_2_1_0() { return cEl_typesElement_typeParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class MCSAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSAnnexSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTypesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypesType_declarationParserRuleCall_1_1_0 = (RuleCall)cTypesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConstantsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantsConstant_declarationParserRuleCall_2_1_0 = (RuleCall)cConstantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunctionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionsFunction_declarationParserRuleCall_3_1_0 = (RuleCall)cFunctionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheoremsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTheoremsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTheoremsTheorem_declarationParserRuleCall_4_1_0 = (RuleCall)cTheoremsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cEnforceclausesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cEnforceclausesClassifierEnforceParserRuleCall_5_0_0 = (RuleCall)cEnforceclausesAssignment_5_0.eContents().get(0);
		private final Assignment cEnforceclausesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEnforceclausesClassifierEnforceParserRuleCall_5_1_0 = (RuleCall)cEnforceclausesAssignment_5_1.eContents().get(0);
		
		////temporary
		//MCSAnnexSubclause:
		//	{MCSAnnexSubclause} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
		//	functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+) (enforceclauses+=ClassifierEnforce
		//	enforceclauses+=ClassifierEnforce*)?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSAnnexSubclause} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
		//functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+) (enforceclauses+=ClassifierEnforce
		//enforceclauses+=ClassifierEnforce*)?
		public Group getGroup() { return cGroup; }

		//{MCSAnnexSubclause}
		public Action getMCSAnnexSubclauseAction_0() { return cMCSAnnexSubclauseAction_0; }

		//("types" types+=Type_declaration+)?
		public Group getGroup_1() { return cGroup_1; }

		//"types"
		public Keyword getTypesKeyword_1_0() { return cTypesKeyword_1_0; }

		//types+=Type_declaration+
		public Assignment getTypesAssignment_1_1() { return cTypesAssignment_1_1; }

		//Type_declaration
		public RuleCall getTypesType_declarationParserRuleCall_1_1_0() { return cTypesType_declarationParserRuleCall_1_1_0; }

		//("constants" constants+=Constant_declaration+)?
		public Group getGroup_2() { return cGroup_2; }

		//"constants"
		public Keyword getConstantsKeyword_2_0() { return cConstantsKeyword_2_0; }

		//constants+=Constant_declaration+
		public Assignment getConstantsAssignment_2_1() { return cConstantsAssignment_2_1; }

		//Constant_declaration
		public RuleCall getConstantsConstant_declarationParserRuleCall_2_1_0() { return cConstantsConstant_declarationParserRuleCall_2_1_0; }

		//("functions" functions+=Function_declaration+)?
		public Group getGroup_3() { return cGroup_3; }

		//"functions"
		public Keyword getFunctionsKeyword_3_0() { return cFunctionsKeyword_3_0; }

		//functions+=Function_declaration+
		public Assignment getFunctionsAssignment_3_1() { return cFunctionsAssignment_3_1; }

		//Function_declaration
		public RuleCall getFunctionsFunction_declarationParserRuleCall_3_1_0() { return cFunctionsFunction_declarationParserRuleCall_3_1_0; }

		//"theorems" theorems+=Theorem_declaration+
		public Group getGroup_4() { return cGroup_4; }

		//"theorems"
		public Keyword getTheoremsKeyword_4_0() { return cTheoremsKeyword_4_0; }

		//theorems+=Theorem_declaration+
		public Assignment getTheoremsAssignment_4_1() { return cTheoremsAssignment_4_1; }

		//Theorem_declaration
		public RuleCall getTheoremsTheorem_declarationParserRuleCall_4_1_0() { return cTheoremsTheorem_declarationParserRuleCall_4_1_0; }

		//(enforceclauses+=ClassifierEnforce enforceclauses+=ClassifierEnforce*)?
		public Group getGroup_5() { return cGroup_5; }

		//enforceclauses+=ClassifierEnforce
		public Assignment getEnforceclausesAssignment_5_0() { return cEnforceclausesAssignment_5_0; }

		//ClassifierEnforce
		public RuleCall getEnforceclausesClassifierEnforceParserRuleCall_5_0_0() { return cEnforceclausesClassifierEnforceParserRuleCall_5_0_0; }

		//enforceclauses+=ClassifierEnforce*
		public Assignment getEnforceclausesAssignment_5_1() { return cEnforceclausesAssignment_5_1; }

		//ClassifierEnforce
		public RuleCall getEnforceclausesClassifierEnforceParserRuleCall_5_1_0() { return cEnforceclausesClassifierEnforceParserRuleCall_5_1_0; }
	}

	public class ClassifierEnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierEnforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViewpointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cViewpointMCSViewpointCrossReference_1_0 = (CrossReference)cViewpointAssignment_1.eContents().get(0);
		private final RuleCall cViewpointMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cViewpointMCSViewpointCrossReference_1_0.eContents().get(1);
		private final Assignment cScriptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptClassifierScriptParserRuleCall_2_0 = (RuleCall)cScriptAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassifierEnforce:
		//	"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";";
		@Override public ParserRule getRule() { return rule; }

		//"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";"
		public Group getGroup() { return cGroup; }

		//"enforce"
		public Keyword getEnforceKeyword_0() { return cEnforceKeyword_0; }

		//viewpoint=[MCSViewpoint]
		public Assignment getViewpointAssignment_1() { return cViewpointAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getViewpointMCSViewpointCrossReference_1_0() { return cViewpointMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getViewpointMCSViewpointIDTerminalRuleCall_1_0_1() { return cViewpointMCSViewpointIDTerminalRuleCall_1_0_1; }

		//script=ClassifierScript
		public Assignment getScriptAssignment_2() { return cScriptAssignment_2; }

		//ClassifierScript
		public RuleCall getScriptClassifierScriptParserRuleCall_2_0() { return cScriptClassifierScriptParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ClassifierScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cC_blockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cC_blockConstraintsBlockParserRuleCall_1_0 = (RuleCall)cC_blockAssignment_1.eContents().get(0);
		private final Keyword cEndscriptKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefViewpointReferenceParserRuleCall_3_0 = (RuleCall)cRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClassifierScript:
		//	"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";";
		@Override public ParserRule getRule() { return rule; }

		//"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//c_block+=ConstraintsBlock*
		public Assignment getC_blockAssignment_1() { return cC_blockAssignment_1; }

		//ConstraintsBlock
		public RuleCall getC_blockConstraintsBlockParserRuleCall_1_0() { return cC_blockConstraintsBlockParserRuleCall_1_0; }

		//"endscript"
		public Keyword getEndscriptKeyword_2() { return cEndscriptKeyword_2; }

		//ref=ViewpointReference
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//ViewpointReference
		public RuleCall getRefViewpointReferenceParserRuleCall_3_0() { return cRefViewpointReferenceParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Function_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cArgAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cArgArgumentParserRuleCall_1_0_1_0 = (RuleCall)cArgAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cArgAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cArgArgumentParserRuleCall_1_0_2_1_0 = (RuleCall)cArgAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Keyword cReturnsKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Assignment cOutAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cOutType_expressionParserRuleCall_1_0_4_1_0 = (RuleCall)cOutAssignment_1_0_4_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cFtypeAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cFtypeUnnamedFunctionTypeParserRuleCall_1_1_1_0_0 = (RuleCall)cFtypeAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cTyperefAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final CrossReference cTyperefType_declarationCrossReference_1_1_1_1_0 = (CrossReference)cTyperefAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cTyperefType_declarationIDTerminalRuleCall_1_1_1_1_0_1 = (RuleCall)cTyperefType_declarationCrossReference_1_1_1_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cClosureAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cClosureMCSClosureParserRuleCall_3_0_0 = (RuleCall)cClosureAssignment_3_0.eContents().get(0);
		private final Assignment cExp_bodyAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cExp_bodyXExpressionParserRuleCall_3_1_0 = (RuleCall)cExp_bodyAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function_declaration:
		//	name=ID ("(" arg+=Argument? ("," arg+=Argument)* ")" ("returns" out=Type_expression)? | ":"
		//	(ftype=UnnamedFunctionType | typeref=[Type_declaration])) ":=" (closure=MCSClosure | exp_body=XExpression) ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("(" arg+=Argument? ("," arg+=Argument)* ")" ("returns" out=Type_expression)? | ":" (ftype=UnnamedFunctionType |
		//typeref=[Type_declaration])) ":=" (closure=MCSClosure | exp_body=XExpression) ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"(" arg+=Argument? ("," arg+=Argument)* ")" ("returns" out=Type_expression)? | ":" (ftype=UnnamedFunctionType |
		//typeref=[Type_declaration])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" arg+=Argument? ("," arg+=Argument)* ")" ("returns" out=Type_expression)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//arg+=Argument?
		public Assignment getArgAssignment_1_0_1() { return cArgAssignment_1_0_1; }

		//Argument
		public RuleCall getArgArgumentParserRuleCall_1_0_1_0() { return cArgArgumentParserRuleCall_1_0_1_0; }

		//("," arg+=Argument)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }

		//arg+=Argument
		public Assignment getArgAssignment_1_0_2_1() { return cArgAssignment_1_0_2_1; }

		//Argument
		public RuleCall getArgArgumentParserRuleCall_1_0_2_1_0() { return cArgArgumentParserRuleCall_1_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }

		//("returns" out=Type_expression)?
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//"returns"
		public Keyword getReturnsKeyword_1_0_4_0() { return cReturnsKeyword_1_0_4_0; }

		//out=Type_expression
		public Assignment getOutAssignment_1_0_4_1() { return cOutAssignment_1_0_4_1; }

		//Type_expression
		public RuleCall getOutType_expressionParserRuleCall_1_0_4_1_0() { return cOutType_expressionParserRuleCall_1_0_4_1_0; }

		//":" (ftype=UnnamedFunctionType | typeref=[Type_declaration])
		public Group getGroup_1_1() { return cGroup_1_1; }

		//":"
		public Keyword getColonKeyword_1_1_0() { return cColonKeyword_1_1_0; }

		//ftype=UnnamedFunctionType | typeref=[Type_declaration]
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//ftype=UnnamedFunctionType
		public Assignment getFtypeAssignment_1_1_1_0() { return cFtypeAssignment_1_1_1_0; }

		//UnnamedFunctionType
		public RuleCall getFtypeUnnamedFunctionTypeParserRuleCall_1_1_1_0_0() { return cFtypeUnnamedFunctionTypeParserRuleCall_1_1_1_0_0; }

		//typeref=[Type_declaration]
		public Assignment getTyperefAssignment_1_1_1_1() { return cTyperefAssignment_1_1_1_1; }

		//[Type_declaration]
		public CrossReference getTyperefType_declarationCrossReference_1_1_1_1_0() { return cTyperefType_declarationCrossReference_1_1_1_1_0; }

		//ID
		public RuleCall getTyperefType_declarationIDTerminalRuleCall_1_1_1_1_0_1() { return cTyperefType_declarationIDTerminalRuleCall_1_1_1_1_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//closure=MCSClosure | exp_body=XExpression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//closure=MCSClosure
		public Assignment getClosureAssignment_3_0() { return cClosureAssignment_3_0; }

		//MCSClosure
		public RuleCall getClosureMCSClosureParserRuleCall_3_0_0() { return cClosureMCSClosureParserRuleCall_3_0_0; }

		//exp_body=XExpression
		public Assignment getExp_bodyAssignment_3_1() { return cExp_bodyAssignment_3_1; }

		//XExpression
		public RuleCall getExp_bodyXExpressionParserRuleCall_3_1_0() { return cExp_bodyXExpressionParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArg_typeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArg_typeType_expressionParserRuleCall_2_1_0 = (RuleCall)cArg_typeAssignment_2_1.eContents().get(0);
		
		//Argument:
		//	{Argument} name=ID (":" arg_type=Type_expression)?;
		@Override public ParserRule getRule() { return rule; }

		//{Argument} name=ID (":" arg_type=Type_expression)?
		public Group getGroup() { return cGroup; }

		//{Argument}
		public Action getArgumentAction_0() { return cArgumentAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" arg_type=Type_expression)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//arg_type=Type_expression
		public Assignment getArg_typeAssignment_2_1() { return cArg_typeAssignment_2_1; }

		//Type_expression
		public RuleCall getArg_typeType_expressionParserRuleCall_2_1_0() { return cArg_typeType_expressionParserRuleCall_2_1_0; }
	}

	public class MCSClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cMCSClosureAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersArgumentParserRuleCall_1_0_0_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_1_0_0_0.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cGroup_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersArgumentParserRuleCall_1_0_0_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitSyntaxAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cExplicitSyntaxVerticalLineKeyword_1_0_1_0 = (Keyword)cExplicitSyntaxAssignment_1_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionInClosureParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MCSClosure returns XExpression:
		//	=> ({MCSClosure} "[") => ((declaredFormalParameters+=Argument ("," declaredFormalParameters+=Argument)*)?
		//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
		@Override public ParserRule getRule() { return rule; }

		//=> ({MCSClosure} "[") => ((declaredFormalParameters+=Argument ("," declaredFormalParameters+=Argument)*)?
		//explicitSyntax?="|")? expression=XExpressionInClosure "]"
		public Group getGroup() { return cGroup; }

		//=> ({MCSClosure} "[")
		public Group getGroup_0() { return cGroup_0; }

		//{MCSClosure} "["
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{MCSClosure}
		public Action getMCSClosureAction_0_0_0() { return cMCSClosureAction_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0_1() { return cLeftSquareBracketKeyword_0_0_1; }

		//=> ((declaredFormalParameters+=Argument ("," declaredFormalParameters+=Argument)*)? explicitSyntax?="|")?
		public Group getGroup_1() { return cGroup_1; }

		//(declaredFormalParameters+=Argument ("," declaredFormalParameters+=Argument)*)? explicitSyntax?="|"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//(declaredFormalParameters+=Argument ("," declaredFormalParameters+=Argument)*)?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//declaredFormalParameters+=Argument
		public Assignment getDeclaredFormalParametersAssignment_1_0_0_0() { return cDeclaredFormalParametersAssignment_1_0_0_0; }

		//Argument
		public RuleCall getDeclaredFormalParametersArgumentParserRuleCall_1_0_0_0_0() { return cDeclaredFormalParametersArgumentParserRuleCall_1_0_0_0_0; }

		//("," declaredFormalParameters+=Argument)*
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_0_1_0() { return cCommaKeyword_1_0_0_1_0; }

		//declaredFormalParameters+=Argument
		public Assignment getDeclaredFormalParametersAssignment_1_0_0_1_1() { return cDeclaredFormalParametersAssignment_1_0_0_1_1; }

		//Argument
		public RuleCall getDeclaredFormalParametersArgumentParserRuleCall_1_0_0_1_1_0() { return cDeclaredFormalParametersArgumentParserRuleCall_1_0_0_1_1_0; }

		//explicitSyntax?="|"
		public Assignment getExplicitSyntaxAssignment_1_0_1() { return cExplicitSyntaxAssignment_1_0_1; }

		//"|"
		public Keyword getExplicitSyntaxVerticalLineKeyword_1_0_1_0() { return cExplicitSyntaxVerticalLineKeyword_1_0_1_0; }

		//expression=XExpressionInClosure
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpressionInClosure
		public RuleCall getExpressionXExpressionInClosureParserRuleCall_2_0() { return cExpressionXExpressionInClosureParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class Theorem_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Theorem_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheoremKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMlIn_modes_listParserRuleCall_2_0 = (RuleCall)cMlAssignment_2.eContents().get(0);
		private final Assignment cLocalsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocalsLocal_declarationParserRuleCall_3_0 = (RuleCall)cLocalsAssignment_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsTheorem_statementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cEndnameTheorem_declarationCrossReference_6_0 = (CrossReference)cEndnameAssignment_6.eContents().get(0);
		private final RuleCall cEndnameTheorem_declarationIDTerminalRuleCall_6_0_1 = (RuleCall)cEndnameTheorem_declarationCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Theorem_declaration:
		//	"theorem" name=ID ml?=In_modes_list? locals+=Local_declaration* statements+=Theorem_statement* "end"
		//	endname=[Theorem_declaration] ";";
		@Override public ParserRule getRule() { return rule; }

		//"theorem" name=ID ml?=In_modes_list? locals+=Local_declaration* statements+=Theorem_statement* "end"
		//endname=[Theorem_declaration] ";"
		public Group getGroup() { return cGroup; }

		//"theorem"
		public Keyword getTheoremKeyword_0() { return cTheoremKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//ml?=In_modes_list?
		public Assignment getMlAssignment_2() { return cMlAssignment_2; }

		//In_modes_list
		public RuleCall getMlIn_modes_listParserRuleCall_2_0() { return cMlIn_modes_listParserRuleCall_2_0; }

		//locals+=Local_declaration*
		public Assignment getLocalsAssignment_3() { return cLocalsAssignment_3; }

		//Local_declaration
		public RuleCall getLocalsLocal_declarationParserRuleCall_3_0() { return cLocalsLocal_declarationParserRuleCall_3_0; }

		//statements+=Theorem_statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//Theorem_statement
		public RuleCall getStatementsTheorem_statementParserRuleCall_4_0() { return cStatementsTheorem_statementParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//endname=[Theorem_declaration]
		public Assignment getEndnameAssignment_6() { return cEndnameAssignment_6; }

		//[Theorem_declaration]
		public CrossReference getEndnameTheorem_declarationCrossReference_6_0() { return cEndnameTheorem_declarationCrossReference_6_0; }

		//ID
		public RuleCall getEndnameTheorem_declarationIDTerminalRuleCall_6_0_1() { return cEndnameTheorem_declarationIDTerminalRuleCall_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class In_modes_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "In_modes_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModesIDTerminalRuleCall_3_0 = (RuleCall)cModesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModesIDTerminalRuleCall_4_1_0 = (RuleCall)cModesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//In_modes_list:
		//	"in" "modes" "(" modes+=ID ("," modes+=ID)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"in" "modes" "(" modes+=ID ("," modes+=ID)* ")"
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//"modes"
		public Keyword getModesKeyword_1() { return cModesKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//modes+=ID
		public Assignment getModesAssignment_3() { return cModesAssignment_3; }

		//ID
		public RuleCall getModesIDTerminalRuleCall_3_0() { return cModesIDTerminalRuleCall_3_0; }

		//("," modes+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//modes+=ID
		public Assignment getModesAssignment_4_1() { return cModesAssignment_4_1; }

		//ID
		public RuleCall getModesIDTerminalRuleCall_4_1_0() { return cModesIDTerminalRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class Local_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Local_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cLeft_exprAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cLeft_exprMCSClosureParserRuleCall_4_0_0 = (RuleCall)cLeft_exprAssignment_4_0.eContents().get(0);
		private final Assignment cLeft_exprAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cLeft_exprConstant_expressionParserRuleCall_4_1_0 = (RuleCall)cLeft_exprAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// syntax similar to core AADL PropertyConstant
		//Local_declaration:
		//	const?="const"? name=ID type=Type_expression? ":=" (left_expr=MCSClosure | left_expr=constant_expression) ";";
		@Override public ParserRule getRule() { return rule; }

		//const?="const"? name=ID type=Type_expression? ":=" (left_expr=MCSClosure | left_expr=constant_expression) ";"
		public Group getGroup() { return cGroup; }

		//const?="const"?
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }

		//"const"
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=Type_expression?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//left_expr=MCSClosure | left_expr=constant_expression
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//left_expr=MCSClosure
		public Assignment getLeft_exprAssignment_4_0() { return cLeft_exprAssignment_4_0; }

		//MCSClosure
		public RuleCall getLeft_exprMCSClosureParserRuleCall_4_0_0() { return cLeft_exprMCSClosureParserRuleCall_4_0_0; }

		//left_expr=constant_expression
		public Assignment getLeft_exprAssignment_4_1() { return cLeft_exprAssignment_4_1; }

		//constant_expression
		public RuleCall getLeft_exprConstant_expressionParserRuleCall_4_1_0() { return cLeft_exprConstant_expressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Theorem_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Theorem_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasic_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheck_statementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Theorem_statement:
		//	Basic_statement | check_statement;
		@Override public ParserRule getRule() { return rule; }

		//Basic_statement | check_statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Basic_statement
		public RuleCall getBasic_statementParserRuleCall_0() { return cBasic_statementParserRuleCall_0; }

		//check_statement
		public RuleCall getCheck_statementParserRuleCall_1() { return cCheck_statementParserRuleCall_1; }
	}

	public class Basic_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Basic_statement");
		private final RuleCall cIterationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Basic_statement: //		assignment | 
		//	Iteration;
		@Override public ParserRule getRule() { return rule; }

		////		assignment | 
		//Iteration
		public RuleCall getIterationParserRuleCall() { return cIterationParserRuleCall; }
	}

	public class IterationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Iteration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVar_idAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVar_idIDTerminalRuleCall_1_0 = (RuleCall)cVar_idAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLocalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLocalLocal_declarationParserRuleCall_6_0 = (RuleCall)cLocalAssignment_6.eContents().get(0);
		private final Assignment cStatementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatementsTheorem_statementParserRuleCall_7_0 = (RuleCall)cStatementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		////assignment : 
		////     		var_id = ID ':=' right = expression ;
		//Iteration:
		//	"foreach" var_id=ID "in" expr=expression "do" "{" local+=Local_declaration* statements+=Theorem_statement+ "}";
		@Override public ParserRule getRule() { return rule; }

		//"foreach" var_id=ID "in" expr=expression "do" "{" local+=Local_declaration* statements+=Theorem_statement+ "}"
		public Group getGroup() { return cGroup; }

		//"foreach"
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }

		//var_id=ID
		public Assignment getVar_idAssignment_1() { return cVar_idAssignment_1; }

		//ID
		public RuleCall getVar_idIDTerminalRuleCall_1_0() { return cVar_idIDTerminalRuleCall_1_0; }

		//"in"
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//expr=expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_3_0() { return cExprExpressionParserRuleCall_3_0; }

		//"do"
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//local+=Local_declaration*
		public Assignment getLocalAssignment_6() { return cLocalAssignment_6; }

		//Local_declaration
		public RuleCall getLocalLocal_declarationParserRuleCall_6_0() { return cLocalLocal_declarationParserRuleCall_6_0; }

		//statements+=Theorem_statement+
		public Assignment getStatementsAssignment_7() { return cStatementsAssignment_7; }

		//Theorem_statement
		public RuleCall getStatementsTheorem_statementParserRuleCall_7_0() { return cStatementsTheorem_statementParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class Type_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBasicBasic_typeParserRuleCall_0_0 = (RuleCall)cBasicAssignment_0.eContents().get(0);
		private final Assignment cCompositeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeComposite_typeParserRuleCall_1_0 = (RuleCall)cCompositeAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cElementElement_typeParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//// Type rules
		//Type_expression:
		//	=> basic=Basic_type | composite=Composite_type | element=Element_type;
		@Override public ParserRule getRule() { return rule; }

		//=> basic=Basic_type | composite=Composite_type | element=Element_type
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> basic=Basic_type
		public Assignment getBasicAssignment_0() { return cBasicAssignment_0; }

		//Basic_type
		public RuleCall getBasicBasic_typeParserRuleCall_0_0() { return cBasicBasic_typeParserRuleCall_0_0; }

		//composite=Composite_type
		public Assignment getCompositeAssignment_1() { return cCompositeAssignment_1; }

		//Composite_type
		public RuleCall getCompositeComposite_typeParserRuleCall_1_0() { return cCompositeComposite_typeParserRuleCall_1_0; }

		//element=Element_type
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//Element_type
		public RuleCall getElementElement_typeParserRuleCall_2_0() { return cElementElement_typeParserRuleCall_2_0; }
	}

	public class Basic_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Basic_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBoolUnnamedBooleanTypeParserRuleCall_0_0 = (RuleCall)cBoolAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringUnnamedStringTypeParserRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cEnumerAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEnumerUnnamedEnumerationTypeParserRuleCall_2_0 = (RuleCall)cEnumerAssignment_2.eContents().get(0);
		private final Assignment cUnitsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cUnitsUnnamedUnitsTypeParserRuleCall_3_0 = (RuleCall)cUnitsAssignment_3.eContents().get(0);
		private final Assignment cIntegerAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIntegerUnnamedIntegerTypeParserRuleCall_4_0 = (RuleCall)cIntegerAssignment_4.eContents().get(0);
		private final Assignment cRealAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cRealUnnamedRealTypeParserRuleCall_5_0 = (RuleCall)cRealAssignment_5.eContents().get(0);
		private final Assignment cRangeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cRangeUnnamedRangeTypeParserRuleCall_6_0 = (RuleCall)cRangeAssignment_6.eContents().get(0);
		private final Assignment cClassAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cClassUnnamedClassifierTypeParserRuleCall_7_0 = (RuleCall)cClassAssignment_7.eContents().get(0);
		private final Assignment cRefAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cRefUnnamedReferenceTypeParserRuleCall_8_0 = (RuleCall)cRefAssignment_8.eContents().get(0);
		private final Assignment cFuncAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cFuncUnnamedFunctionTypeParserRuleCall_9_0 = (RuleCall)cFuncAssignment_9.eContents().get(0);
		private final Assignment cTypenameAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final CrossReference cTypenameType_declarationCrossReference_10_0 = (CrossReference)cTypenameAssignment_10.eContents().get(0);
		private final RuleCall cTypenameType_declarationIDTerminalRuleCall_10_0_1 = (RuleCall)cTypenameType_declarationCrossReference_10_0.eContents().get(1);
		
		//// basic types rules
		//Basic_type:
		//	bool=UnnamedBooleanType // from core AADL
		//	// addition to basic types
		//	| string=UnnamedStringType | enumer=UnnamedEnumerationType | units=UnnamedUnitsType | integer=UnnamedIntegerType |
		//	real=UnnamedRealType | range=UnnamedRangeType | class=UnnamedClassifierType | ref=UnnamedReferenceType |
		//	func=UnnamedFunctionType | typename=[Type_declaration];
		@Override public ParserRule getRule() { return rule; }

		//bool=UnnamedBooleanType // from core AADL
		//// addition to basic types
		//| string=UnnamedStringType | enumer=UnnamedEnumerationType | units=UnnamedUnitsType | integer=UnnamedIntegerType |
		//real=UnnamedRealType | range=UnnamedRangeType | class=UnnamedClassifierType | ref=UnnamedReferenceType |
		//func=UnnamedFunctionType | typename=[Type_declaration]
		public Alternatives getAlternatives() { return cAlternatives; }

		//bool=UnnamedBooleanType
		public Assignment getBoolAssignment_0() { return cBoolAssignment_0; }

		//UnnamedBooleanType
		public RuleCall getBoolUnnamedBooleanTypeParserRuleCall_0_0() { return cBoolUnnamedBooleanTypeParserRuleCall_0_0; }

		//string=UnnamedStringType
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }

		//UnnamedStringType
		public RuleCall getStringUnnamedStringTypeParserRuleCall_1_0() { return cStringUnnamedStringTypeParserRuleCall_1_0; }

		//enumer=UnnamedEnumerationType
		public Assignment getEnumerAssignment_2() { return cEnumerAssignment_2; }

		//UnnamedEnumerationType
		public RuleCall getEnumerUnnamedEnumerationTypeParserRuleCall_2_0() { return cEnumerUnnamedEnumerationTypeParserRuleCall_2_0; }

		//units=UnnamedUnitsType
		public Assignment getUnitsAssignment_3() { return cUnitsAssignment_3; }

		//UnnamedUnitsType
		public RuleCall getUnitsUnnamedUnitsTypeParserRuleCall_3_0() { return cUnitsUnnamedUnitsTypeParserRuleCall_3_0; }

		//integer=UnnamedIntegerType
		public Assignment getIntegerAssignment_4() { return cIntegerAssignment_4; }

		//UnnamedIntegerType
		public RuleCall getIntegerUnnamedIntegerTypeParserRuleCall_4_0() { return cIntegerUnnamedIntegerTypeParserRuleCall_4_0; }

		//real=UnnamedRealType
		public Assignment getRealAssignment_5() { return cRealAssignment_5; }

		//UnnamedRealType
		public RuleCall getRealUnnamedRealTypeParserRuleCall_5_0() { return cRealUnnamedRealTypeParserRuleCall_5_0; }

		//range=UnnamedRangeType
		public Assignment getRangeAssignment_6() { return cRangeAssignment_6; }

		//UnnamedRangeType
		public RuleCall getRangeUnnamedRangeTypeParserRuleCall_6_0() { return cRangeUnnamedRangeTypeParserRuleCall_6_0; }

		//class=UnnamedClassifierType
		public Assignment getClassAssignment_7() { return cClassAssignment_7; }

		//UnnamedClassifierType
		public RuleCall getClassUnnamedClassifierTypeParserRuleCall_7_0() { return cClassUnnamedClassifierTypeParserRuleCall_7_0; }

		//ref=UnnamedReferenceType
		public Assignment getRefAssignment_8() { return cRefAssignment_8; }

		//UnnamedReferenceType
		public RuleCall getRefUnnamedReferenceTypeParserRuleCall_8_0() { return cRefUnnamedReferenceTypeParserRuleCall_8_0; }

		//func=UnnamedFunctionType
		public Assignment getFuncAssignment_9() { return cFuncAssignment_9; }

		//UnnamedFunctionType
		public RuleCall getFuncUnnamedFunctionTypeParserRuleCall_9_0() { return cFuncUnnamedFunctionTypeParserRuleCall_9_0; }

		//typename=[Type_declaration]
		public Assignment getTypenameAssignment_10() { return cTypenameAssignment_10; }

		//[Type_declaration]
		public CrossReference getTypenameType_declarationCrossReference_10_0() { return cTypenameType_declarationCrossReference_10_0; }

		//ID
		public RuleCall getTypenameType_declarationIDTerminalRuleCall_10_0_1() { return cTypenameType_declarationIDTerminalRuleCall_10_0_1; }
	}

	public class UnnamedFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParmType_expressionParserRuleCall_1_0 = (RuleCall)cParmAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParmAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParmType_expressionParserRuleCall_2_1_0 = (RuleCall)cParmAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOutspecAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cOutspecReturnsKeyword_4_0_0 = (Keyword)cOutspecAssignment_4_0.eContents().get(0);
		private final Assignment cResultAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cResultType_expressionParserRuleCall_4_1_0 = (RuleCall)cResultAssignment_4_1.eContents().get(0);
		
		//UnnamedFunctionType:
		//	"(" parm+=Type_expression? ("," parm+=Type_expression)+ ")" (outspec?="returns" result=Type_expression)?;
		@Override public ParserRule getRule() { return rule; }

		//"(" parm+=Type_expression? ("," parm+=Type_expression)+ ")" (outspec?="returns" result=Type_expression)?
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//parm+=Type_expression?
		public Assignment getParmAssignment_1() { return cParmAssignment_1; }

		//Type_expression
		public RuleCall getParmType_expressionParserRuleCall_1_0() { return cParmType_expressionParserRuleCall_1_0; }

		//("," parm+=Type_expression)+
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parm+=Type_expression
		public Assignment getParmAssignment_2_1() { return cParmAssignment_2_1; }

		//Type_expression
		public RuleCall getParmType_expressionParserRuleCall_2_1_0() { return cParmType_expressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(outspec?="returns" result=Type_expression)?
		public Group getGroup_4() { return cGroup_4; }

		//outspec?="returns"
		public Assignment getOutspecAssignment_4_0() { return cOutspecAssignment_4_0; }

		//"returns"
		public Keyword getOutspecReturnsKeyword_4_0_0() { return cOutspecReturnsKeyword_4_0_0; }

		//result=Type_expression
		public Assignment getResultAssignment_4_1() { return cResultAssignment_4_1; }

		//Type_expression
		public RuleCall getResultType_expressionParserRuleCall_4_1_0() { return cResultType_expressionParserRuleCall_4_1_0; }
	}

	public class UnnamedBooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedBooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAadlbooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnnamedBooleanType returns aadl2::AadlBoolean:
		//	{aadl2::AadlBoolean} "aadlboolean";
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlBoolean} "aadlboolean"
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlBoolean}
		public Action getAadlBooleanAction_0() { return cAadlBooleanAction_0; }

		//"aadlboolean"
		public Keyword getAadlbooleanKeyword_1() { return cAadlbooleanKeyword_1; }
	}

	public class UnnamedStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAadlstringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnnamedStringType returns aadl2::AadlString:
		//	{aadl2::AadlString} "aadlstring";
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlString} "aadlstring"
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlString}
		public Action getAadlStringAction_0() { return cAadlStringAction_0; }

		//"aadlstring"
		public Keyword getAadlstringKeyword_1() { return cAadlstringKeyword_1; }
	}

	public class UnnamedEnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedEnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedLiteralEnumerationLiteralParserRuleCall_2_0 = (RuleCall)cOwnedLiteralAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0 = (RuleCall)cOwnedLiteralAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnnamedEnumerationType returns aadl2::EnumerationType:
		//	"enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")"
		public Group getGroup() { return cGroup; }

		//"enumeration"
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ownedLiteral+=EnumerationLiteral
		public Assignment getOwnedLiteralAssignment_2() { return cOwnedLiteralAssignment_2; }

		//EnumerationLiteral
		public RuleCall getOwnedLiteralEnumerationLiteralParserRuleCall_2_0() { return cOwnedLiteralEnumerationLiteralParserRuleCall_2_0; }

		//("," ownedLiteral+=EnumerationLiteral)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ownedLiteral+=EnumerationLiteral
		public Assignment getOwnedLiteralAssignment_3_1() { return cOwnedLiteralAssignment_3_1; }

		//EnumerationLiteral
		public RuleCall getOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0() { return cOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteral returns aadl2::EnumerationLiteral:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class UnnamedUnitsTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedUnitsType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedLiteralUnitLiteralParserRuleCall_2_0 = (RuleCall)cOwnedLiteralAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0 = (RuleCall)cOwnedLiteralAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnnamedUnitsType returns aadl2::UnitsType:
		//	"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")"
		public Group getGroup() { return cGroup; }

		//"units"
		public Keyword getUnitsKeyword_0() { return cUnitsKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ownedLiteral+=UnitLiteral
		public Assignment getOwnedLiteralAssignment_2() { return cOwnedLiteralAssignment_2; }

		//UnitLiteral
		public RuleCall getOwnedLiteralUnitLiteralParserRuleCall_2_0() { return cOwnedLiteralUnitLiteralParserRuleCall_2_0; }

		//("," ownedLiteral+=UnitLiteralConversion)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ownedLiteral+=UnitLiteralConversion
		public Assignment getOwnedLiteralAssignment_3_1() { return cOwnedLiteralAssignment_3_1; }

		//UnitLiteralConversion
		public RuleCall getOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0() { return cOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class UnitLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UnitLiteral returns aadl2::UnitLiteral:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class UnitLiteralConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitLiteralConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBaseUnitUnitLiteralCrossReference_2_0 = (CrossReference)cBaseUnitAssignment_2.eContents().get(0);
		private final RuleCall cBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1 = (RuleCall)cBaseUnitUnitLiteralCrossReference_2_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFactorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFactorNumberValueParserRuleCall_4_0 = (RuleCall)cFactorAssignment_4.eContents().get(0);
		
		//UnitLiteralConversion returns aadl2::UnitLiteral:
		//	name=ID "=>" baseUnit=[aadl2::UnitLiteral] "*" factor=NumberValue;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=>" baseUnit=[aadl2::UnitLiteral] "*" factor=NumberValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//baseUnit=[aadl2::UnitLiteral]
		public Assignment getBaseUnitAssignment_2() { return cBaseUnitAssignment_2; }

		//[aadl2::UnitLiteral]
		public CrossReference getBaseUnitUnitLiteralCrossReference_2_0() { return cBaseUnitUnitLiteralCrossReference_2_0; }

		//ID
		public RuleCall getBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1() { return cBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }

		//factor=NumberValue
		public Assignment getFactorAssignment_4() { return cFactorAssignment_4; }

		//NumberValue
		public RuleCall getFactorNumberValueParserRuleCall_4_0() { return cFactorNumberValueParserRuleCall_4_0; }
	}

	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberValue returns aadl2::NumberValue:
		//	RealLit | => IntegerLit;
		@Override public ParserRule getRule() { return rule; }

		//RealLit | => IntegerLit
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealLit
		public RuleCall getRealLitParserRuleCall_0() { return cRealLitParserRuleCall_0; }

		//=> IntegerLit
		public RuleCall getIntegerLitParserRuleCall_1() { return cIntegerLitParserRuleCall_1; }
	}

	public class RealLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedRealParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// Number: INTEGER_LIT | REAL_LIT;
		//RealLit returns aadl2::RealLiteral:
		//	value=SignedReal;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedReal
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SignedReal
		public RuleCall getValueSignedRealParserRuleCall_0() { return cValueSignedRealParserRuleCall_0; }
	}

	public class IntegerLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLit returns aadl2::IntegerLiteral:
		//	value=SignedInt;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedInt
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0() { return cValueSignedIntParserRuleCall_0; }
	}

	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// using Xbase Number literals
		//SignedInt returns aadl2::Integer:
		//	("+" | "-")? //INTEGER_LIT 
		//	Number;
		@Override public ParserRule getRule() { return rule; }

		//("+" | "-")? //INTEGER_LIT 
		//Number
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		////INTEGER_LIT 
		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }
	}

	public class SignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedReal returns aadl2::Real:
		//	("+" | "-")? //REAL_LIT
		//	Number;
		@Override public ParserRule getRule() { return rule; }

		//("+" | "-")? //REAL_LIT
		//Number
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		////REAL_LIT
		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }
	}

	public class UnnamedIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAadlintegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeIntegerRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedUnitsTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0 = (RuleCall)cOwnedUnitsTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cUnitsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cReferencedUnitsTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0 = (CrossReference)cReferencedUnitsTypeAssignment_3_1_1.eContents().get(0);
		private final RuleCall cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1 = (RuleCall)cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0.eContents().get(1);
		
		//UnnamedIntegerType returns aadl2::AadlInteger:
		//	{aadl2::AadlInteger} "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlInteger} "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlInteger}
		public Action getAadlIntegerAction_0() { return cAadlIntegerAction_0; }

		//"aadlinteger"
		public Keyword getAadlintegerKeyword_1() { return cAadlintegerKeyword_1; }

		//range=IntegerRange?
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//IntegerRange
		public RuleCall getRangeIntegerRangeParserRuleCall_2_0() { return cRangeIntegerRangeParserRuleCall_2_0; }

		//(ownedUnitsType=UnnamedUnitsType | "units" referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedUnitsType=UnnamedUnitsType
		public Assignment getOwnedUnitsTypeAssignment_3_0() { return cOwnedUnitsTypeAssignment_3_0; }

		//UnnamedUnitsType
		public RuleCall getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0() { return cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0; }

		//"units" referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"units"
		public Keyword getUnitsKeyword_3_1_0() { return cUnitsKeyword_3_1_0; }

		//referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Assignment getReferencedUnitsTypeAssignment_3_1_1() { return cReferencedUnitsTypeAssignment_3_1_1; }

		//[aadl2::UnitsType|QPREF]
		public CrossReference getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0() { return cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0; }

		//QPREF
		public RuleCall getReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1() { return cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1; }
	}

	public class IntegerRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLowerBoundAlternatives_0_0 = (Alternatives)cLowerBoundAssignment_0.eContents().get(0);
		private final RuleCall cLowerBoundIntegerTermParserRuleCall_0_0_0 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(0);
		private final RuleCall cLowerBoundSignedConstantParserRuleCall_0_0_1 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(1);
		private final RuleCall cLowerBoundConstantValueParserRuleCall_0_0_2 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cUpperBoundAlternatives_2_0 = (Alternatives)cUpperBoundAssignment_2.eContents().get(0);
		private final RuleCall cUpperBoundIntegerTermParserRuleCall_2_0_0 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(0);
		private final RuleCall cUpperBoundSignedConstantParserRuleCall_2_0_1 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(1);
		private final RuleCall cUpperBoundConstantValueParserRuleCall_2_0_2 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(2);
		
		//IntegerRange returns aadl2::NumericRange:
		//	lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant |
		//	ConstantValue);
		@Override public ParserRule getRule() { return rule; }

		//lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Group getGroup() { return cGroup; }

		//lowerBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }

		//IntegerTerm | SignedConstant | ConstantValue
		public Alternatives getLowerBoundAlternatives_0_0() { return cLowerBoundAlternatives_0_0; }

		//IntegerTerm
		public RuleCall getLowerBoundIntegerTermParserRuleCall_0_0_0() { return cLowerBoundIntegerTermParserRuleCall_0_0_0; }

		//SignedConstant
		public RuleCall getLowerBoundSignedConstantParserRuleCall_0_0_1() { return cLowerBoundSignedConstantParserRuleCall_0_0_1; }

		//ConstantValue
		public RuleCall getLowerBoundConstantValueParserRuleCall_0_0_2() { return cLowerBoundConstantValueParserRuleCall_0_0_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upperBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }

		//IntegerTerm | SignedConstant | ConstantValue
		public Alternatives getUpperBoundAlternatives_2_0() { return cUpperBoundAlternatives_2_0; }

		//IntegerTerm
		public RuleCall getUpperBoundIntegerTermParserRuleCall_2_0_0() { return cUpperBoundIntegerTermParserRuleCall_2_0_0; }

		//SignedConstant
		public RuleCall getUpperBoundSignedConstantParserRuleCall_2_0_1() { return cUpperBoundSignedConstantParserRuleCall_2_0_1; }

		//ConstantValue
		public RuleCall getUpperBoundConstantValueParserRuleCall_2_0_2() { return cUpperBoundConstantValueParserRuleCall_2_0_2; }
	}

	public class IntegerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSignedIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//IntegerTerm returns aadl2::IntegerLiteral:
		//	value=SignedInt unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedInt unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=SignedInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0_0() { return cValueSignedIntParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class SignedConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpPlusMinusParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cOwnedPropertyExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPropertyExpressionConstantValueParserRuleCall_1_0 = (RuleCall)cOwnedPropertyExpressionAssignment_1.eContents().get(0);
		
		//SignedConstant returns aadl2::Operation:
		//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
		@Override public ParserRule getRule() { return rule; }

		//op=PlusMinus ownedPropertyExpression+=ConstantValue
		public Group getGroup() { return cGroup; }

		//op=PlusMinus
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//PlusMinus
		public RuleCall getOpPlusMinusParserRuleCall_0_0() { return cOpPlusMinusParserRuleCall_0_0; }

		//ownedPropertyExpression+=ConstantValue
		public Assignment getOwnedPropertyExpressionAssignment_1() { return cOwnedPropertyExpressionAssignment_1; }

		//ConstantValue
		public RuleCall getOwnedPropertyExpressionConstantValueParserRuleCall_1_0() { return cOwnedPropertyExpressionConstantValueParserRuleCall_1_0; }
	}

	public class PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PlusMinus returns aadl2::OperationKind:
		//	"+" | "-";
		@Override public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Assignment cNamedValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNamedValuePropertyConstantCrossReference_0 = (CrossReference)cNamedValueAssignment.eContents().get(0);
		private final RuleCall cNamedValuePropertyConstantQPREFParserRuleCall_0_1 = (RuleCall)cNamedValuePropertyConstantCrossReference_0.eContents().get(1);
		
		//ConstantValue returns aadl2::NamedValue:
		//	namedValue=[aadl2::PropertyConstant|QPREF];
		@Override public ParserRule getRule() { return rule; }

		//namedValue=[aadl2::PropertyConstant|QPREF]
		public Assignment getNamedValueAssignment() { return cNamedValueAssignment; }

		//[aadl2::PropertyConstant|QPREF]
		public CrossReference getNamedValuePropertyConstantCrossReference_0() { return cNamedValuePropertyConstantCrossReference_0; }

		//QPREF
		public RuleCall getNamedValuePropertyConstantQPREFParserRuleCall_0_1() { return cNamedValuePropertyConstantQPREFParserRuleCall_0_1; }
	}

	public class UnnamedRealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedRealType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlRealAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAadlrealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeRealRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedUnitsTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0 = (RuleCall)cOwnedUnitsTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cUnitsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cReferencedUnitsTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0 = (CrossReference)cReferencedUnitsTypeAssignment_3_1_1.eContents().get(0);
		private final RuleCall cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1 = (RuleCall)cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0.eContents().get(1);
		
		//UnnamedRealType returns aadl2::AadlReal:
		//	{aadl2::AadlReal} "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlReal} "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlReal}
		public Action getAadlRealAction_0() { return cAadlRealAction_0; }

		//"aadlreal"
		public Keyword getAadlrealKeyword_1() { return cAadlrealKeyword_1; }

		//range=RealRange?
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//RealRange
		public RuleCall getRangeRealRangeParserRuleCall_2_0() { return cRangeRealRangeParserRuleCall_2_0; }

		//(ownedUnitsType=UnnamedUnitsType | "units" referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedUnitsType=UnnamedUnitsType
		public Assignment getOwnedUnitsTypeAssignment_3_0() { return cOwnedUnitsTypeAssignment_3_0; }

		//UnnamedUnitsType
		public RuleCall getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0() { return cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0; }

		//"units" referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"units"
		public Keyword getUnitsKeyword_3_1_0() { return cUnitsKeyword_3_1_0; }

		//referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Assignment getReferencedUnitsTypeAssignment_3_1_1() { return cReferencedUnitsTypeAssignment_3_1_1; }

		//[aadl2::UnitsType|QPREF]
		public CrossReference getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0() { return cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0; }

		//QPREF
		public RuleCall getReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1() { return cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1; }
	}

	public class RealRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLowerBoundAlternatives_0_0 = (Alternatives)cLowerBoundAssignment_0.eContents().get(0);
		private final RuleCall cLowerBoundRealTermParserRuleCall_0_0_0 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(0);
		private final RuleCall cLowerBoundSignedConstantParserRuleCall_0_0_1 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(1);
		private final RuleCall cLowerBoundConstantValueParserRuleCall_0_0_2 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cUpperBoundAlternatives_2_0 = (Alternatives)cUpperBoundAssignment_2.eContents().get(0);
		private final RuleCall cUpperBoundRealTermParserRuleCall_2_0_0 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(0);
		private final RuleCall cUpperBoundSignedConstantParserRuleCall_2_0_1 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(1);
		private final RuleCall cUpperBoundConstantValueParserRuleCall_2_0_2 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(2);
		
		//RealRange returns aadl2::NumericRange:
		//	lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue);
		@Override public ParserRule getRule() { return rule; }

		//lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue)
		public Group getGroup() { return cGroup; }

		//lowerBound=(RealTerm | SignedConstant | ConstantValue)
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }

		//RealTerm | SignedConstant | ConstantValue
		public Alternatives getLowerBoundAlternatives_0_0() { return cLowerBoundAlternatives_0_0; }

		//RealTerm
		public RuleCall getLowerBoundRealTermParserRuleCall_0_0_0() { return cLowerBoundRealTermParserRuleCall_0_0_0; }

		//SignedConstant
		public RuleCall getLowerBoundSignedConstantParserRuleCall_0_0_1() { return cLowerBoundSignedConstantParserRuleCall_0_0_1; }

		//ConstantValue
		public RuleCall getLowerBoundConstantValueParserRuleCall_0_0_2() { return cLowerBoundConstantValueParserRuleCall_0_0_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upperBound=(RealTerm | SignedConstant | ConstantValue)
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }

		//RealTerm | SignedConstant | ConstantValue
		public Alternatives getUpperBoundAlternatives_2_0() { return cUpperBoundAlternatives_2_0; }

		//RealTerm
		public RuleCall getUpperBoundRealTermParserRuleCall_2_0_0() { return cUpperBoundRealTermParserRuleCall_2_0_0; }

		//SignedConstant
		public RuleCall getUpperBoundSignedConstantParserRuleCall_2_0_1() { return cUpperBoundSignedConstantParserRuleCall_2_0_1; }

		//ConstantValue
		public RuleCall getUpperBoundConstantValueParserRuleCall_2_0_2() { return cUpperBoundConstantValueParserRuleCall_2_0_2; }
	}

	public class RealTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSignedRealParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//RealTerm returns aadl2::RealLiteral:
		//	value=SignedReal unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedReal unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=SignedReal
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//SignedReal
		public RuleCall getValueSignedRealParserRuleCall_0_0() { return cValueSignedRealParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnnamedRangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedRangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRangeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedNumberTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Alternatives cOwnedNumberTypeAlternatives_3_0_0 = (Alternatives)cOwnedNumberTypeAssignment_3_0.eContents().get(0);
		private final RuleCall cOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_3_0_0_0 = (RuleCall)cOwnedNumberTypeAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cOwnedNumberTypeUnnamedRealTypeParserRuleCall_3_0_0_1 = (RuleCall)cOwnedNumberTypeAlternatives_3_0_0.eContents().get(1);
		private final Assignment cNumberTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cNumberTypeNumberTypeCrossReference_3_1_0 = (CrossReference)cNumberTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cNumberTypeNumberTypeQPREFParserRuleCall_3_1_0_1 = (RuleCall)cNumberTypeNumberTypeCrossReference_3_1_0.eContents().get(1);
		
		//UnnamedRangeType returns aadl2::RangeType:
		//	{aadl2::RangeType} "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
		//	numberType=[aadl2::NumberType|QPREF]);
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::RangeType} "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
		//numberType=[aadl2::NumberType|QPREF])
		public Group getGroup() { return cGroup; }

		//{aadl2::RangeType}
		public Action getRangeTypeAction_0() { return cRangeTypeAction_0; }

		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }

		//"of"
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }

		//ownedNumberType=(UnnamedIntegerType | UnnamedRealType) | numberType=[aadl2::NumberType|QPREF]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedNumberType=(UnnamedIntegerType | UnnamedRealType)
		public Assignment getOwnedNumberTypeAssignment_3_0() { return cOwnedNumberTypeAssignment_3_0; }

		//UnnamedIntegerType | UnnamedRealType
		public Alternatives getOwnedNumberTypeAlternatives_3_0_0() { return cOwnedNumberTypeAlternatives_3_0_0; }

		//UnnamedIntegerType
		public RuleCall getOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_3_0_0_0() { return cOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_3_0_0_0; }

		//UnnamedRealType
		public RuleCall getOwnedNumberTypeUnnamedRealTypeParserRuleCall_3_0_0_1() { return cOwnedNumberTypeUnnamedRealTypeParserRuleCall_3_0_0_1; }

		//numberType=[aadl2::NumberType|QPREF]
		public Assignment getNumberTypeAssignment_3_1() { return cNumberTypeAssignment_3_1; }

		//[aadl2::NumberType|QPREF]
		public CrossReference getNumberTypeNumberTypeCrossReference_3_1_0() { return cNumberTypeNumberTypeCrossReference_3_1_0; }

		//QPREF
		public RuleCall getNumberTypeNumberTypeQPREFParserRuleCall_3_1_0_1() { return cNumberTypeNumberTypeQPREFParserRuleCall_3_1_0_1; }
	}

	public class UnnamedClassifierTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedClassifierType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassifierTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClassifierReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClassifierReferenceQMReferenceParserRuleCall_2_1_0 = (RuleCall)cClassifierReferenceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cClassifierReferenceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cClassifierReferenceQMReferenceParserRuleCall_2_2_1_0 = (RuleCall)cClassifierReferenceAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//UnnamedClassifierType returns aadl2::ClassifierType:
		//	{aadl2::ClassifierType} "classifier" ("(" classifierReference+=QMReference ("," classifierReference+=QMReference)*
		//	")")?;
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::ClassifierType} "classifier" ("(" classifierReference+=QMReference ("," classifierReference+=QMReference)* ")")?
		public Group getGroup() { return cGroup; }

		//{aadl2::ClassifierType}
		public Action getClassifierTypeAction_0() { return cClassifierTypeAction_0; }

		//"classifier"
		public Keyword getClassifierKeyword_1() { return cClassifierKeyword_1; }

		//("(" classifierReference+=QMReference ("," classifierReference+=QMReference)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//classifierReference+=QMReference
		public Assignment getClassifierReferenceAssignment_2_1() { return cClassifierReferenceAssignment_2_1; }

		//QMReference
		public RuleCall getClassifierReferenceQMReferenceParserRuleCall_2_1_0() { return cClassifierReferenceQMReferenceParserRuleCall_2_1_0; }

		//("," classifierReference+=QMReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//classifierReference+=QMReference
		public Assignment getClassifierReferenceAssignment_2_2_1() { return cClassifierReferenceAssignment_2_2_1; }

		//QMReference
		public RuleCall getClassifierReferenceQMReferenceParserRuleCall_2_2_1_0() { return cClassifierReferenceQMReferenceParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class UnnamedReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedReferenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReferenceTypeAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamedElementReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamedElementReferenceQMReferenceParserRuleCall_2_1_0 = (RuleCall)cNamedElementReferenceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cNamedElementReferenceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNamedElementReferenceQMReferenceParserRuleCall_2_2_1_0 = (RuleCall)cNamedElementReferenceAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//UnnamedReferenceType returns aadl2::ReferenceType:
		//	"reference" {aadl2::ReferenceType} ("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)*
		//	")")?;
		@Override public ParserRule getRule() { return rule; }

		//"reference" {aadl2::ReferenceType} ("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)*
		//")")?
		public Group getGroup() { return cGroup; }

		//"reference"
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }

		//{aadl2::ReferenceType}
		public Action getReferenceTypeAction_1() { return cReferenceTypeAction_1; }

		//("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//namedElementReference+=QMReference
		public Assignment getNamedElementReferenceAssignment_2_1() { return cNamedElementReferenceAssignment_2_1; }

		//QMReference
		public RuleCall getNamedElementReferenceQMReferenceParserRuleCall_2_1_0() { return cNamedElementReferenceQMReferenceParserRuleCall_2_1_0; }

		//("," namedElementReference+=QMReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//namedElementReference+=QMReference
		public Assignment getNamedElementReferenceAssignment_2_2_1() { return cNamedElementReferenceAssignment_2_2_1; }

		//QMReference
		public RuleCall getNamedElementReferenceQMReferenceParserRuleCall_2_2_1_0() { return cNamedElementReferenceQMReferenceParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class QMReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QMReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAnnexNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnexNameIDTerminalRuleCall_0_1_0 = (RuleCall)cAnnexNameAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cMetaclassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetaclassNameIDTerminalRuleCall_1_0 = (RuleCall)cMetaclassNameAssignment_1.eContents().get(0);
		
		//QMReference returns aadl2::MetaclassReference:
		//	("{" annexName=ID "}" "*" "*")? metaclassName+=ID+;
		@Override public ParserRule getRule() { return rule; }

		//("{" annexName=ID "}" "*" "*")? metaclassName+=ID+
		public Group getGroup() { return cGroup; }

		//("{" annexName=ID "}" "*" "*")?
		public Group getGroup_0() { return cGroup_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }

		//annexName=ID
		public Assignment getAnnexNameAssignment_0_1() { return cAnnexNameAssignment_0_1; }

		//ID
		public RuleCall getAnnexNameIDTerminalRuleCall_0_1_0() { return cAnnexNameIDTerminalRuleCall_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }

		//"*"
		public Keyword getAsteriskKeyword_0_3() { return cAsteriskKeyword_0_3; }

		//"*"
		public Keyword getAsteriskKeyword_0_4() { return cAsteriskKeyword_0_4; }

		//metaclassName+=ID+
		public Assignment getMetaclassNameAssignment_1() { return cMetaclassNameAssignment_1; }

		//ID
		public RuleCall getMetaclassNameIDTerminalRuleCall_1_0() { return cMetaclassNameIDTerminalRuleCall_1_0; }
	}

	public class QCReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QCReference");
		private final Assignment cClassifierAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cClassifierComponentClassifierCrossReference_0 = (CrossReference)cClassifierAssignment.eContents().get(0);
		private final RuleCall cClassifierComponentClassifierFQCREFParserRuleCall_0_1 = (RuleCall)cClassifierComponentClassifierCrossReference_0.eContents().get(1);
		
		//QCReference returns aadl2::ClassifierValue:
		//	classifier=[aadl2::ComponentClassifier|FQCREF];
		@Override public ParserRule getRule() { return rule; }

		//classifier=[aadl2::ComponentClassifier|FQCREF]
		public Assignment getClassifierAssignment() { return cClassifierAssignment; }

		//[aadl2::ComponentClassifier|FQCREF]
		public CrossReference getClassifierComponentClassifierCrossReference_0() { return cClassifierComponentClassifierCrossReference_0; }

		//FQCREF
		public RuleCall getClassifierComponentClassifierFQCREFParserRuleCall_0_1() { return cClassifierComponentClassifierFQCREFParserRuleCall_0_1; }
	}

	public class Composite_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Composite_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSet_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cList_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMap_typeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRecord_typeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnion_typeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// composite type rules
		//Composite_type:
		//	Set_type | List_type | Map_type | Record_type | Union_type;
		@Override public ParserRule getRule() { return rule; }

		//Set_type | List_type | Map_type | Record_type | Union_type
		public Alternatives getAlternatives() { return cAlternatives; }

		//Set_type
		public RuleCall getSet_typeParserRuleCall_0() { return cSet_typeParserRuleCall_0; }

		//List_type
		public RuleCall getList_typeParserRuleCall_1() { return cList_typeParserRuleCall_1; }

		//Map_type
		public RuleCall getMap_typeParserRuleCall_2() { return cMap_typeParserRuleCall_2; }

		//Record_type
		public RuleCall getRecord_typeParserRuleCall_3() { return cRecord_typeParserRuleCall_3; }

		//Union_type
		public RuleCall getUnion_typeParserRuleCall_4() { return cUnion_typeParserRuleCall_4; }
	}

	public class Set_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Set_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Set_type:
		//	"set" "of" type=Type_expression;
		@Override public ParserRule getRule() { return rule; }

		//"set" "of" type=Type_expression
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//type=Type_expression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }
	}

	public class List_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//List_type:
		//	"list" "of" type=Type_expression;
		@Override public ParserRule getRule() { return rule; }

		//"list" "of" type=Type_expression
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//type=Type_expression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }
	}

	public class Map_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Map_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Map_type:
		//	"map" "of" type=Type_expression;
		@Override public ParserRule getRule() { return rule; }

		//"map" "of" type=Type_expression
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//type=Type_expression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }
	}

	public class Record_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Record_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldId_type_pairParserRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Record_type:
		//	"record" "( " field+=Id_type_pair+ ")";
		@Override public ParserRule getRule() { return rule; }

		//"record" "( " field+=Id_type_pair+ ")"
		public Group getGroup() { return cGroup; }

		//"record"
		public Keyword getRecordKeyword_0() { return cRecordKeyword_0; }

		//"( "
		public Keyword getLeftParenthesisSpaceKeyword_1() { return cLeftParenthesisSpaceKeyword_1; }

		//field+=Id_type_pair+
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }

		//Id_type_pair
		public RuleCall getFieldId_type_pairParserRuleCall_2_0() { return cFieldId_type_pairParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Union_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Union_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypenameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypenameIDTerminalRuleCall_1_0_0 = (RuleCall)cTypenameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cTypenameAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cTypenameIDTerminalRuleCall_3_1_0_0 = (RuleCall)cTypenameAssignment_3_1_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cTypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_3_2_0 = (RuleCall)cTypeAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Union_type:
		//	"(" (typename+=ID ":")? type+=Type_expression ("," (typename+=ID ":")? type+=Type_expression)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" (typename+=ID ":")? type+=Type_expression ("," (typename+=ID ":")? type+=Type_expression)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//(typename+=ID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//typename+=ID
		public Assignment getTypenameAssignment_1_0() { return cTypenameAssignment_1_0; }

		//ID
		public RuleCall getTypenameIDTerminalRuleCall_1_0_0() { return cTypenameIDTerminalRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//type+=Type_expression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }

		//("," (typename+=ID ":")? type+=Type_expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//(typename+=ID ":")?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//typename+=ID
		public Assignment getTypenameAssignment_3_1_0() { return cTypenameAssignment_3_1_0; }

		//ID
		public RuleCall getTypenameIDTerminalRuleCall_3_1_0_0() { return cTypenameIDTerminalRuleCall_3_1_0_0; }

		//":"
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }

		//type+=Type_expression
		public Assignment getTypeAssignment_3_2() { return cTypeAssignment_3_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_3_2_0() { return cTypeType_expressionParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class Id_type_pairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Id_type_pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Id_type_pair:
		//	name=ID ":" type=Type_expression;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" type=Type_expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type_expression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }
	}

	public class Element_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTelemAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTelemT_ElementKeyword_0_0 = (Keyword)cTelemAssignment_0.eContents().get(0);
		private final Assignment cT_classAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cT_classT_classifiersParserRuleCall_1_0 = (RuleCall)cT_classAssignment_1.eContents().get(0);
		private final Assignment cT_refAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cT_refT_named_referencesParserRuleCall_2_0 = (RuleCall)cT_refAssignment_2.eContents().get(0);
		
		////element type rules
		//Element_type:
		//	telem?="T_Element" | t_class?=t_classifiers | t_ref?=t_named_references;
		@Override public ParserRule getRule() { return rule; }

		//telem?="T_Element" | t_class?=t_classifiers | t_ref?=t_named_references
		public Alternatives getAlternatives() { return cAlternatives; }

		//telem?="T_Element"
		public Assignment getTelemAssignment_0() { return cTelemAssignment_0; }

		//"T_Element"
		public Keyword getTelemT_ElementKeyword_0_0() { return cTelemT_ElementKeyword_0_0; }

		//t_class?=t_classifiers
		public Assignment getT_classAssignment_1() { return cT_classAssignment_1; }

		//t_classifiers
		public RuleCall getT_classT_classifiersParserRuleCall_1_0() { return cT_classT_classifiersParserRuleCall_1_0; }

		//t_ref?=t_named_references
		public Assignment getT_refAssignment_2() { return cT_refAssignment_2; }

		//t_named_references
		public RuleCall getT_refT_named_referencesParserRuleCall_2_0() { return cT_refT_named_referencesParserRuleCall_2_0; }
	}

	public class T_classifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_classifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_classAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_classT_ClassifierKeyword_0_0 = (Keyword)cT_classAssignment_0.eContents().get(0);
		private final Assignment cT_class_subtypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cT_class_subtypeT_classifier_subtypesParserRuleCall_1_0 = (RuleCall)cT_class_subtypeAssignment_1.eContents().get(0);
		
		//t_classifiers:
		//	t_class?="T_Classifier" | t_class_subtype?=t_classifier_subtypes;
		@Override public ParserRule getRule() { return rule; }

		//t_class?="T_Classifier" | t_class_subtype?=t_classifier_subtypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_class?="T_Classifier"
		public Assignment getT_classAssignment_0() { return cT_classAssignment_0; }

		//"T_Classifier"
		public Keyword getT_classT_ClassifierKeyword_0_0() { return cT_classT_ClassifierKeyword_0_0; }

		//t_class_subtype?=t_classifier_subtypes
		public Assignment getT_class_subtypeAssignment_1() { return cT_class_subtypeAssignment_1; }

		//t_classifier_subtypes
		public RuleCall getT_class_subtypeT_classifier_subtypesParserRuleCall_1_0() { return cT_class_subtypeT_classifier_subtypesParserRuleCall_1_0; }
	}

	public class T_classifier_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_classifier_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_ctypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_ctypeT_Component_Type_ClassifierKeyword_0_0 = (Keyword)cT_ctypeAssignment_0.eContents().get(0);
		private final Assignment cT_cimplAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_cimplT_Component_Impl_ClassifierKeyword_1_0 = (Keyword)cT_cimplAssignment_1.eContents().get(0);
		private final Assignment cT_fgclassAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_fgclassT_Feature_Group_ClassifierKeyword_2_0 = (Keyword)cT_fgclassAssignment_2.eContents().get(0);
		private final Assignment cT_annexclassAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_annexclassT_Annex_ClassifierKeyword_3_0 = (Keyword)cT_annexclassAssignment_3.eContents().get(0);
		
		//t_classifier_subtypes:
		//	t_ctype?="T_Component_Type_Classifier" | t_cimpl?="T_Component_Impl_Classifier" |
		//	t_fgclass?="T_Feature_Group_Classifier" | t_annexclass?="T_Annex_Classifier";
		@Override public ParserRule getRule() { return rule; }

		//t_ctype?="T_Component_Type_Classifier" | t_cimpl?="T_Component_Impl_Classifier" |
		//t_fgclass?="T_Feature_Group_Classifier" | t_annexclass?="T_Annex_Classifier"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_ctype?="T_Component_Type_Classifier"
		public Assignment getT_ctypeAssignment_0() { return cT_ctypeAssignment_0; }

		//"T_Component_Type_Classifier"
		public Keyword getT_ctypeT_Component_Type_ClassifierKeyword_0_0() { return cT_ctypeT_Component_Type_ClassifierKeyword_0_0; }

		//t_cimpl?="T_Component_Impl_Classifier"
		public Assignment getT_cimplAssignment_1() { return cT_cimplAssignment_1; }

		//"T_Component_Impl_Classifier"
		public Keyword getT_cimplT_Component_Impl_ClassifierKeyword_1_0() { return cT_cimplT_Component_Impl_ClassifierKeyword_1_0; }

		//t_fgclass?="T_Feature_Group_Classifier"
		public Assignment getT_fgclassAssignment_2() { return cT_fgclassAssignment_2; }

		//"T_Feature_Group_Classifier"
		public Keyword getT_fgclassT_Feature_Group_ClassifierKeyword_2_0() { return cT_fgclassT_Feature_Group_ClassifierKeyword_2_0; }

		//t_annexclass?="T_Annex_Classifier"
		public Assignment getT_annexclassAssignment_3() { return cT_annexclassAssignment_3; }

		//"T_Annex_Classifier"
		public Keyword getT_annexclassT_Annex_ClassifierKeyword_3_0() { return cT_annexclassT_Annex_ClassifierKeyword_3_0; }
	}

	public class T_named_referencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_named_references");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_nrefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_nrefT_Named_ReferenceKeyword_0_0 = (Keyword)cT_nrefAssignment_0.eContents().get(0);
		private final Assignment cT_nref_stAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cT_nref_stT_named_reference_subtypesParserRuleCall_1_0 = (RuleCall)cT_nref_stAssignment_1.eContents().get(0);
		
		//t_named_references:
		//	t_nref?="T_Named_Reference" | t_nref_st?=t_named_reference_subtypes;
		@Override public ParserRule getRule() { return rule; }

		//t_nref?="T_Named_Reference" | t_nref_st?=t_named_reference_subtypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_nref?="T_Named_Reference"
		public Assignment getT_nrefAssignment_0() { return cT_nrefAssignment_0; }

		//"T_Named_Reference"
		public Keyword getT_nrefT_Named_ReferenceKeyword_0_0() { return cT_nrefT_Named_ReferenceKeyword_0_0; }

		//t_nref_st?=t_named_reference_subtypes
		public Assignment getT_nref_stAssignment_1() { return cT_nref_stAssignment_1; }

		//t_named_reference_subtypes
		public RuleCall getT_nref_stT_named_reference_subtypesParserRuleCall_1_0() { return cT_nref_stT_named_reference_subtypesParserRuleCall_1_0; }
	}

	public class T_named_reference_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_named_reference_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_subc_stAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cT_subc_stT_subcomponent_subtypesParserRuleCall_0_0 = (RuleCall)cT_subc_stAssignment_0.eContents().get(0);
		private final RuleCall cT_connection_subtypesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cT_feature_subtypesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cT_flow_spec_subtypesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cT_flow_impl_subtypesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Assignment cT_sbcallAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cT_sbcallT_Subprogram_CallKeyword_5_0 = (Keyword)cT_sbcallAssignment_5.eContents().get(0);
		private final Assignment cT_callseqAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cT_callseqT_Call_SequenceKeyword_6_0 = (Keyword)cT_callseqAssignment_6.eContents().get(0);
		private final Assignment cT_eeflowAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cT_eeflowT_End_To_End_FlowKeyword_7_0 = (Keyword)cT_eeflowAssignment_7.eContents().get(0);
		private final Assignment cT_protoAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cT_protoT_PrototypeKeyword_8_0 = (Keyword)cT_protoAssignment_8.eContents().get(0);
		private final Assignment cT_modeAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cT_modeT_ModeKeyword_9_0 = (Keyword)cT_modeAssignment_9.eContents().get(0);
		private final Assignment cT_req_modeAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cT_req_modeT_Required_ModeKeyword_10_0 = (Keyword)cT_req_modeAssignment_10.eContents().get(0);
		private final Assignment cT_mod_transAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cT_mod_transT_Mode_TransitionKeyword_11_0 = (Keyword)cT_mod_transAssignment_11.eContents().get(0);
		private final Assignment cT_mode_trigAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cT_mode_trigT_Mode_Trigger_IdKeyword_12_0 = (Keyword)cT_mode_trigAssignment_12.eContents().get(0);
		
		//t_named_reference_subtypes:
		//	t_subc_st?=t_subcomponent_subtypes | t_connection_subtypes | t_feature_subtypes | t_flow_spec_subtypes |
		//	t_flow_impl_subtypes | t_sbcall?="T_Subprogram_Call" | t_callseq?="T_Call_Sequence" | t_eeflow?="T_End_To_End_Flow" |
		//	t_proto?="T_Prototype" | t_mode?="T_Mode" | t_req_mode?="T_Required_Mode" | t_mod_trans?="T_Mode_Transition" |
		//	t_mode_trig?="T_Mode_Trigger_Id";
		@Override public ParserRule getRule() { return rule; }

		//t_subc_st?=t_subcomponent_subtypes | t_connection_subtypes | t_feature_subtypes | t_flow_spec_subtypes |
		//t_flow_impl_subtypes | t_sbcall?="T_Subprogram_Call" | t_callseq?="T_Call_Sequence" | t_eeflow?="T_End_To_End_Flow" |
		//t_proto?="T_Prototype" | t_mode?="T_Mode" | t_req_mode?="T_Required_Mode" | t_mod_trans?="T_Mode_Transition" |
		//t_mode_trig?="T_Mode_Trigger_Id"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_subc_st?=t_subcomponent_subtypes
		public Assignment getT_subc_stAssignment_0() { return cT_subc_stAssignment_0; }

		//t_subcomponent_subtypes
		public RuleCall getT_subc_stT_subcomponent_subtypesParserRuleCall_0_0() { return cT_subc_stT_subcomponent_subtypesParserRuleCall_0_0; }

		//t_connection_subtypes
		public RuleCall getT_connection_subtypesParserRuleCall_1() { return cT_connection_subtypesParserRuleCall_1; }

		//t_feature_subtypes
		public RuleCall getT_feature_subtypesParserRuleCall_2() { return cT_feature_subtypesParserRuleCall_2; }

		//t_flow_spec_subtypes
		public RuleCall getT_flow_spec_subtypesParserRuleCall_3() { return cT_flow_spec_subtypesParserRuleCall_3; }

		//t_flow_impl_subtypes
		public RuleCall getT_flow_impl_subtypesParserRuleCall_4() { return cT_flow_impl_subtypesParserRuleCall_4; }

		//t_sbcall?="T_Subprogram_Call"
		public Assignment getT_sbcallAssignment_5() { return cT_sbcallAssignment_5; }

		//"T_Subprogram_Call"
		public Keyword getT_sbcallT_Subprogram_CallKeyword_5_0() { return cT_sbcallT_Subprogram_CallKeyword_5_0; }

		//t_callseq?="T_Call_Sequence"
		public Assignment getT_callseqAssignment_6() { return cT_callseqAssignment_6; }

		//"T_Call_Sequence"
		public Keyword getT_callseqT_Call_SequenceKeyword_6_0() { return cT_callseqT_Call_SequenceKeyword_6_0; }

		//t_eeflow?="T_End_To_End_Flow"
		public Assignment getT_eeflowAssignment_7() { return cT_eeflowAssignment_7; }

		//"T_End_To_End_Flow"
		public Keyword getT_eeflowT_End_To_End_FlowKeyword_7_0() { return cT_eeflowT_End_To_End_FlowKeyword_7_0; }

		//t_proto?="T_Prototype"
		public Assignment getT_protoAssignment_8() { return cT_protoAssignment_8; }

		//"T_Prototype"
		public Keyword getT_protoT_PrototypeKeyword_8_0() { return cT_protoT_PrototypeKeyword_8_0; }

		//t_mode?="T_Mode"
		public Assignment getT_modeAssignment_9() { return cT_modeAssignment_9; }

		//"T_Mode"
		public Keyword getT_modeT_ModeKeyword_9_0() { return cT_modeT_ModeKeyword_9_0; }

		//t_req_mode?="T_Required_Mode"
		public Assignment getT_req_modeAssignment_10() { return cT_req_modeAssignment_10; }

		//"T_Required_Mode"
		public Keyword getT_req_modeT_Required_ModeKeyword_10_0() { return cT_req_modeT_Required_ModeKeyword_10_0; }

		//t_mod_trans?="T_Mode_Transition"
		public Assignment getT_mod_transAssignment_11() { return cT_mod_transAssignment_11; }

		//"T_Mode_Transition"
		public Keyword getT_mod_transT_Mode_TransitionKeyword_11_0() { return cT_mod_transT_Mode_TransitionKeyword_11_0; }

		//t_mode_trig?="T_Mode_Trigger_Id"
		public Assignment getT_mode_trigAssignment_12() { return cT_mode_trigAssignment_12; }

		//"T_Mode_Trigger_Id"
		public Keyword getT_mode_trigT_Mode_Trigger_IdKeyword_12_0() { return cT_mode_trigT_Mode_Trigger_IdKeyword_12_0; }
	}

	public class T_subcomponent_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_subcomponent_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_subAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_subT_SubcomponentKeyword_0_0 = (Keyword)cT_subAssignment_0.eContents().get(0);
		private final Assignment cT_annex_subAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_annex_subT_Annex_SubcomponentKeyword_1_0 = (Keyword)cT_annex_subAssignment_1.eContents().get(0);
		private final Assignment cT_comp_typerefAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_comp_typerefT_Component_Type_RefKeyword_2_0 = (Keyword)cT_comp_typerefAssignment_2.eContents().get(0);
		private final Assignment cT_cimpl_stAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cT_cimpl_stT_component_impl_subtypesParserRuleCall_3_0 = (RuleCall)cT_cimpl_stAssignment_3.eContents().get(0);
		
		//t_subcomponent_subtypes:
		//	t_sub?="T_Subcomponent" | t_annex_sub?="T_Annex_Subcomponent" | t_comp_typeref?="T_Component_Type_Ref" |
		//	t_cimpl_st?=t_component_impl_subtypes;
		@Override public ParserRule getRule() { return rule; }

		//t_sub?="T_Subcomponent" | t_annex_sub?="T_Annex_Subcomponent" | t_comp_typeref?="T_Component_Type_Ref" |
		//t_cimpl_st?=t_component_impl_subtypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_sub?="T_Subcomponent"
		public Assignment getT_subAssignment_0() { return cT_subAssignment_0; }

		//"T_Subcomponent"
		public Keyword getT_subT_SubcomponentKeyword_0_0() { return cT_subT_SubcomponentKeyword_0_0; }

		//t_annex_sub?="T_Annex_Subcomponent"
		public Assignment getT_annex_subAssignment_1() { return cT_annex_subAssignment_1; }

		//"T_Annex_Subcomponent"
		public Keyword getT_annex_subT_Annex_SubcomponentKeyword_1_0() { return cT_annex_subT_Annex_SubcomponentKeyword_1_0; }

		//t_comp_typeref?="T_Component_Type_Ref"
		public Assignment getT_comp_typerefAssignment_2() { return cT_comp_typerefAssignment_2; }

		//"T_Component_Type_Ref"
		public Keyword getT_comp_typerefT_Component_Type_RefKeyword_2_0() { return cT_comp_typerefT_Component_Type_RefKeyword_2_0; }

		//t_cimpl_st?=t_component_impl_subtypes
		public Assignment getT_cimpl_stAssignment_3() { return cT_cimpl_stAssignment_3; }

		//t_component_impl_subtypes
		public RuleCall getT_cimpl_stT_component_impl_subtypesParserRuleCall_3_0() { return cT_cimpl_stT_component_impl_subtypesParserRuleCall_3_0; }
	}

	public class T_component_impl_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_component_impl_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_comp_imprefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_comp_imprefT_Component_Impl_RefKeyword_0_0 = (Keyword)cT_comp_imprefAssignment_0.eContents().get(0);
		private final Assignment cT_abstractAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_abstractT_AbstractKeyword_1_0 = (Keyword)cT_abstractAssignment_1.eContents().get(0);
		private final Assignment cT_sysAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_sysT_SystemKeyword_2_0 = (Keyword)cT_sysAssignment_2.eContents().get(0);
		private final Assignment cT_procAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_procT_ProcessorKeyword_3_0 = (Keyword)cT_procAssignment_3.eContents().get(0);
		private final Assignment cT_virt_procAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cT_virt_procT_Virtual_ProcessorKeyword_4_0 = (Keyword)cT_virt_procAssignment_4.eContents().get(0);
		private final Assignment cT_busAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cT_busT_BusKeyword_5_0 = (Keyword)cT_busAssignment_5.eContents().get(0);
		private final Assignment cT_vbusAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cT_vbusT_Virtual_BusKeyword_6_0 = (Keyword)cT_vbusAssignment_6.eContents().get(0);
		private final Assignment cT_memAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cT_memT_MemoryKeyword_7_0 = (Keyword)cT_memAssignment_7.eContents().get(0);
		private final Assignment cT_procAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cT_procT_ProcessKeyword_8_0 = (Keyword)cT_procAssignment_8.eContents().get(0);
		private final Assignment cT_tgAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cT_tgT_Thread_GroupKeyword_9_0 = (Keyword)cT_tgAssignment_9.eContents().get(0);
		private final Assignment cT_tAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cT_tT_ThreadKeyword_10_0 = (Keyword)cT_tAssignment_10.eContents().get(0);
		private final Assignment cT_dAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cT_dT_DataKeyword_11_0 = (Keyword)cT_dAssignment_11.eContents().get(0);
		private final Assignment cT_subprogAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cT_subprogT_SubprogramKeyword_12_0 = (Keyword)cT_subprogAssignment_12.eContents().get(0);
		private final Assignment cT_subprog_gAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final Keyword cT_subprog_gT_Subprogram_GroupKeyword_13_0 = (Keyword)cT_subprog_gAssignment_13.eContents().get(0);
		
		//t_component_impl_subtypes:
		//	t_comp_impref?="T_Component_Impl_Ref" | t_abstract?="T_Abstract" | t_sys?="T_System" | t_proc?="T_Processor" |
		//	t_virt_proc?="T_Virtual_Processor" | t_bus?="T_Bus" | t_vbus?="T_Virtual_Bus" | t_mem?="T_Memory" |
		//	t_proc?="T_Process" | t_tg?="T_Thread_Group" | t_t?="T_Thread" | t_d?="T_Data" | t_subprog?="T_Subprogram" |
		//	t_subprog_g?="T_Subprogram_Group";
		@Override public ParserRule getRule() { return rule; }

		//t_comp_impref?="T_Component_Impl_Ref" | t_abstract?="T_Abstract" | t_sys?="T_System" | t_proc?="T_Processor" |
		//t_virt_proc?="T_Virtual_Processor" | t_bus?="T_Bus" | t_vbus?="T_Virtual_Bus" | t_mem?="T_Memory" |
		//t_proc?="T_Process" | t_tg?="T_Thread_Group" | t_t?="T_Thread" | t_d?="T_Data" | t_subprog?="T_Subprogram" |
		//t_subprog_g?="T_Subprogram_Group"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_comp_impref?="T_Component_Impl_Ref"
		public Assignment getT_comp_imprefAssignment_0() { return cT_comp_imprefAssignment_0; }

		//"T_Component_Impl_Ref"
		public Keyword getT_comp_imprefT_Component_Impl_RefKeyword_0_0() { return cT_comp_imprefT_Component_Impl_RefKeyword_0_0; }

		//t_abstract?="T_Abstract"
		public Assignment getT_abstractAssignment_1() { return cT_abstractAssignment_1; }

		//"T_Abstract"
		public Keyword getT_abstractT_AbstractKeyword_1_0() { return cT_abstractT_AbstractKeyword_1_0; }

		//t_sys?="T_System"
		public Assignment getT_sysAssignment_2() { return cT_sysAssignment_2; }

		//"T_System"
		public Keyword getT_sysT_SystemKeyword_2_0() { return cT_sysT_SystemKeyword_2_0; }

		//t_proc?="T_Processor"
		public Assignment getT_procAssignment_3() { return cT_procAssignment_3; }

		//"T_Processor"
		public Keyword getT_procT_ProcessorKeyword_3_0() { return cT_procT_ProcessorKeyword_3_0; }

		//t_virt_proc?="T_Virtual_Processor"
		public Assignment getT_virt_procAssignment_4() { return cT_virt_procAssignment_4; }

		//"T_Virtual_Processor"
		public Keyword getT_virt_procT_Virtual_ProcessorKeyword_4_0() { return cT_virt_procT_Virtual_ProcessorKeyword_4_0; }

		//t_bus?="T_Bus"
		public Assignment getT_busAssignment_5() { return cT_busAssignment_5; }

		//"T_Bus"
		public Keyword getT_busT_BusKeyword_5_0() { return cT_busT_BusKeyword_5_0; }

		//t_vbus?="T_Virtual_Bus"
		public Assignment getT_vbusAssignment_6() { return cT_vbusAssignment_6; }

		//"T_Virtual_Bus"
		public Keyword getT_vbusT_Virtual_BusKeyword_6_0() { return cT_vbusT_Virtual_BusKeyword_6_0; }

		//t_mem?="T_Memory"
		public Assignment getT_memAssignment_7() { return cT_memAssignment_7; }

		//"T_Memory"
		public Keyword getT_memT_MemoryKeyword_7_0() { return cT_memT_MemoryKeyword_7_0; }

		//t_proc?="T_Process"
		public Assignment getT_procAssignment_8() { return cT_procAssignment_8; }

		//"T_Process"
		public Keyword getT_procT_ProcessKeyword_8_0() { return cT_procT_ProcessKeyword_8_0; }

		//t_tg?="T_Thread_Group"
		public Assignment getT_tgAssignment_9() { return cT_tgAssignment_9; }

		//"T_Thread_Group"
		public Keyword getT_tgT_Thread_GroupKeyword_9_0() { return cT_tgT_Thread_GroupKeyword_9_0; }

		//t_t?="T_Thread"
		public Assignment getT_tAssignment_10() { return cT_tAssignment_10; }

		//"T_Thread"
		public Keyword getT_tT_ThreadKeyword_10_0() { return cT_tT_ThreadKeyword_10_0; }

		//t_d?="T_Data"
		public Assignment getT_dAssignment_11() { return cT_dAssignment_11; }

		//"T_Data"
		public Keyword getT_dT_DataKeyword_11_0() { return cT_dT_DataKeyword_11_0; }

		//t_subprog?="T_Subprogram"
		public Assignment getT_subprogAssignment_12() { return cT_subprogAssignment_12; }

		//"T_Subprogram"
		public Keyword getT_subprogT_SubprogramKeyword_12_0() { return cT_subprogT_SubprogramKeyword_12_0; }

		//t_subprog_g?="T_Subprogram_Group"
		public Assignment getT_subprog_gAssignment_13() { return cT_subprog_gAssignment_13; }

		//"T_Subprogram_Group"
		public Keyword getT_subprog_gT_Subprogram_GroupKeyword_13_0() { return cT_subprog_gT_Subprogram_GroupKeyword_13_0; }
	}

	public class T_connection_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_connection_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_connAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_connT_ConnectionKeyword_0_0 = (Keyword)cT_connAssignment_0.eContents().get(0);
		private final Assignment cT_feat_connAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_feat_connT_Feature_ConnectionKeyword_1_0 = (Keyword)cT_feat_connAssignment_1.eContents().get(0);
		private final Assignment cT_port_connAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_port_connT_Port_ConnectionKeyword_2_0 = (Keyword)cT_port_connAssignment_2.eContents().get(0);
		private final Assignment cT_parm_connAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_parm_connT_Parameter_ConnectionKeyword_3_0 = (Keyword)cT_parm_connAssignment_3.eContents().get(0);
		private final Assignment cT_acc_conAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cT_acc_conT_Access_ConnectionKeyword_4_0 = (Keyword)cT_acc_conAssignment_4.eContents().get(0);
		private final Assignment cT_fg_connAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cT_fg_connT_Feature_Group_ConnectionKeyword_5_0 = (Keyword)cT_fg_connAssignment_5.eContents().get(0);
		
		//t_connection_subtypes:
		//	t_conn?="T_Connection" | t_feat_conn?="T_Feature_Connection" | t_port_conn?="T_Port_Connection" |
		//	t_parm_conn?="T_Parameter_Connection" | t_acc_con?="T_Access_Connection" | t_fg_conn?="T_Feature_Group_Connection";
		@Override public ParserRule getRule() { return rule; }

		//t_conn?="T_Connection" | t_feat_conn?="T_Feature_Connection" | t_port_conn?="T_Port_Connection" |
		//t_parm_conn?="T_Parameter_Connection" | t_acc_con?="T_Access_Connection" | t_fg_conn?="T_Feature_Group_Connection"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_conn?="T_Connection"
		public Assignment getT_connAssignment_0() { return cT_connAssignment_0; }

		//"T_Connection"
		public Keyword getT_connT_ConnectionKeyword_0_0() { return cT_connT_ConnectionKeyword_0_0; }

		//t_feat_conn?="T_Feature_Connection"
		public Assignment getT_feat_connAssignment_1() { return cT_feat_connAssignment_1; }

		//"T_Feature_Connection"
		public Keyword getT_feat_connT_Feature_ConnectionKeyword_1_0() { return cT_feat_connT_Feature_ConnectionKeyword_1_0; }

		//t_port_conn?="T_Port_Connection"
		public Assignment getT_port_connAssignment_2() { return cT_port_connAssignment_2; }

		//"T_Port_Connection"
		public Keyword getT_port_connT_Port_ConnectionKeyword_2_0() { return cT_port_connT_Port_ConnectionKeyword_2_0; }

		//t_parm_conn?="T_Parameter_Connection"
		public Assignment getT_parm_connAssignment_3() { return cT_parm_connAssignment_3; }

		//"T_Parameter_Connection"
		public Keyword getT_parm_connT_Parameter_ConnectionKeyword_3_0() { return cT_parm_connT_Parameter_ConnectionKeyword_3_0; }

		//t_acc_con?="T_Access_Connection"
		public Assignment getT_acc_conAssignment_4() { return cT_acc_conAssignment_4; }

		//"T_Access_Connection"
		public Keyword getT_acc_conT_Access_ConnectionKeyword_4_0() { return cT_acc_conT_Access_ConnectionKeyword_4_0; }

		//t_fg_conn?="T_Feature_Group_Connection"
		public Assignment getT_fg_connAssignment_5() { return cT_fg_connAssignment_5; }

		//"T_Feature_Group_Connection"
		public Keyword getT_fg_connT_Feature_Group_ConnectionKeyword_5_0() { return cT_fg_connT_Feature_Group_ConnectionKeyword_5_0; }
	}

	public class T_feature_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_feature_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_featAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_featT_FeatureKeyword_0_0 = (Keyword)cT_featAssignment_0.eContents().get(0);
		private final Assignment cT_abs_featAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_abs_featT_Abstract_FeatureKeyword_1_0 = (Keyword)cT_abs_featAssignment_1.eContents().get(0);
		private final Assignment cT_parmAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_parmT_ParameterKeyword_2_0 = (Keyword)cT_parmAssignment_2.eContents().get(0);
		private final Assignment cT_fgAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_fgT_Feature_GroupKeyword_3_0 = (Keyword)cT_fgAssignment_3.eContents().get(0);
		private final RuleCall cT_port_subtypesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cT_access_subtypesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//t_feature_subtypes:
		//	t_feat?="T_Feature" | t_abs_feat?="T_Abstract_Feature" | t_parm?="T_Parameter" | t_fg?="T_Feature_Group" |
		//	t_port_subtypes | t_access_subtypes;
		@Override public ParserRule getRule() { return rule; }

		//t_feat?="T_Feature" | t_abs_feat?="T_Abstract_Feature" | t_parm?="T_Parameter" | t_fg?="T_Feature_Group" |
		//t_port_subtypes | t_access_subtypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_feat?="T_Feature"
		public Assignment getT_featAssignment_0() { return cT_featAssignment_0; }

		//"T_Feature"
		public Keyword getT_featT_FeatureKeyword_0_0() { return cT_featT_FeatureKeyword_0_0; }

		//t_abs_feat?="T_Abstract_Feature"
		public Assignment getT_abs_featAssignment_1() { return cT_abs_featAssignment_1; }

		//"T_Abstract_Feature"
		public Keyword getT_abs_featT_Abstract_FeatureKeyword_1_0() { return cT_abs_featT_Abstract_FeatureKeyword_1_0; }

		//t_parm?="T_Parameter"
		public Assignment getT_parmAssignment_2() { return cT_parmAssignment_2; }

		//"T_Parameter"
		public Keyword getT_parmT_ParameterKeyword_2_0() { return cT_parmT_ParameterKeyword_2_0; }

		//t_fg?="T_Feature_Group"
		public Assignment getT_fgAssignment_3() { return cT_fgAssignment_3; }

		//"T_Feature_Group"
		public Keyword getT_fgT_Feature_GroupKeyword_3_0() { return cT_fgT_Feature_GroupKeyword_3_0; }

		//t_port_subtypes
		public RuleCall getT_port_subtypesParserRuleCall_4() { return cT_port_subtypesParserRuleCall_4; }

		//t_access_subtypes
		public RuleCall getT_access_subtypesParserRuleCall_5() { return cT_access_subtypesParserRuleCall_5; }
	}

	public class T_access_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_access_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_accessAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_accessT_AccessKeyword_0_0 = (Keyword)cT_accessAssignment_0.eContents().get(0);
		private final Assignment cT_data_accAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_data_accT_Data_AccessKeyword_1_0 = (Keyword)cT_data_accAssignment_1.eContents().get(0);
		private final Assignment cT_sub_accAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_sub_accT_Subprogram_AccessKeyword_2_0 = (Keyword)cT_sub_accAssignment_2.eContents().get(0);
		private final Assignment cT_sub_gr_accAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_sub_gr_accT_Subprogram_Group_AccessKeyword_3_0 = (Keyword)cT_sub_gr_accAssignment_3.eContents().get(0);
		private final Assignment cT_bus_accAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cT_bus_accT_Bus_AccessKeyword_4_0 = (Keyword)cT_bus_accAssignment_4.eContents().get(0);
		
		//t_access_subtypes:
		//	t_access?="T_Access" | t_data_acc?="T_Data_Access" | t_sub_acc?="T_Subprogram_Access" |
		//	t_sub_gr_acc?="T_Subprogram_Group_Access" | t_bus_acc?="T_Bus_Access";
		@Override public ParserRule getRule() { return rule; }

		//t_access?="T_Access" | t_data_acc?="T_Data_Access" | t_sub_acc?="T_Subprogram_Access" |
		//t_sub_gr_acc?="T_Subprogram_Group_Access" | t_bus_acc?="T_Bus_Access"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_access?="T_Access"
		public Assignment getT_accessAssignment_0() { return cT_accessAssignment_0; }

		//"T_Access"
		public Keyword getT_accessT_AccessKeyword_0_0() { return cT_accessT_AccessKeyword_0_0; }

		//t_data_acc?="T_Data_Access"
		public Assignment getT_data_accAssignment_1() { return cT_data_accAssignment_1; }

		//"T_Data_Access"
		public Keyword getT_data_accT_Data_AccessKeyword_1_0() { return cT_data_accT_Data_AccessKeyword_1_0; }

		//t_sub_acc?="T_Subprogram_Access"
		public Assignment getT_sub_accAssignment_2() { return cT_sub_accAssignment_2; }

		//"T_Subprogram_Access"
		public Keyword getT_sub_accT_Subprogram_AccessKeyword_2_0() { return cT_sub_accT_Subprogram_AccessKeyword_2_0; }

		//t_sub_gr_acc?="T_Subprogram_Group_Access"
		public Assignment getT_sub_gr_accAssignment_3() { return cT_sub_gr_accAssignment_3; }

		//"T_Subprogram_Group_Access"
		public Keyword getT_sub_gr_accT_Subprogram_Group_AccessKeyword_3_0() { return cT_sub_gr_accT_Subprogram_Group_AccessKeyword_3_0; }

		//t_bus_acc?="T_Bus_Access"
		public Assignment getT_bus_accAssignment_4() { return cT_bus_accAssignment_4; }

		//"T_Bus_Access"
		public Keyword getT_bus_accT_Bus_AccessKeyword_4_0() { return cT_bus_accT_Bus_AccessKeyword_4_0; }
	}

	public class T_port_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_port_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_portAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_portT_PortKeyword_0_0 = (Keyword)cT_portAssignment_0.eContents().get(0);
		private final Assignment cT_d_portAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_d_portT_Data_PortKeyword_1_0 = (Keyword)cT_d_portAssignment_1.eContents().get(0);
		private final Assignment cT_ev_portAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_ev_portT_Event_PortKeyword_2_0 = (Keyword)cT_ev_portAssignment_2.eContents().get(0);
		private final Assignment cT_evd_portAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_evd_portT_Event_Data_PortKeyword_3_0 = (Keyword)cT_evd_portAssignment_3.eContents().get(0);
		
		//t_port_subtypes:
		//	t_port?="T_Port" | t_d_port?="T_Data_Port" | t_ev_port?="T_Event_Port" | t_evd_port?="T_Event_Data_Port";
		@Override public ParserRule getRule() { return rule; }

		//t_port?="T_Port" | t_d_port?="T_Data_Port" | t_ev_port?="T_Event_Port" | t_evd_port?="T_Event_Data_Port"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_port?="T_Port"
		public Assignment getT_portAssignment_0() { return cT_portAssignment_0; }

		//"T_Port"
		public Keyword getT_portT_PortKeyword_0_0() { return cT_portT_PortKeyword_0_0; }

		//t_d_port?="T_Data_Port"
		public Assignment getT_d_portAssignment_1() { return cT_d_portAssignment_1; }

		//"T_Data_Port"
		public Keyword getT_d_portT_Data_PortKeyword_1_0() { return cT_d_portT_Data_PortKeyword_1_0; }

		//t_ev_port?="T_Event_Port"
		public Assignment getT_ev_portAssignment_2() { return cT_ev_portAssignment_2; }

		//"T_Event_Port"
		public Keyword getT_ev_portT_Event_PortKeyword_2_0() { return cT_ev_portT_Event_PortKeyword_2_0; }

		//t_evd_port?="T_Event_Data_Port"
		public Assignment getT_evd_portAssignment_3() { return cT_evd_portAssignment_3; }

		//"T_Event_Data_Port"
		public Keyword getT_evd_portT_Event_Data_PortKeyword_3_0() { return cT_evd_portT_Event_Data_PortKeyword_3_0; }
	}

	public class T_flow_spec_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_flow_spec_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_f_specAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_f_specT_Flow_SpecKeyword_0_0 = (Keyword)cT_f_specAssignment_0.eContents().get(0);
		private final Assignment cT_f_spec_sourceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_f_spec_sourceT_Flow_Spec_SourceKeyword_1_0 = (Keyword)cT_f_spec_sourceAssignment_1.eContents().get(0);
		private final Assignment cT_f_spec_sinkAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_f_spec_sinkT_Flow_Spec_SinkKeyword_2_0 = (Keyword)cT_f_spec_sinkAssignment_2.eContents().get(0);
		private final Assignment cT_f_spec_pathAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_f_spec_pathT_Flow_Spec_PathKeyword_3_0 = (Keyword)cT_f_spec_pathAssignment_3.eContents().get(0);
		
		//t_flow_spec_subtypes:
		//	t_f_spec?="T_Flow_Spec" | t_f_spec_source?="T_Flow_Spec_Source" | t_f_spec_sink?="T_Flow_Spec_Sink" |
		//	t_f_spec_path?="T_Flow_Spec_Path";
		@Override public ParserRule getRule() { return rule; }

		//t_f_spec?="T_Flow_Spec" | t_f_spec_source?="T_Flow_Spec_Source" | t_f_spec_sink?="T_Flow_Spec_Sink" |
		//t_f_spec_path?="T_Flow_Spec_Path"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_f_spec?="T_Flow_Spec"
		public Assignment getT_f_specAssignment_0() { return cT_f_specAssignment_0; }

		//"T_Flow_Spec"
		public Keyword getT_f_specT_Flow_SpecKeyword_0_0() { return cT_f_specT_Flow_SpecKeyword_0_0; }

		//t_f_spec_source?="T_Flow_Spec_Source"
		public Assignment getT_f_spec_sourceAssignment_1() { return cT_f_spec_sourceAssignment_1; }

		//"T_Flow_Spec_Source"
		public Keyword getT_f_spec_sourceT_Flow_Spec_SourceKeyword_1_0() { return cT_f_spec_sourceT_Flow_Spec_SourceKeyword_1_0; }

		//t_f_spec_sink?="T_Flow_Spec_Sink"
		public Assignment getT_f_spec_sinkAssignment_2() { return cT_f_spec_sinkAssignment_2; }

		//"T_Flow_Spec_Sink"
		public Keyword getT_f_spec_sinkT_Flow_Spec_SinkKeyword_2_0() { return cT_f_spec_sinkT_Flow_Spec_SinkKeyword_2_0; }

		//t_f_spec_path?="T_Flow_Spec_Path"
		public Assignment getT_f_spec_pathAssignment_3() { return cT_f_spec_pathAssignment_3; }

		//"T_Flow_Spec_Path"
		public Keyword getT_f_spec_pathT_Flow_Spec_PathKeyword_3_0() { return cT_f_spec_pathT_Flow_Spec_PathKeyword_3_0; }
	}

	public class T_flow_impl_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_flow_impl_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_f_iAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_f_iT_Flow_ImplKeyword_0_0 = (Keyword)cT_f_iAssignment_0.eContents().get(0);
		private final Assignment cT_f_i_sourceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_f_i_sourceT_Flow_Impl_SourceKeyword_1_0 = (Keyword)cT_f_i_sourceAssignment_1.eContents().get(0);
		private final Assignment cT_f_i_sinkAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_f_i_sinkT_Flow_Impl_SinkKeyword_2_0 = (Keyword)cT_f_i_sinkAssignment_2.eContents().get(0);
		private final Assignment cT_f_i_pathAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_f_i_pathT_Flow_Impl_PathKeyword_3_0 = (Keyword)cT_f_i_pathAssignment_3.eContents().get(0);
		
		//t_flow_impl_subtypes:
		//	t_f_i?="T_Flow_Impl" | t_f_i_source?="T_Flow_Impl_Source" | t_f_i_sink?="T_Flow_Impl_Sink" |
		//	t_f_i_path?="T_Flow_Impl_Path";
		@Override public ParserRule getRule() { return rule; }

		//t_f_i?="T_Flow_Impl" | t_f_i_source?="T_Flow_Impl_Source" | t_f_i_sink?="T_Flow_Impl_Sink" |
		//t_f_i_path?="T_Flow_Impl_Path"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_f_i?="T_Flow_Impl"
		public Assignment getT_f_iAssignment_0() { return cT_f_iAssignment_0; }

		//"T_Flow_Impl"
		public Keyword getT_f_iT_Flow_ImplKeyword_0_0() { return cT_f_iT_Flow_ImplKeyword_0_0; }

		//t_f_i_source?="T_Flow_Impl_Source"
		public Assignment getT_f_i_sourceAssignment_1() { return cT_f_i_sourceAssignment_1; }

		//"T_Flow_Impl_Source"
		public Keyword getT_f_i_sourceT_Flow_Impl_SourceKeyword_1_0() { return cT_f_i_sourceT_Flow_Impl_SourceKeyword_1_0; }

		//t_f_i_sink?="T_Flow_Impl_Sink"
		public Assignment getT_f_i_sinkAssignment_2() { return cT_f_i_sinkAssignment_2; }

		//"T_Flow_Impl_Sink"
		public Keyword getT_f_i_sinkT_Flow_Impl_SinkKeyword_2_0() { return cT_f_i_sinkT_Flow_Impl_SinkKeyword_2_0; }

		//t_f_i_path?="T_Flow_Impl_Path"
		public Assignment getT_f_i_pathAssignment_3() { return cT_f_i_pathAssignment_3; }

		//"T_Flow_Impl_Path"
		public Keyword getT_f_i_pathT_Flow_Impl_PathKeyword_3_0() { return cT_f_i_pathT_Flow_Impl_PathKeyword_3_0; }
	}

	public class FQCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//// fully qualified classifier name (always includes package name
		//FQCREF:
		//	(ID "::")+ ID ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//(ID "::")+ ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")+
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class QCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QCREF:
		//	(ID "::")* ID ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//(ID "::")* ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class QPREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QPREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QPREF:
		//	ID ("::" ID)?;
		@Override public ParserRule getRule() { return rule; }

		//ID ("::" ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "::" ID)?
		public Group getGroup_1() { return cGroup_1; }

		//=> "::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final MCSGrammarRootElements pMCSGrammarRoot;
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final MCSAnnexLibraryElements pMCSAnnexLibrary;
	private final Type_declarationElements pType_declaration;
	private final Constant_declarationElements pConstant_declaration;
	private final MCSViewpointElements pMCSViewpoint;
	private final Enforcement_policyElements pEnforcement_policy;
	private final PackageScriptElements pPackageScript;
	private final AppliesToClauseElements pAppliesToClause;
	private final ClassifierCategoryElements pClassifierCategory;
	private final ComponentCategoryElements pComponentCategory;
	private final FeatureGroupClassifierReferenceElements pFeatureGroupClassifierReference;
	private final ViewpointReferenceElements pViewpointReference;
	private final ConstraintsBlockElements pConstraintsBlock;
	private final Labelled_check_statementElements pLabelled_check_statement;
	private final Check_statementElements pCheck_statement;
	private final Block_label_idElements pBlock_label_id;
	private final Check_label_idElements pCheck_label_id;
	private final Check_theoremElements pCheck_theorem;
	private final ModeSpecElements pModeSpec;
	private final ModeNameElements pModeName;
	private final Check_assertionElements pCheck_assertion;
	private final Root_elementElements pRoot_element;
	private final Property_referenceElements pProperty_reference;
	private final Element_referenceElements pElement_reference;
	private final ContainmentPathElementElements pContainmentPathElement;
	private final ArrayRangeElements pArrayRange;
	private final PackageEnforceElements pPackageEnforce;
	private final Assertion_expressionElements pAssertion_expression;
	private final String_expressionElements pString_expression;
	private final Constant_expressionElements pConstant_expression;
	private final ExpressionElements pExpression;
	private final XLiteralElements pXLiteral;
	private final BooleanTermElements pBooleanTerm;
	private final CollectionTermElements pCollectionTerm;
	private final Set_comprehensionElements pSet_comprehension;
	private final Query_element_setElements pQuery_element_set;
	private final Element_typesElements pElement_types;
	private final MCSAnnexSubclauseElements pMCSAnnexSubclause;
	private final ClassifierEnforceElements pClassifierEnforce;
	private final ClassifierScriptElements pClassifierScript;
	private final Function_declarationElements pFunction_declaration;
	private final ArgumentElements pArgument;
	private final MCSClosureElements pMCSClosure;
	private final Theorem_declarationElements pTheorem_declaration;
	private final In_modes_listElements pIn_modes_list;
	private final Local_declarationElements pLocal_declaration;
	private final Theorem_statementElements pTheorem_statement;
	private final Basic_statementElements pBasic_statement;
	private final IterationElements pIteration;
	private final Type_expressionElements pType_expression;
	private final Basic_typeElements pBasic_type;
	private final UnnamedFunctionTypeElements pUnnamedFunctionType;
	private final UnnamedBooleanTypeElements pUnnamedBooleanType;
	private final UnnamedStringTypeElements pUnnamedStringType;
	private final UnnamedEnumerationTypeElements pUnnamedEnumerationType;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final UnnamedUnitsTypeElements pUnnamedUnitsType;
	private final UnitLiteralElements pUnitLiteral;
	private final UnitLiteralConversionElements pUnitLiteralConversion;
	private final NumberValueElements pNumberValue;
	private final RealLitElements pRealLit;
	private final IntegerLitElements pIntegerLit;
	private final SignedIntElements pSignedInt;
	private final SignedRealElements pSignedReal;
	private final UnnamedIntegerTypeElements pUnnamedIntegerType;
	private final IntegerRangeElements pIntegerRange;
	private final IntegerTermElements pIntegerTerm;
	private final SignedConstantElements pSignedConstant;
	private final PlusMinusElements pPlusMinus;
	private final ConstantValueElements pConstantValue;
	private final UnnamedRealTypeElements pUnnamedRealType;
	private final RealRangeElements pRealRange;
	private final RealTermElements pRealTerm;
	private final UnnamedRangeTypeElements pUnnamedRangeType;
	private final UnnamedClassifierTypeElements pUnnamedClassifierType;
	private final UnnamedReferenceTypeElements pUnnamedReferenceType;
	private final QMReferenceElements pQMReference;
	private final QCReferenceElements pQCReference;
	private final Composite_typeElements pComposite_type;
	private final Set_typeElements pSet_type;
	private final List_typeElements pList_type;
	private final Map_typeElements pMap_type;
	private final Record_typeElements pRecord_type;
	private final Union_typeElements pUnion_type;
	private final Id_type_pairElements pId_type_pair;
	private final Element_typeElements pElement_type;
	private final T_classifiersElements pT_classifiers;
	private final T_classifier_subtypesElements pT_classifier_subtypes;
	private final T_named_referencesElements pT_named_references;
	private final T_named_reference_subtypesElements pT_named_reference_subtypes;
	private final T_subcomponent_subtypesElements pT_subcomponent_subtypes;
	private final T_component_impl_subtypesElements pT_component_impl_subtypes;
	private final T_connection_subtypesElements pT_connection_subtypes;
	private final T_feature_subtypesElements pT_feature_subtypes;
	private final T_access_subtypesElements pT_access_subtypes;
	private final T_port_subtypesElements pT_port_subtypes;
	private final T_flow_spec_subtypesElements pT_flow_spec_subtypes;
	private final T_flow_impl_subtypesElements pT_flow_impl_subtypes;
	private final TerminalRule tID;
	private final FQCREFElements pFQCREF;
	private final QCREFElements pQCREF;
	private final QPREFElements pQPREF;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public MCSGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pMCSGrammarRoot = new MCSGrammarRootElements();
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pMCSAnnexLibrary = new MCSAnnexLibraryElements();
		this.pType_declaration = new Type_declarationElements();
		this.pConstant_declaration = new Constant_declarationElements();
		this.pMCSViewpoint = new MCSViewpointElements();
		this.pEnforcement_policy = new Enforcement_policyElements();
		this.pPackageScript = new PackageScriptElements();
		this.pAppliesToClause = new AppliesToClauseElements();
		this.pClassifierCategory = new ClassifierCategoryElements();
		this.pComponentCategory = new ComponentCategoryElements();
		this.pFeatureGroupClassifierReference = new FeatureGroupClassifierReferenceElements();
		this.pViewpointReference = new ViewpointReferenceElements();
		this.pConstraintsBlock = new ConstraintsBlockElements();
		this.pLabelled_check_statement = new Labelled_check_statementElements();
		this.pCheck_statement = new Check_statementElements();
		this.pBlock_label_id = new Block_label_idElements();
		this.pCheck_label_id = new Check_label_idElements();
		this.pCheck_theorem = new Check_theoremElements();
		this.pModeSpec = new ModeSpecElements();
		this.pModeName = new ModeNameElements();
		this.pCheck_assertion = new Check_assertionElements();
		this.pRoot_element = new Root_elementElements();
		this.pProperty_reference = new Property_referenceElements();
		this.pElement_reference = new Element_referenceElements();
		this.pContainmentPathElement = new ContainmentPathElementElements();
		this.pArrayRange = new ArrayRangeElements();
		this.pPackageEnforce = new PackageEnforceElements();
		this.pAssertion_expression = new Assertion_expressionElements();
		this.pString_expression = new String_expressionElements();
		this.pConstant_expression = new Constant_expressionElements();
		this.pExpression = new ExpressionElements();
		this.pXLiteral = new XLiteralElements();
		this.pBooleanTerm = new BooleanTermElements();
		this.pCollectionTerm = new CollectionTermElements();
		this.pSet_comprehension = new Set_comprehensionElements();
		this.pQuery_element_set = new Query_element_setElements();
		this.pElement_types = new Element_typesElements();
		this.pMCSAnnexSubclause = new MCSAnnexSubclauseElements();
		this.pClassifierEnforce = new ClassifierEnforceElements();
		this.pClassifierScript = new ClassifierScriptElements();
		this.pFunction_declaration = new Function_declarationElements();
		this.pArgument = new ArgumentElements();
		this.pMCSClosure = new MCSClosureElements();
		this.pTheorem_declaration = new Theorem_declarationElements();
		this.pIn_modes_list = new In_modes_listElements();
		this.pLocal_declaration = new Local_declarationElements();
		this.pTheorem_statement = new Theorem_statementElements();
		this.pBasic_statement = new Basic_statementElements();
		this.pIteration = new IterationElements();
		this.pType_expression = new Type_expressionElements();
		this.pBasic_type = new Basic_typeElements();
		this.pUnnamedFunctionType = new UnnamedFunctionTypeElements();
		this.pUnnamedBooleanType = new UnnamedBooleanTypeElements();
		this.pUnnamedStringType = new UnnamedStringTypeElements();
		this.pUnnamedEnumerationType = new UnnamedEnumerationTypeElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.pUnnamedUnitsType = new UnnamedUnitsTypeElements();
		this.pUnitLiteral = new UnitLiteralElements();
		this.pUnitLiteralConversion = new UnitLiteralConversionElements();
		this.pNumberValue = new NumberValueElements();
		this.pRealLit = new RealLitElements();
		this.pIntegerLit = new IntegerLitElements();
		this.pSignedInt = new SignedIntElements();
		this.pSignedReal = new SignedRealElements();
		this.pUnnamedIntegerType = new UnnamedIntegerTypeElements();
		this.pIntegerRange = new IntegerRangeElements();
		this.pIntegerTerm = new IntegerTermElements();
		this.pSignedConstant = new SignedConstantElements();
		this.pPlusMinus = new PlusMinusElements();
		this.pConstantValue = new ConstantValueElements();
		this.pUnnamedRealType = new UnnamedRealTypeElements();
		this.pRealRange = new RealRangeElements();
		this.pRealTerm = new RealTermElements();
		this.pUnnamedRangeType = new UnnamedRangeTypeElements();
		this.pUnnamedClassifierType = new UnnamedClassifierTypeElements();
		this.pUnnamedReferenceType = new UnnamedReferenceTypeElements();
		this.pQMReference = new QMReferenceElements();
		this.pQCReference = new QCReferenceElements();
		this.pComposite_type = new Composite_typeElements();
		this.pSet_type = new Set_typeElements();
		this.pList_type = new List_typeElements();
		this.pMap_type = new Map_typeElements();
		this.pRecord_type = new Record_typeElements();
		this.pUnion_type = new Union_typeElements();
		this.pId_type_pair = new Id_type_pairElements();
		this.pElement_type = new Element_typeElements();
		this.pT_classifiers = new T_classifiersElements();
		this.pT_classifier_subtypes = new T_classifier_subtypesElements();
		this.pT_named_references = new T_named_referencesElements();
		this.pT_named_reference_subtypes = new T_named_reference_subtypesElements();
		this.pT_subcomponent_subtypes = new T_subcomponent_subtypesElements();
		this.pT_component_impl_subtypes = new T_component_impl_subtypesElements();
		this.pT_connection_subtypes = new T_connection_subtypesElements();
		this.pT_feature_subtypes = new T_feature_subtypesElements();
		this.pT_access_subtypes = new T_access_subtypesElements();
		this.pT_port_subtypes = new T_port_subtypesElements();
		this.pT_flow_spec_subtypes = new T_flow_spec_subtypesElements();
		this.pT_flow_impl_subtypes = new T_flow_impl_subtypesElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.pFQCREF = new FQCREFElements();
		this.pQCREF = new QCREFElements();
		this.pQPREF = new QPREFElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.xtext.aadl2.mcs.MCS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//MCSGrammarRoot:
	//	-> lib=MCSAnnexLibrary | subclause=MCSAnnexSubclause;
	public MCSGrammarRootElements getMCSGrammarRootAccess() {
		return pMCSGrammarRoot;
	}
	
	public ParserRule getMCSGrammarRootRule() {
		return getMCSGrammarRootAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary:
	//	MCSAnnexLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	MCSAnnexSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//MCSAnnexLibrary:
	//	{MCSAnnexLibrary} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
	//	functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+)? (viewpoints+=MCSViewpoint
	//	viewpoints+=MCSViewpoint*)? (enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?;
	public MCSAnnexLibraryElements getMCSAnnexLibraryAccess() {
		return pMCSAnnexLibrary;
	}
	
	public ParserRule getMCSAnnexLibraryRule() {
		return getMCSAnnexLibraryAccess().getRule();
	}

	//Type_declaration:
	//	name=ID ":" "type" type=Type_expression ";";
	public Type_declarationElements getType_declarationAccess() {
		return pType_declaration;
	}
	
	public ParserRule getType_declarationRule() {
		return getType_declarationAccess().getRule();
	}

	//Constant_declaration:
	//	const?="const"? name=ID type=Type_expression? ":=" left_expr=constant_expression ";";
	public Constant_declarationElements getConstant_declarationAccess() {
		return pConstant_declaration;
	}
	
	public ParserRule getConstant_declarationRule() {
		return getConstant_declarationAccess().getRule();
	}

	//MCSViewpoint:
	//	"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript?;
	public MCSViewpointElements getMCSViewpointAccess() {
		return pMCSViewpoint;
	}
	
	public ParserRule getMCSViewpointRule() {
		return getMCSViewpointAccess().getRule();
	}

	//Enforcement_policy:
	//	(pack?="package" | class?="classifier") "contract";
	public Enforcement_policyElements getEnforcement_policyAccess() {
		return pEnforcement_policy;
	}
	
	public ParserRule getEnforcement_policyRule() {
		return getEnforcement_policyAccess().getRule();
	}

	//PackageScript:
	//	"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";";
	public PackageScriptElements getPackageScriptAccess() {
		return pPackageScript;
	}
	
	public ParserRule getPackageScriptRule() {
		return getPackageScriptAccess().getRule();
	}

	//AppliesToClause:
	//	"applies" "to" (all?="all" | "(" category+=ClassifierCategory ("," category+=ClassifierCategory)* ")");
	public AppliesToClauseElements getAppliesToClauseAccess() {
		return pAppliesToClause;
	}
	
	public ParserRule getAppliesToClauseRule() {
		return getAppliesToClauseAccess().getRule();
	}

	//ClassifierCategory:
	//	{ClassifierCategory} (component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
	//	ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?);
	public ClassifierCategoryElements getClassifierCategoryAccess() {
		return pClassifierCategory;
	}
	
	public ParserRule getClassifierCategoryRule() {
		return getClassifierCategoryAccess().getRule();
	}

	//ComponentCategory returns aadl2::ComponentCategory:
	//	"abstract" | "bus" | "data" | "device" | "memory" | "process" | "processor" | "subprogram" | "subprogram" "group" |
	//	"system" | "thread" "group" | "thread" | "virtual" "bus" | "virtual" "processor";
	public ComponentCategoryElements getComponentCategoryAccess() {
		return pComponentCategory;
	}
	
	public ParserRule getComponentCategoryRule() {
		return getComponentCategoryAccess().getRule();
	}

	//FeatureGroupClassifierReference:
	//	fg=[aadl2::FeatureGroupType|QCREF];
	public FeatureGroupClassifierReferenceElements getFeatureGroupClassifierReferenceAccess() {
		return pFeatureGroupClassifierReference;
	}
	
	public ParserRule getFeatureGroupClassifierReferenceRule() {
		return getFeatureGroupClassifierReferenceAccess().getRule();
	}

	//ViewpointReference:
	//	policy=[Enforcement_policy]? vp_ref=[MCSViewpoint];
	public ViewpointReferenceElements getViewpointReferenceAccess() {
		return pViewpointReference;
	}
	
	public ParserRule getViewpointReferenceRule() {
		return getViewpointReferenceAccess().getRule();
	}

	//ConstraintsBlock:
	//	(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}";
	public ConstraintsBlockElements getConstraintsBlockAccess() {
		return pConstraintsBlock;
	}
	
	public ParserRule getConstraintsBlockRule() {
		return getConstraintsBlockAccess().getRule();
	}

	//labelled_check_statement:
	//	(c_label=check_label_id ":")? cs=check_statement;
	public Labelled_check_statementElements getLabelled_check_statementAccess() {
		return pLabelled_check_statement;
	}
	
	public ParserRule getLabelled_check_statementRule() {
		return getLabelled_check_statementAccess().getRule();
	}

	//check_statement:
	//	check_theorem | check_assertion;
	public Check_statementElements getCheck_statementAccess() {
		return pCheck_statement;
	}
	
	public ParserRule getCheck_statementRule() {
		return getCheck_statementAccess().getRule();
	}

	//block_label_id:
	//	name=ID;
	public Block_label_idElements getBlock_label_idAccess() {
		return pBlock_label_id;
	}
	
	public ParserRule getBlock_label_idRule() {
		return getBlock_label_idAccess().getRule();
	}

	//check_label_id:
	//	name=ID;
	public Check_label_idElements getCheck_label_idAccess() {
		return pCheck_label_id;
	}
	
	public ParserRule getCheck_label_idRule() {
		return getCheck_label_idAccess().getRule();
	}

	//check_theorem:
	//	"check" "theorem" name=[Theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
	//	str=string_expression)? ";";
	public Check_theoremElements getCheck_theoremAccess() {
		return pCheck_theorem;
	}
	
	public ParserRule getCheck_theoremRule() {
		return getCheck_theoremAccess().getRule();
	}

	//ModeSpec:
	//	"in" "mode" mode=ModeName;
	public ModeSpecElements getModeSpecAccess() {
		return pModeSpec;
	}
	
	public ParserRule getModeSpecRule() {
		return getModeSpecAccess().getRule();
	}

	//ModeName:
	//	name= //temporary
	//	ID;
	public ModeNameElements getModeNameAccess() {
		return pModeName;
	}
	
	public ParserRule getModeNameRule() {
		return getModeNameAccess().getRule();
	}

	//check_assertion:
	//	"check" root=root_element? inmode=ModeSpec? "(" expr=assertion_expression ")" ("fail" str=string_expression)? ";";
	public Check_assertionElements getCheck_assertionAccess() {
		return pCheck_assertion;
	}
	
	public ParserRule getCheck_assertionRule() {
		return getCheck_assertionAccess().getRule();
	}

	//root_element:
	//	element_reference;
	public Root_elementElements getRoot_elementAccess() {
		return pRoot_element;
	}
	
	public ParserRule getRoot_elementRule() {
		return getRoot_elementAccess().getRule();
	}

	//property_reference:
	//	{property_reference} el_ref=element_reference "#" exists?="?"? property=[aadl2::Property|QPREF];
	public Property_referenceElements getProperty_referenceAccess() {
		return pProperty_reference;
	}
	
	public ParserRule getProperty_referenceRule() {
		return getProperty_referenceAccess().getRule();
	}

	//element_reference:
	//	{element_reference} self?="self" | root?="root" | currentmode?="current_mode" | "classifier" "("
	//	cref=[aadl2::Classifier|QCREF] ")" | "reference" "(" (packageName+=ID "::")* ref=ContainmentPathElement ")";
	public Element_referenceElements getElement_referenceAccess() {
		return pElement_reference;
	}
	
	public ParserRule getElement_referenceRule() {
		return getElement_referenceAccess().getRule();
	}

	//// returns aadl2::ContainmentPathElement:
	////	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange?) ("." path=ContainmentPathElement)?;
	public ContainmentPathElementElements getContainmentPathElementAccess() {
		return pContainmentPathElement;
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	////returns aadl2::ArrayRange: {aadl2::ArrayRange}
	//ArrayRange:
	//	"[" lowerBound=INT (".." upperBound=INT)? "]";
	public ArrayRangeElements getArrayRangeAccess() {
		return pArrayRange;
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//PackageEnforce:
	//	"enforce" viewpoint=[MCSViewpoint] ";";
	public PackageEnforceElements getPackageEnforceAccess() {
		return pPackageEnforce;
	}
	
	public ParserRule getPackageEnforceRule() {
		return getPackageEnforceAccess().getRule();
	}

	//assertion_expression:
	//	expr=expression;
	public Assertion_expressionElements getAssertion_expressionAccess() {
		return pAssertion_expression;
	}
	
	public ParserRule getAssertion_expressionRule() {
		return getAssertion_expressionAccess().getRule();
	}

	//string_expression:
	//	expr=expression;
	public String_expressionElements getString_expressionAccess() {
		return pString_expression;
	}
	
	public ParserRule getString_expressionRule() {
		return getString_expressionAccess().getRule();
	}

	//constant_expression:
	//	expression;
	public Constant_expressionElements getConstant_expressionAccess() {
		return pConstant_expression;
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}

	//// using XBase expressions
	//expression:
	//	name=XExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	CollectionTerm | //	XCollectionLiteral |
	//	XClosure | BooleanTerm | //	XBooleanLiteral |
	//	XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral | => property_reference | // incrementing XBase with AADL specific expression literals 
	//	element_reference;
	public XLiteralElements getXLiteralAccess() {
		return pXLiteral;
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//BooleanTerm:
	//	xbool=XBooleanLiteral | "is_member" member_check=expression "in" collect_expr=expression;
	public BooleanTermElements getBooleanTermAccess() {
		return pBooleanTerm;
	}
	
	public ParserRule getBooleanTermRule() {
		return getBooleanTermAccess().getRule();
	}

	//CollectionTerm:
	//	xc=XCollectionLiteral | => query_set=Query_element_set | set_c=Set_comprehension;
	public CollectionTermElements getCollectionTermAccess() {
		return pCollectionTerm;
	}
	
	public ParserRule getCollectionTermRule() {
		return getCollectionTermAccess().getRule();
	}

	//Set_comprehension:
	//	"set" "{" result=expression "for" var=ID "in" set=expression ("|" cond?=expression)? "}";
	public Set_comprehensionElements getSet_comprehensionAccess() {
		return pSet_comprehension;
	}
	
	public ParserRule getSet_comprehensionRule() {
		return getSet_comprehensionAccess().getRule();
	}

	//Query_element_set:
	//	direct?="direct"? "query" "{" "(" result_types+=Element_types ("," result_types+=Element_types)* ")" "from"
	//	elem_set=expression mode_spec?=ModeSpec? "}";
	public Query_element_setElements getQuery_element_setAccess() {
		return pQuery_element_set;
	}
	
	public ParserRule getQuery_element_setRule() {
		return getQuery_element_setAccess().getRule();
	}

	//Element_types:
	//	el_type=Element_type | "(" el_types+=Element_type ("," el_types+=Element_type)+ ")";
	public Element_typesElements getElement_typesAccess() {
		return pElement_types;
	}
	
	public ParserRule getElement_typesRule() {
		return getElement_typesAccess().getRule();
	}

	////temporary
	//MCSAnnexSubclause:
	//	{MCSAnnexSubclause} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
	//	functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+) (enforceclauses+=ClassifierEnforce
	//	enforceclauses+=ClassifierEnforce*)?;
	public MCSAnnexSubclauseElements getMCSAnnexSubclauseAccess() {
		return pMCSAnnexSubclause;
	}
	
	public ParserRule getMCSAnnexSubclauseRule() {
		return getMCSAnnexSubclauseAccess().getRule();
	}

	//ClassifierEnforce:
	//	"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";";
	public ClassifierEnforceElements getClassifierEnforceAccess() {
		return pClassifierEnforce;
	}
	
	public ParserRule getClassifierEnforceRule() {
		return getClassifierEnforceAccess().getRule();
	}

	//ClassifierScript:
	//	"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";";
	public ClassifierScriptElements getClassifierScriptAccess() {
		return pClassifierScript;
	}
	
	public ParserRule getClassifierScriptRule() {
		return getClassifierScriptAccess().getRule();
	}

	//Function_declaration:
	//	name=ID ("(" arg+=Argument? ("," arg+=Argument)* ")" ("returns" out=Type_expression)? | ":"
	//	(ftype=UnnamedFunctionType | typeref=[Type_declaration])) ":=" (closure=MCSClosure | exp_body=XExpression) ";";
	public Function_declarationElements getFunction_declarationAccess() {
		return pFunction_declaration;
	}
	
	public ParserRule getFunction_declarationRule() {
		return getFunction_declarationAccess().getRule();
	}

	//Argument:
	//	{Argument} name=ID (":" arg_type=Type_expression)?;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//MCSClosure returns XExpression:
	//	=> ({MCSClosure} "[") => ((declaredFormalParameters+=Argument ("," declaredFormalParameters+=Argument)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public MCSClosureElements getMCSClosureAccess() {
		return pMCSClosure;
	}
	
	public ParserRule getMCSClosureRule() {
		return getMCSClosureAccess().getRule();
	}

	//Theorem_declaration:
	//	"theorem" name=ID ml?=In_modes_list? locals+=Local_declaration* statements+=Theorem_statement* "end"
	//	endname=[Theorem_declaration] ";";
	public Theorem_declarationElements getTheorem_declarationAccess() {
		return pTheorem_declaration;
	}
	
	public ParserRule getTheorem_declarationRule() {
		return getTheorem_declarationAccess().getRule();
	}

	//In_modes_list:
	//	"in" "modes" "(" modes+=ID ("," modes+=ID)* ")";
	public In_modes_listElements getIn_modes_listAccess() {
		return pIn_modes_list;
	}
	
	public ParserRule getIn_modes_listRule() {
		return getIn_modes_listAccess().getRule();
	}

	//// syntax similar to core AADL PropertyConstant
	//Local_declaration:
	//	const?="const"? name=ID type=Type_expression? ":=" (left_expr=MCSClosure | left_expr=constant_expression) ";";
	public Local_declarationElements getLocal_declarationAccess() {
		return pLocal_declaration;
	}
	
	public ParserRule getLocal_declarationRule() {
		return getLocal_declarationAccess().getRule();
	}

	//Theorem_statement:
	//	Basic_statement | check_statement;
	public Theorem_statementElements getTheorem_statementAccess() {
		return pTheorem_statement;
	}
	
	public ParserRule getTheorem_statementRule() {
		return getTheorem_statementAccess().getRule();
	}

	//Basic_statement: //		assignment | 
	//	Iteration;
	public Basic_statementElements getBasic_statementAccess() {
		return pBasic_statement;
	}
	
	public ParserRule getBasic_statementRule() {
		return getBasic_statementAccess().getRule();
	}

	////assignment : 
	////     		var_id = ID ':=' right = expression ;
	//Iteration:
	//	"foreach" var_id=ID "in" expr=expression "do" "{" local+=Local_declaration* statements+=Theorem_statement+ "}";
	public IterationElements getIterationAccess() {
		return pIteration;
	}
	
	public ParserRule getIterationRule() {
		return getIterationAccess().getRule();
	}

	//// Type rules
	//Type_expression:
	//	=> basic=Basic_type | composite=Composite_type | element=Element_type;
	public Type_expressionElements getType_expressionAccess() {
		return pType_expression;
	}
	
	public ParserRule getType_expressionRule() {
		return getType_expressionAccess().getRule();
	}

	//// basic types rules
	//Basic_type:
	//	bool=UnnamedBooleanType // from core AADL
	//	// addition to basic types
	//	| string=UnnamedStringType | enumer=UnnamedEnumerationType | units=UnnamedUnitsType | integer=UnnamedIntegerType |
	//	real=UnnamedRealType | range=UnnamedRangeType | class=UnnamedClassifierType | ref=UnnamedReferenceType |
	//	func=UnnamedFunctionType | typename=[Type_declaration];
	public Basic_typeElements getBasic_typeAccess() {
		return pBasic_type;
	}
	
	public ParserRule getBasic_typeRule() {
		return getBasic_typeAccess().getRule();
	}

	//UnnamedFunctionType:
	//	"(" parm+=Type_expression? ("," parm+=Type_expression)+ ")" (outspec?="returns" result=Type_expression)?;
	public UnnamedFunctionTypeElements getUnnamedFunctionTypeAccess() {
		return pUnnamedFunctionType;
	}
	
	public ParserRule getUnnamedFunctionTypeRule() {
		return getUnnamedFunctionTypeAccess().getRule();
	}

	//UnnamedBooleanType returns aadl2::AadlBoolean:
	//	{aadl2::AadlBoolean} "aadlboolean";
	public UnnamedBooleanTypeElements getUnnamedBooleanTypeAccess() {
		return pUnnamedBooleanType;
	}
	
	public ParserRule getUnnamedBooleanTypeRule() {
		return getUnnamedBooleanTypeAccess().getRule();
	}

	//UnnamedStringType returns aadl2::AadlString:
	//	{aadl2::AadlString} "aadlstring";
	public UnnamedStringTypeElements getUnnamedStringTypeAccess() {
		return pUnnamedStringType;
	}
	
	public ParserRule getUnnamedStringTypeRule() {
		return getUnnamedStringTypeAccess().getRule();
	}

	//UnnamedEnumerationType returns aadl2::EnumerationType:
	//	"enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
	public UnnamedEnumerationTypeElements getUnnamedEnumerationTypeAccess() {
		return pUnnamedEnumerationType;
	}
	
	public ParserRule getUnnamedEnumerationTypeRule() {
		return getUnnamedEnumerationTypeAccess().getRule();
	}

	//EnumerationLiteral returns aadl2::EnumerationLiteral:
	//	name=ID;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	//UnnamedUnitsType returns aadl2::UnitsType:
	//	"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
	public UnnamedUnitsTypeElements getUnnamedUnitsTypeAccess() {
		return pUnnamedUnitsType;
	}
	
	public ParserRule getUnnamedUnitsTypeRule() {
		return getUnnamedUnitsTypeAccess().getRule();
	}

	//UnitLiteral returns aadl2::UnitLiteral:
	//	name=ID;
	public UnitLiteralElements getUnitLiteralAccess() {
		return pUnitLiteral;
	}
	
	public ParserRule getUnitLiteralRule() {
		return getUnitLiteralAccess().getRule();
	}

	//UnitLiteralConversion returns aadl2::UnitLiteral:
	//	name=ID "=>" baseUnit=[aadl2::UnitLiteral] "*" factor=NumberValue;
	public UnitLiteralConversionElements getUnitLiteralConversionAccess() {
		return pUnitLiteralConversion;
	}
	
	public ParserRule getUnitLiteralConversionRule() {
		return getUnitLiteralConversionAccess().getRule();
	}

	//NumberValue returns aadl2::NumberValue:
	//	RealLit | => IntegerLit;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//// Number: INTEGER_LIT | REAL_LIT;
	//RealLit returns aadl2::RealLiteral:
	//	value=SignedReal;
	public RealLitElements getRealLitAccess() {
		return pRealLit;
	}
	
	public ParserRule getRealLitRule() {
		return getRealLitAccess().getRule();
	}

	//IntegerLit returns aadl2::IntegerLiteral:
	//	value=SignedInt;
	public IntegerLitElements getIntegerLitAccess() {
		return pIntegerLit;
	}
	
	public ParserRule getIntegerLitRule() {
		return getIntegerLitAccess().getRule();
	}

	//// using Xbase Number literals
	//SignedInt returns aadl2::Integer:
	//	("+" | "-")? //INTEGER_LIT 
	//	Number;
	public SignedIntElements getSignedIntAccess() {
		return pSignedInt;
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedReal returns aadl2::Real:
	//	("+" | "-")? //REAL_LIT
	//	Number;
	public SignedRealElements getSignedRealAccess() {
		return pSignedReal;
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//UnnamedIntegerType returns aadl2::AadlInteger:
	//	{aadl2::AadlInteger} "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public UnnamedIntegerTypeElements getUnnamedIntegerTypeAccess() {
		return pUnnamedIntegerType;
	}
	
	public ParserRule getUnnamedIntegerTypeRule() {
		return getUnnamedIntegerTypeAccess().getRule();
	}

	//IntegerRange returns aadl2::NumericRange:
	//	lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant |
	//	ConstantValue);
	public IntegerRangeElements getIntegerRangeAccess() {
		return pIntegerRange;
	}
	
	public ParserRule getIntegerRangeRule() {
		return getIntegerRangeAccess().getRule();
	}

	//IntegerTerm returns aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public IntegerTermElements getIntegerTermAccess() {
		return pIntegerTerm;
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedConstant returns aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public SignedConstantElements getSignedConstantAccess() {
		return pSignedConstant;
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//PlusMinus returns aadl2::OperationKind:
	//	"+" | "-";
	public PlusMinusElements getPlusMinusAccess() {
		return pPlusMinus;
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//ConstantValue returns aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//UnnamedRealType returns aadl2::AadlReal:
	//	{aadl2::AadlReal} "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public UnnamedRealTypeElements getUnnamedRealTypeAccess() {
		return pUnnamedRealType;
	}
	
	public ParserRule getUnnamedRealTypeRule() {
		return getUnnamedRealTypeAccess().getRule();
	}

	//RealRange returns aadl2::NumericRange:
	//	lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue);
	public RealRangeElements getRealRangeAccess() {
		return pRealRange;
	}
	
	public ParserRule getRealRangeRule() {
		return getRealRangeAccess().getRule();
	}

	//RealTerm returns aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public RealTermElements getRealTermAccess() {
		return pRealTerm;
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//UnnamedRangeType returns aadl2::RangeType:
	//	{aadl2::RangeType} "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
	//	numberType=[aadl2::NumberType|QPREF]);
	public UnnamedRangeTypeElements getUnnamedRangeTypeAccess() {
		return pUnnamedRangeType;
	}
	
	public ParserRule getUnnamedRangeTypeRule() {
		return getUnnamedRangeTypeAccess().getRule();
	}

	//UnnamedClassifierType returns aadl2::ClassifierType:
	//	{aadl2::ClassifierType} "classifier" ("(" classifierReference+=QMReference ("," classifierReference+=QMReference)*
	//	")")?;
	public UnnamedClassifierTypeElements getUnnamedClassifierTypeAccess() {
		return pUnnamedClassifierType;
	}
	
	public ParserRule getUnnamedClassifierTypeRule() {
		return getUnnamedClassifierTypeAccess().getRule();
	}

	//UnnamedReferenceType returns aadl2::ReferenceType:
	//	"reference" {aadl2::ReferenceType} ("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)*
	//	")")?;
	public UnnamedReferenceTypeElements getUnnamedReferenceTypeAccess() {
		return pUnnamedReferenceType;
	}
	
	public ParserRule getUnnamedReferenceTypeRule() {
		return getUnnamedReferenceTypeAccess().getRule();
	}

	//QMReference returns aadl2::MetaclassReference:
	//	("{" annexName=ID "}" "*" "*")? metaclassName+=ID+;
	public QMReferenceElements getQMReferenceAccess() {
		return pQMReference;
	}
	
	public ParserRule getQMReferenceRule() {
		return getQMReferenceAccess().getRule();
	}

	//QCReference returns aadl2::ClassifierValue:
	//	classifier=[aadl2::ComponentClassifier|FQCREF];
	public QCReferenceElements getQCReferenceAccess() {
		return pQCReference;
	}
	
	public ParserRule getQCReferenceRule() {
		return getQCReferenceAccess().getRule();
	}

	//// composite type rules
	//Composite_type:
	//	Set_type | List_type | Map_type | Record_type | Union_type;
	public Composite_typeElements getComposite_typeAccess() {
		return pComposite_type;
	}
	
	public ParserRule getComposite_typeRule() {
		return getComposite_typeAccess().getRule();
	}

	//Set_type:
	//	"set" "of" type=Type_expression;
	public Set_typeElements getSet_typeAccess() {
		return pSet_type;
	}
	
	public ParserRule getSet_typeRule() {
		return getSet_typeAccess().getRule();
	}

	//List_type:
	//	"list" "of" type=Type_expression;
	public List_typeElements getList_typeAccess() {
		return pList_type;
	}
	
	public ParserRule getList_typeRule() {
		return getList_typeAccess().getRule();
	}

	//Map_type:
	//	"map" "of" type=Type_expression;
	public Map_typeElements getMap_typeAccess() {
		return pMap_type;
	}
	
	public ParserRule getMap_typeRule() {
		return getMap_typeAccess().getRule();
	}

	//Record_type:
	//	"record" "( " field+=Id_type_pair+ ")";
	public Record_typeElements getRecord_typeAccess() {
		return pRecord_type;
	}
	
	public ParserRule getRecord_typeRule() {
		return getRecord_typeAccess().getRule();
	}

	//Union_type:
	//	"(" (typename+=ID ":")? type+=Type_expression ("," (typename+=ID ":")? type+=Type_expression)* ")";
	public Union_typeElements getUnion_typeAccess() {
		return pUnion_type;
	}
	
	public ParserRule getUnion_typeRule() {
		return getUnion_typeAccess().getRule();
	}

	//Id_type_pair:
	//	name=ID ":" type=Type_expression;
	public Id_type_pairElements getId_type_pairAccess() {
		return pId_type_pair;
	}
	
	public ParserRule getId_type_pairRule() {
		return getId_type_pairAccess().getRule();
	}

	////element type rules
	//Element_type:
	//	telem?="T_Element" | t_class?=t_classifiers | t_ref?=t_named_references;
	public Element_typeElements getElement_typeAccess() {
		return pElement_type;
	}
	
	public ParserRule getElement_typeRule() {
		return getElement_typeAccess().getRule();
	}

	//t_classifiers:
	//	t_class?="T_Classifier" | t_class_subtype?=t_classifier_subtypes;
	public T_classifiersElements getT_classifiersAccess() {
		return pT_classifiers;
	}
	
	public ParserRule getT_classifiersRule() {
		return getT_classifiersAccess().getRule();
	}

	//t_classifier_subtypes:
	//	t_ctype?="T_Component_Type_Classifier" | t_cimpl?="T_Component_Impl_Classifier" |
	//	t_fgclass?="T_Feature_Group_Classifier" | t_annexclass?="T_Annex_Classifier";
	public T_classifier_subtypesElements getT_classifier_subtypesAccess() {
		return pT_classifier_subtypes;
	}
	
	public ParserRule getT_classifier_subtypesRule() {
		return getT_classifier_subtypesAccess().getRule();
	}

	//t_named_references:
	//	t_nref?="T_Named_Reference" | t_nref_st?=t_named_reference_subtypes;
	public T_named_referencesElements getT_named_referencesAccess() {
		return pT_named_references;
	}
	
	public ParserRule getT_named_referencesRule() {
		return getT_named_referencesAccess().getRule();
	}

	//t_named_reference_subtypes:
	//	t_subc_st?=t_subcomponent_subtypes | t_connection_subtypes | t_feature_subtypes | t_flow_spec_subtypes |
	//	t_flow_impl_subtypes | t_sbcall?="T_Subprogram_Call" | t_callseq?="T_Call_Sequence" | t_eeflow?="T_End_To_End_Flow" |
	//	t_proto?="T_Prototype" | t_mode?="T_Mode" | t_req_mode?="T_Required_Mode" | t_mod_trans?="T_Mode_Transition" |
	//	t_mode_trig?="T_Mode_Trigger_Id";
	public T_named_reference_subtypesElements getT_named_reference_subtypesAccess() {
		return pT_named_reference_subtypes;
	}
	
	public ParserRule getT_named_reference_subtypesRule() {
		return getT_named_reference_subtypesAccess().getRule();
	}

	//t_subcomponent_subtypes:
	//	t_sub?="T_Subcomponent" | t_annex_sub?="T_Annex_Subcomponent" | t_comp_typeref?="T_Component_Type_Ref" |
	//	t_cimpl_st?=t_component_impl_subtypes;
	public T_subcomponent_subtypesElements getT_subcomponent_subtypesAccess() {
		return pT_subcomponent_subtypes;
	}
	
	public ParserRule getT_subcomponent_subtypesRule() {
		return getT_subcomponent_subtypesAccess().getRule();
	}

	//t_component_impl_subtypes:
	//	t_comp_impref?="T_Component_Impl_Ref" | t_abstract?="T_Abstract" | t_sys?="T_System" | t_proc?="T_Processor" |
	//	t_virt_proc?="T_Virtual_Processor" | t_bus?="T_Bus" | t_vbus?="T_Virtual_Bus" | t_mem?="T_Memory" |
	//	t_proc?="T_Process" | t_tg?="T_Thread_Group" | t_t?="T_Thread" | t_d?="T_Data" | t_subprog?="T_Subprogram" |
	//	t_subprog_g?="T_Subprogram_Group";
	public T_component_impl_subtypesElements getT_component_impl_subtypesAccess() {
		return pT_component_impl_subtypes;
	}
	
	public ParserRule getT_component_impl_subtypesRule() {
		return getT_component_impl_subtypesAccess().getRule();
	}

	//t_connection_subtypes:
	//	t_conn?="T_Connection" | t_feat_conn?="T_Feature_Connection" | t_port_conn?="T_Port_Connection" |
	//	t_parm_conn?="T_Parameter_Connection" | t_acc_con?="T_Access_Connection" | t_fg_conn?="T_Feature_Group_Connection";
	public T_connection_subtypesElements getT_connection_subtypesAccess() {
		return pT_connection_subtypes;
	}
	
	public ParserRule getT_connection_subtypesRule() {
		return getT_connection_subtypesAccess().getRule();
	}

	//t_feature_subtypes:
	//	t_feat?="T_Feature" | t_abs_feat?="T_Abstract_Feature" | t_parm?="T_Parameter" | t_fg?="T_Feature_Group" |
	//	t_port_subtypes | t_access_subtypes;
	public T_feature_subtypesElements getT_feature_subtypesAccess() {
		return pT_feature_subtypes;
	}
	
	public ParserRule getT_feature_subtypesRule() {
		return getT_feature_subtypesAccess().getRule();
	}

	//t_access_subtypes:
	//	t_access?="T_Access" | t_data_acc?="T_Data_Access" | t_sub_acc?="T_Subprogram_Access" |
	//	t_sub_gr_acc?="T_Subprogram_Group_Access" | t_bus_acc?="T_Bus_Access";
	public T_access_subtypesElements getT_access_subtypesAccess() {
		return pT_access_subtypes;
	}
	
	public ParserRule getT_access_subtypesRule() {
		return getT_access_subtypesAccess().getRule();
	}

	//t_port_subtypes:
	//	t_port?="T_Port" | t_d_port?="T_Data_Port" | t_ev_port?="T_Event_Port" | t_evd_port?="T_Event_Data_Port";
	public T_port_subtypesElements getT_port_subtypesAccess() {
		return pT_port_subtypes;
	}
	
	public ParserRule getT_port_subtypesRule() {
		return getT_port_subtypesAccess().getRule();
	}

	//t_flow_spec_subtypes:
	//	t_f_spec?="T_Flow_Spec" | t_f_spec_source?="T_Flow_Spec_Source" | t_f_spec_sink?="T_Flow_Spec_Sink" |
	//	t_f_spec_path?="T_Flow_Spec_Path";
	public T_flow_spec_subtypesElements getT_flow_spec_subtypesAccess() {
		return pT_flow_spec_subtypes;
	}
	
	public ParserRule getT_flow_spec_subtypesRule() {
		return getT_flow_spec_subtypesAccess().getRule();
	}

	//t_flow_impl_subtypes:
	//	t_f_i?="T_Flow_Impl" | t_f_i_source?="T_Flow_Impl_Source" | t_f_i_sink?="T_Flow_Impl_Sink" |
	//	t_f_i_path?="T_Flow_Impl_Path";
	public T_flow_impl_subtypesElements getT_flow_impl_subtypesAccess() {
		return pT_flow_impl_subtypes;
	}
	
	public ParserRule getT_flow_impl_subtypesRule() {
		return getT_flow_impl_subtypesAccess().getRule();
	}

	/// *
	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	// * / / * 
	//INTVALUE returns aadl2::Integer:
	//	INTEGER_LIT //NUMERAL 	
	//;
	//
	//
	//terminal fragment
	//EXPONENT  :  ('e'|'E') ('+'|'-')? ( DIGIT )+  ;
	//
	//terminal fragment
	//INT_EXPONENT :  ('e'|'E') ('+')? ( DIGIT )+ ;
	//
	//
	//terminal REAL_LIT : 	
	//	(DIGIT)+('_' (DIGIT)+)* ( '.' (DIGIT)+('_' (DIGIT)+)* ( EXPONENT )?)
	//  ;
	//
	//terminal INTEGER_LIT : 
	//		(DIGIT)+('_' (DIGIT)+)*
	//		(( '#' BASED_INTEGER  '#' ( INT_EXPONENT )? )
	//			| (INT_EXPONENT)?
	//		)
	//  ;
	//
	//terminal fragment
	//DIGIT     :  ( '0'..'9' ) ;
	//
	//terminal fragment
	//EXTENDED_DIGIT     :  ( '0'..'9' | 'a'..'f' | 'A'..'F') ;
	//
	//terminal fragment
	//BASED_INTEGER      :  ( EXTENDED_DIGIT ) ( ('_')? EXTENDED_DIGIT )* ;
	// * / terminal ID:
	//	("a".."z" | "A".."Z") ("_"? ("a".."z" | "A".."Z" | "0".."9"))*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//// fully qualified classifier name (always includes package name
	//FQCREF:
	//	(ID "::")+ ID ("." ID)?;
	public FQCREFElements getFQCREFAccess() {
		return pFQCREF;
	}
	
	public ParserRule getFQCREFRule() {
		return getFQCREFAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID ("." ID)?;
	public QCREFElements getQCREFAccess() {
		return pQCREF;
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//QPREF:
	//	ID ("::" ID)?;
	public QPREFElements getQPREFAccess() {
		return pQPREF;
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
