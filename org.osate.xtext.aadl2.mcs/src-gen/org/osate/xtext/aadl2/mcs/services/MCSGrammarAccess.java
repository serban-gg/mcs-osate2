/*
 * generated by Xtext
 */
package org.osate.xtext.aadl2.mcs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.services.Aadl2GrammarAccess;
import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class MCSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MCSGrammarRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSGrammarRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLibAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLibMCSAnnexLibraryParserRuleCall_0_0 = (RuleCall)cLibAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSubKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubclauseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubclauseMCSAnnexSubclauseParserRuleCall_1_1_0 = (RuleCall)cSubclauseAssignment_1_1.eContents().get(0);
		
		//MCSGrammarRoot:
		//	lib=MCSAnnexLibrary | "sub" subclause=MCSAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//lib=MCSAnnexLibrary | "sub" subclause=MCSAnnexSubclause
		public Alternatives getAlternatives() { return cAlternatives; }

		//lib=MCSAnnexLibrary
		public Assignment getLibAssignment_0() { return cLibAssignment_0; }

		//MCSAnnexLibrary
		public RuleCall getLibMCSAnnexLibraryParserRuleCall_0_0() { return cLibMCSAnnexLibraryParserRuleCall_0_0; }

		//"sub" subclause=MCSAnnexSubclause
		public Group getGroup_1() { return cGroup_1; }

		//"sub"
		public Keyword getSubKeyword_1_0() { return cSubKeyword_1_0; }

		//subclause=MCSAnnexSubclause
		public Assignment getSubclauseAssignment_1_1() { return cSubclauseAssignment_1_1; }

		//MCSAnnexSubclause
		public RuleCall getSubclauseMCSAnnexSubclauseParserRuleCall_1_1_0() { return cSubclauseMCSAnnexSubclauseParserRuleCall_1_1_0; }
	}

	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cMCSAnnexLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//	MCSAnnexLibrary;
		@Override public ParserRule getRule() { return rule; }

		//MCSAnnexLibrary
		public RuleCall getMCSAnnexLibraryParserRuleCall() { return cMCSAnnexLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cMCSAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	MCSAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//MCSAnnexSubclause
		public RuleCall getMCSAnnexSubclauseParserRuleCall() { return cMCSAnnexSubclauseParserRuleCall; }
	}

	public class MCSAnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSAnnexLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSAnnexLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTheoremsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTheoremsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTheoremsTheorem_declarationParserRuleCall_1_1_0 = (RuleCall)cTheoremsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cViewpointsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cViewpointsMCSViewpointParserRuleCall_2_0_0 = (RuleCall)cViewpointsAssignment_2_0.eContents().get(0);
		private final Assignment cViewpointsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cViewpointsMCSViewpointParserRuleCall_2_1_0 = (RuleCall)cViewpointsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEnforceclausesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEnforceclausesPackageEnforceParserRuleCall_3_0_0 = (RuleCall)cEnforceclausesAssignment_3_0.eContents().get(0);
		private final Assignment cEnforceclausesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEnforceclausesPackageEnforceParserRuleCall_3_1_0 = (RuleCall)cEnforceclausesAssignment_3_1.eContents().get(0);
		
		//MCSAnnexLibrary:
		//	{MCSAnnexLibrary} ("theorems" theorems+=theorem_declaration+) (viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)?
		//	(enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSAnnexLibrary} ("theorems" theorems+=theorem_declaration+) (viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)?
		//(enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?
		public Group getGroup() { return cGroup; }

		//{MCSAnnexLibrary}
		public Action getMCSAnnexLibraryAction_0() { return cMCSAnnexLibraryAction_0; }

		//"theorems" theorems+=theorem_declaration+
		public Group getGroup_1() { return cGroup_1; }

		//"theorems"
		public Keyword getTheoremsKeyword_1_0() { return cTheoremsKeyword_1_0; }

		//theorems+=theorem_declaration+
		public Assignment getTheoremsAssignment_1_1() { return cTheoremsAssignment_1_1; }

		//theorem_declaration
		public RuleCall getTheoremsTheorem_declarationParserRuleCall_1_1_0() { return cTheoremsTheorem_declarationParserRuleCall_1_1_0; }

		//(viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)?
		public Group getGroup_2() { return cGroup_2; }

		//viewpoints+=MCSViewpoint
		public Assignment getViewpointsAssignment_2_0() { return cViewpointsAssignment_2_0; }

		//MCSViewpoint
		public RuleCall getViewpointsMCSViewpointParserRuleCall_2_0_0() { return cViewpointsMCSViewpointParserRuleCall_2_0_0; }

		//viewpoints+=MCSViewpoint*
		public Assignment getViewpointsAssignment_2_1() { return cViewpointsAssignment_2_1; }

		//MCSViewpoint
		public RuleCall getViewpointsMCSViewpointParserRuleCall_2_1_0() { return cViewpointsMCSViewpointParserRuleCall_2_1_0; }

		//(enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?
		public Group getGroup_3() { return cGroup_3; }

		//enforceclauses+=PackageEnforce
		public Assignment getEnforceclausesAssignment_3_0() { return cEnforceclausesAssignment_3_0; }

		//PackageEnforce
		public RuleCall getEnforceclausesPackageEnforceParserRuleCall_3_0_0() { return cEnforceclausesPackageEnforceParserRuleCall_3_0_0; }

		//enforceclauses+=PackageEnforce*
		public Assignment getEnforceclausesAssignment_3_1() { return cEnforceclausesAssignment_3_1; }

		//PackageEnforce
		public RuleCall getEnforceclausesPackageEnforceParserRuleCall_3_1_0() { return cEnforceclausesPackageEnforceParserRuleCall_3_1_0; }
	}

	public class MCSViewpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSViewpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPolicyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPolicyEnforcement_policyParserRuleCall_2_0 = (RuleCall)cPolicyAssignment_2.eContents().get(0);
		private final Assignment cPscriptAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPscriptPackageScriptParserRuleCall_3_0 = (RuleCall)cPscriptAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MCSViewpoint:
		//	"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript? ";";
		@Override public ParserRule getRule() { return rule; }

		//"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript? ";"
		public Group getGroup() { return cGroup; }

		//"viewpoint"
		public Keyword getViewpointKeyword_0() { return cViewpointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//policy=Enforcement_policy
		public Assignment getPolicyAssignment_2() { return cPolicyAssignment_2; }

		//Enforcement_policy
		public RuleCall getPolicyEnforcement_policyParserRuleCall_2_0() { return cPolicyEnforcement_policyParserRuleCall_2_0; }

		//pscript=PackageScript?
		public Assignment getPscriptAssignment_3() { return cPscriptAssignment_3; }

		//PackageScript
		public RuleCall getPscriptPackageScriptParserRuleCall_3_0() { return cPscriptPackageScriptParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Enforcement_policyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enforcement_policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPackAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPackPackageKeyword_0_0_0 = (Keyword)cPackAssignment_0_0.eContents().get(0);
		private final Assignment cClassAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cClassClassifierKeyword_0_1_0 = (Keyword)cClassAssignment_0_1.eContents().get(0);
		private final Keyword cContractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Enforcement_policy:
		//	(pack?="package" | class?="classifier") "contract";
		@Override public ParserRule getRule() { return rule; }

		//(pack?="package" | class?="classifier") "contract"
		public Group getGroup() { return cGroup; }

		//pack?="package" | class?="classifier"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//pack?="package"
		public Assignment getPackAssignment_0_0() { return cPackAssignment_0_0; }

		//"package"
		public Keyword getPackPackageKeyword_0_0_0() { return cPackPackageKeyword_0_0_0; }

		//class?="classifier"
		public Assignment getClassAssignment_0_1() { return cClassAssignment_0_1; }

		//"classifier"
		public Keyword getClassClassifierKeyword_0_1_0() { return cClassClassifierKeyword_0_1_0; }

		//"contract"
		public Keyword getContractKeyword_1() { return cContractKeyword_1; }
	}

	public class PackageScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAppliesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAppliesAppliesToClauseParserRuleCall_1_0_0 = (RuleCall)cAppliesAssignment_1_0.eContents().get(0);
		private final Assignment cC_blockAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cC_blockConstraintsBlockParserRuleCall_1_1_0 = (RuleCall)cC_blockAssignment_1_1.eContents().get(0);
		private final Keyword cEndscriptKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefViewpointReferenceParserRuleCall_3_0 = (RuleCall)cRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageScript:
		//	"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";";
		@Override public ParserRule getRule() { return rule; }

		//"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//(applies+=AppliesToClause c_block+=ConstraintsBlock+)*
		public Group getGroup_1() { return cGroup_1; }

		//applies+=AppliesToClause
		public Assignment getAppliesAssignment_1_0() { return cAppliesAssignment_1_0; }

		//AppliesToClause
		public RuleCall getAppliesAppliesToClauseParserRuleCall_1_0_0() { return cAppliesAppliesToClauseParserRuleCall_1_0_0; }

		//c_block+=ConstraintsBlock+
		public Assignment getC_blockAssignment_1_1() { return cC_blockAssignment_1_1; }

		//ConstraintsBlock
		public RuleCall getC_blockConstraintsBlockParserRuleCall_1_1_0() { return cC_blockConstraintsBlockParserRuleCall_1_1_0; }

		//"endscript"
		public Keyword getEndscriptKeyword_2() { return cEndscriptKeyword_2; }

		//ref=ViewpointReference
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//ViewpointReference
		public RuleCall getRefViewpointReferenceParserRuleCall_3_0() { return cRefViewpointReferenceParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AppliesToClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppliesToClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppliesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAllAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cAllAllKeyword_2_0_0 = (Keyword)cAllAssignment_2_0.eContents().get(0);
		private final Assignment cCategoryAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCategoryClassifierCategoryParserRuleCall_2_1_0 = (RuleCall)cCategoryAssignment_2_1.eContents().get(0);
		
		//AppliesToClause:
		//	"applies" "to" (all?="all" //					ref_to_c = ComponentClassifierReference //|
		//	//					ref_to_f = FeatureGroupClassifierReference				
		//	| category= //|
		//	ClassifierCategory);
		@Override public ParserRule getRule() { return rule; }

		//"applies" "to" (all?="all" //					ref_to_c = ComponentClassifierReference //|
		////					ref_to_f = FeatureGroupClassifierReference				
		//| category= //|
		//ClassifierCategory)
		public Group getGroup() { return cGroup; }

		//"applies"
		public Keyword getAppliesKeyword_0() { return cAppliesKeyword_0; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//all?="all" //					ref_to_c = ComponentClassifierReference //|
		////					ref_to_f = FeatureGroupClassifierReference				
		//| category= //|
		//ClassifierCategory
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//all?="all"
		public Assignment getAllAssignment_2_0() { return cAllAssignment_2_0; }

		//"all"
		public Keyword getAllAllKeyword_2_0_0() { return cAllAllKeyword_2_0_0; }

		//category= //|
		//ClassifierCategory
		public Assignment getCategoryAssignment_2_1() { return cCategoryAssignment_2_1; }

		////|
		//ClassifierCategory
		public RuleCall getCategoryClassifierCategoryParserRuleCall_2_1_0() { return cCategoryClassifierCategoryParserRuleCall_2_1_0; }
	}

	public class ClassifierCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassifierCategoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cComponentAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cComponentComponentCategoryParserRuleCall_1_0_0_0 = (RuleCall)cComponentAssignment_1_0_0.eContents().get(0);
		private final Assignment cCtAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cCtComponentTypeCrossReference_1_0_1_0 = (CrossReference)cCtAssignment_1_0_1.eContents().get(0);
		private final RuleCall cCtComponentTypeQCREFParserRuleCall_1_0_1_0_1 = (RuleCall)cCtComponentTypeCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Assignment cImplAssignment_1_0_2_0 = (Assignment)cGroup_1_0_2.eContents().get(0);
		private final Keyword cImplImplementationKeyword_1_0_2_0_0 = (Keyword)cImplAssignment_1_0_2_0.eContents().get(0);
		private final Assignment cCiAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final CrossReference cCiComponentImplementationCrossReference_1_0_2_1_0 = (CrossReference)cCiAssignment_1_0_2_1.eContents().get(0);
		private final RuleCall cCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1 = (RuleCall)cCiComponentImplementationCrossReference_1_0_2_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cFeat_gAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cFeat_gFeatureGroupKeyword_1_1_0_0 = (Keyword)cFeat_gAssignment_1_1_0.eContents().get(0);
		private final Assignment cRef_to_fAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0 = (RuleCall)cRef_to_fAssignment_1_1_1.eContents().get(0);
		
		//ClassifierCategory:
		//	{ClassifierCategory} (component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//	ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?);
		@Override public ParserRule getRule() { return rule; }

		//{ClassifierCategory} (component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?)
		public Group getGroup() { return cGroup; }

		//{ClassifierCategory}
		public Action getClassifierCategoryAction_0() { return cClassifierCategoryAction_0; }

		//component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//component=ComponentCategory
		public Assignment getComponentAssignment_1_0_0() { return cComponentAssignment_1_0_0; }

		//ComponentCategory
		public RuleCall getComponentComponentCategoryParserRuleCall_1_0_0_0() { return cComponentComponentCategoryParserRuleCall_1_0_0_0; }

		//ct=[aadl2::ComponentType|QCREF]?
		public Assignment getCtAssignment_1_0_1() { return cCtAssignment_1_0_1; }

		//[aadl2::ComponentType|QCREF]
		public CrossReference getCtComponentTypeCrossReference_1_0_1_0() { return cCtComponentTypeCrossReference_1_0_1_0; }

		//QCREF
		public RuleCall getCtComponentTypeQCREFParserRuleCall_1_0_1_0_1() { return cCtComponentTypeQCREFParserRuleCall_1_0_1_0_1; }

		//(impl?="implementation" ci=[aadl2::ComponentImplementation|QCREF]?)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//impl?="implementation"
		public Assignment getImplAssignment_1_0_2_0() { return cImplAssignment_1_0_2_0; }

		//"implementation"
		public Keyword getImplImplementationKeyword_1_0_2_0_0() { return cImplImplementationKeyword_1_0_2_0_0; }

		//ci=[aadl2::ComponentImplementation|QCREF]?
		public Assignment getCiAssignment_1_0_2_1() { return cCiAssignment_1_0_2_1; }

		//[aadl2::ComponentImplementation|QCREF]
		public CrossReference getCiComponentImplementationCrossReference_1_0_2_1_0() { return cCiComponentImplementationCrossReference_1_0_2_1_0; }

		//QCREF
		public RuleCall getCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1() { return cCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1; }

		//feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//feat_g?="feature group"
		public Assignment getFeat_gAssignment_1_1_0() { return cFeat_gAssignment_1_1_0; }

		//"feature group"
		public Keyword getFeat_gFeatureGroupKeyword_1_1_0_0() { return cFeat_gFeatureGroupKeyword_1_1_0_0; }

		//ref_to_f=FeatureGroupClassifierReference?
		public Assignment getRef_to_fAssignment_1_1_1() { return cRef_to_fAssignment_1_1_1; }

		//FeatureGroupClassifierReference
		public RuleCall getRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0() { return cRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0; }
	}

	public class FeatureGroupClassifierReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureGroupClassifierReference");
		private final Assignment cFgAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFgFeatureGroupTypeCrossReference_0 = (CrossReference)cFgAssignment.eContents().get(0);
		private final RuleCall cFgFeatureGroupTypeQCREFParserRuleCall_0_1 = (RuleCall)cFgFeatureGroupTypeCrossReference_0.eContents().get(1);
		
		////ComponentClassifierReference : 
		////	(ct = [aadl2::ComponentType|QCREF]   | 
		////    ci = [aadl2::ComponentImplementation|QCREF] 
		////	)
		////;
		//FeatureGroupClassifierReference:
		//	fg=[aadl2::FeatureGroupType|QCREF];
		@Override public ParserRule getRule() { return rule; }

		//fg=[aadl2::FeatureGroupType|QCREF]
		public Assignment getFgAssignment() { return cFgAssignment; }

		//[aadl2::FeatureGroupType|QCREF]
		public CrossReference getFgFeatureGroupTypeCrossReference_0() { return cFgFeatureGroupTypeCrossReference_0; }

		//QCREF
		public RuleCall getFgFeatureGroupTypeQCREFParserRuleCall_0_1() { return cFgFeatureGroupTypeQCREFParserRuleCall_0_1; }
	}

	public class ViewpointReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewpointReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolicyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPolicyEnforcement_policyCrossReference_0_0 = (CrossReference)cPolicyAssignment_0.eContents().get(0);
		private final RuleCall cPolicyEnforcement_policyIDTerminalRuleCall_0_0_1 = (RuleCall)cPolicyEnforcement_policyCrossReference_0_0.eContents().get(1);
		private final Assignment cVp_refAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVp_refMCSViewpointCrossReference_1_0 = (CrossReference)cVp_refAssignment_1.eContents().get(0);
		private final RuleCall cVp_refMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cVp_refMCSViewpointCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ViewpointReference:
		//	policy=[Enforcement_policy]? vp_ref=[MCSViewpoint] ";";
		@Override public ParserRule getRule() { return rule; }

		//policy=[Enforcement_policy]? vp_ref=[MCSViewpoint] ";"
		public Group getGroup() { return cGroup; }

		//policy=[Enforcement_policy]?
		public Assignment getPolicyAssignment_0() { return cPolicyAssignment_0; }

		//[Enforcement_policy]
		public CrossReference getPolicyEnforcement_policyCrossReference_0_0() { return cPolicyEnforcement_policyCrossReference_0_0; }

		//ID
		public RuleCall getPolicyEnforcement_policyIDTerminalRuleCall_0_0_1() { return cPolicyEnforcement_policyIDTerminalRuleCall_0_0_1; }

		//vp_ref=[MCSViewpoint]
		public Assignment getVp_refAssignment_1() { return cVp_refAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getVp_refMCSViewpointCrossReference_1_0() { return cVp_refMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getVp_refMCSViewpointIDTerminalRuleCall_1_0_1() { return cVp_refMCSViewpointIDTerminalRuleCall_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ConstraintsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cB_labelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cB_labelBlock_label_idParserRuleCall_0_0_0 = (RuleCall)cB_labelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCsLabelled_check_statementParserRuleCall_2_0 = (RuleCall)cCsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstraintsBlock:
		//	(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}";
		@Override public ParserRule getRule() { return rule; }

		//(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}"
		public Group getGroup() { return cGroup; }

		//(b_label=block_label_id ":")?
		public Group getGroup_0() { return cGroup_0; }

		//b_label=block_label_id
		public Assignment getB_labelAssignment_0_0() { return cB_labelAssignment_0_0; }

		//block_label_id
		public RuleCall getB_labelBlock_label_idParserRuleCall_0_0_0() { return cB_labelBlock_label_idParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//cs+=labelled_check_statement+
		public Assignment getCsAssignment_2() { return cCsAssignment_2; }

		//labelled_check_statement
		public RuleCall getCsLabelled_check_statementParserRuleCall_2_0() { return cCsLabelled_check_statementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class Labelled_check_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "labelled_check_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cC_labelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cC_labelCheck_label_idParserRuleCall_0_0 = (RuleCall)cC_labelAssignment_0.eContents().get(0);
		private final Assignment cCsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCsCheck_statementParserRuleCall_1_0 = (RuleCall)cCsAssignment_1.eContents().get(0);
		
		//labelled_check_statement:
		//	c_label=check_label_id? cs=check_statement;
		@Override public ParserRule getRule() { return rule; }

		//c_label=check_label_id? cs=check_statement
		public Group getGroup() { return cGroup; }

		//c_label=check_label_id?
		public Assignment getC_labelAssignment_0() { return cC_labelAssignment_0; }

		//check_label_id
		public RuleCall getC_labelCheck_label_idParserRuleCall_0_0() { return cC_labelCheck_label_idParserRuleCall_0_0; }

		//cs=check_statement
		public Assignment getCsAssignment_1() { return cCsAssignment_1; }

		//check_statement
		public RuleCall getCsCheck_statementParserRuleCall_1_0() { return cCsCheck_statementParserRuleCall_1_0; }
	}

	public class Check_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheck_theoremParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheck_assertionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//check_statement:
		//	check_theorem | check_assertion;
		@Override public ParserRule getRule() { return rule; }

		//check_theorem | check_assertion
		public Alternatives getAlternatives() { return cAlternatives; }

		//check_theorem
		public RuleCall getCheck_theoremParserRuleCall_0() { return cCheck_theoremParserRuleCall_0; }

		//check_assertion
		public RuleCall getCheck_assertionParserRuleCall_1() { return cCheck_assertionParserRuleCall_1; }
	}

	public class Block_label_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block_label_id");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//block_label_id:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_label_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_label_id");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//check_label_id:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_theoremElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_theorem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheoremKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTheoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTheoTheorem_declarationCrossReference_2_0 = (CrossReference)cTheoAssignment_2.eContents().get(0);
		private final RuleCall cTheoTheorem_declarationIDTerminalRuleCall_2_0_1 = (RuleCall)cTheoTheorem_declarationCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRootAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRootRoot_elementParserRuleCall_3_1_0 = (RuleCall)cRootAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cInmodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInmodeModeSpecParserRuleCall_4_0 = (RuleCall)cInmodeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFailKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStrAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStrString_expressionParserRuleCall_5_1_0 = (RuleCall)cStrAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//check_theorem:
		//	"check" "theorem" theo=[theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
		//	str=string_expression)? ";";
		@Override public ParserRule getRule() { return rule; }

		//"check" "theorem" theo=[theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
		//str=string_expression)? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//"theorem"
		public Keyword getTheoremKeyword_1() { return cTheoremKeyword_1; }

		//theo=[theorem_declaration]
		public Assignment getTheoAssignment_2() { return cTheoAssignment_2; }

		//[theorem_declaration]
		public CrossReference getTheoTheorem_declarationCrossReference_2_0() { return cTheoTheorem_declarationCrossReference_2_0; }

		//ID
		public RuleCall getTheoTheorem_declarationIDTerminalRuleCall_2_0_1() { return cTheoTheorem_declarationIDTerminalRuleCall_2_0_1; }

		//("(" root=root_element ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//root=root_element
		public Assignment getRootAssignment_3_1() { return cRootAssignment_3_1; }

		//root_element
		public RuleCall getRootRoot_elementParserRuleCall_3_1_0() { return cRootRoot_elementParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//inmode=ModeSpec?
		public Assignment getInmodeAssignment_4() { return cInmodeAssignment_4; }

		//ModeSpec
		public RuleCall getInmodeModeSpecParserRuleCall_4_0() { return cInmodeModeSpecParserRuleCall_4_0; }

		//("fail" str=string_expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"fail"
		public Keyword getFailKeyword_5_0() { return cFailKeyword_5_0; }

		//str=string_expression
		public Assignment getStrAssignment_5_1() { return cStrAssignment_5_1; }

		//string_expression
		public RuleCall getStrString_expressionParserRuleCall_5_1_0() { return cStrString_expressionParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ModeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeModeNameParserRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		
		//ModeSpec:
		//	"in" "mode" mode=ModeName;
		@Override public ParserRule getRule() { return rule; }

		//"in" "mode" mode=ModeName
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//"mode"
		public Keyword getModeKeyword_1() { return cModeKeyword_1; }

		//mode=ModeName
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }

		//ModeName
		public RuleCall getModeModeNameParserRuleCall_2_0() { return cModeModeNameParserRuleCall_2_0; }
	}

	public class ModeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ModeName:
		//	name= //temporary
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//name= //temporary
		//ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		////temporary
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_assertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootRoot_elementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Assignment cInmodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInmodeModeSpecParserRuleCall_2_0 = (RuleCall)cInmodeAssignment_2.eContents().get(0);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprAssertion_expressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFailKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cStrAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStrString_expressionParserRuleCall_4_1_0 = (RuleCall)cStrAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//check_assertion:
		//	"check" root=root_element? inmode=ModeSpec? expr=assertion_expression ("fail" str=string_expression)? ";";
		@Override public ParserRule getRule() { return rule; }

		//"check" root=root_element? inmode=ModeSpec? expr=assertion_expression ("fail" str=string_expression)? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//root=root_element?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }

		//root_element
		public RuleCall getRootRoot_elementParserRuleCall_1_0() { return cRootRoot_elementParserRuleCall_1_0; }

		//inmode=ModeSpec?
		public Assignment getInmodeAssignment_2() { return cInmodeAssignment_2; }

		//ModeSpec
		public RuleCall getInmodeModeSpecParserRuleCall_2_0() { return cInmodeModeSpecParserRuleCall_2_0; }

		//expr=assertion_expression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//assertion_expression
		public RuleCall getExprAssertion_expressionParserRuleCall_3_0() { return cExprAssertion_expressionParserRuleCall_3_0; }

		//("fail" str=string_expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"fail"
		public Keyword getFailKeyword_4_0() { return cFailKeyword_4_0; }

		//str=string_expression
		public Assignment getStrAssignment_4_1() { return cStrAssignment_4_1; }

		//string_expression
		public RuleCall getStrString_expressionParserRuleCall_4_1_0() { return cStrString_expressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Root_elementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "root_element");
		private final RuleCall cElement_referenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//root_element:
		//	element_reference;
		@Override public ParserRule getRule() { return rule; }

		//element_reference
		public RuleCall getElement_referenceParserRuleCall() { return cElement_referenceParserRuleCall; }
	}

	public class Element_referenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "element_reference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////temporary
		//element_reference:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class PackageEnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageEnforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViewpointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cViewpointMCSViewpointCrossReference_1_0 = (CrossReference)cViewpointAssignment_1.eContents().get(0);
		private final RuleCall cViewpointMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cViewpointMCSViewpointCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageEnforce:
		//	"enforce" viewpoint=[MCSViewpoint] //temporary
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//"enforce" viewpoint=[MCSViewpoint] //temporary
		//";"
		public Group getGroup() { return cGroup; }

		//"enforce"
		public Keyword getEnforceKeyword_0() { return cEnforceKeyword_0; }

		//viewpoint=[MCSViewpoint]
		public Assignment getViewpointAssignment_1() { return cViewpointAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getViewpointMCSViewpointCrossReference_1_0() { return cViewpointMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getViewpointMCSViewpointIDTerminalRuleCall_1_0_1() { return cViewpointMCSViewpointIDTerminalRuleCall_1_0_1; }

		////temporary
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprPropertyExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//expression:
		//	expr=PropertyExpression;
		@Override public ParserRule getRule() { return rule; }

		//expr=PropertyExpression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//PropertyExpression
		public RuleCall getExprPropertyExpressionParserRuleCall_0() { return cExprPropertyExpressionParserRuleCall_0; }
	}

	public class Assertion_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assertion_expression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//assertion_expression:
		//	expr=expression;
		@Override public ParserRule getRule() { return rule; }

		//expr=expression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}

	public class String_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "string_expression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//string_expression:
		//	expr=expression;
		@Override public ParserRule getRule() { return rule; }

		//expr=expression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}

	public class MCSAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSAnnexSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTheoremsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTheoremsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTheoremsTheorem_declarationParserRuleCall_1_1_0 = (RuleCall)cTheoremsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEnforceclausesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEnforceclausesClassifierEnforceParserRuleCall_2_0_0 = (RuleCall)cEnforceclausesAssignment_2_0.eContents().get(0);
		private final Assignment cEnforceclausesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEnforceclausesClassifierEnforceParserRuleCall_2_1_0 = (RuleCall)cEnforceclausesAssignment_2_1.eContents().get(0);
		
		////temporary
		//MCSAnnexSubclause:
		//	{MCSAnnexSubclause} ("theorems" theorems+=theorem_declaration+) (enforceclauses+=ClassifierEnforce
		//	enforceclauses+=ClassifierEnforce*)?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSAnnexSubclause} ("theorems" theorems+=theorem_declaration+) (enforceclauses+=ClassifierEnforce
		//enforceclauses+=ClassifierEnforce*)?
		public Group getGroup() { return cGroup; }

		//{MCSAnnexSubclause}
		public Action getMCSAnnexSubclauseAction_0() { return cMCSAnnexSubclauseAction_0; }

		//"theorems" theorems+=theorem_declaration+
		public Group getGroup_1() { return cGroup_1; }

		//"theorems"
		public Keyword getTheoremsKeyword_1_0() { return cTheoremsKeyword_1_0; }

		//theorems+=theorem_declaration+
		public Assignment getTheoremsAssignment_1_1() { return cTheoremsAssignment_1_1; }

		//theorem_declaration
		public RuleCall getTheoremsTheorem_declarationParserRuleCall_1_1_0() { return cTheoremsTheorem_declarationParserRuleCall_1_1_0; }

		//(enforceclauses+=ClassifierEnforce enforceclauses+=ClassifierEnforce*)?
		public Group getGroup_2() { return cGroup_2; }

		//enforceclauses+=ClassifierEnforce
		public Assignment getEnforceclausesAssignment_2_0() { return cEnforceclausesAssignment_2_0; }

		//ClassifierEnforce
		public RuleCall getEnforceclausesClassifierEnforceParserRuleCall_2_0_0() { return cEnforceclausesClassifierEnforceParserRuleCall_2_0_0; }

		//enforceclauses+=ClassifierEnforce*
		public Assignment getEnforceclausesAssignment_2_1() { return cEnforceclausesAssignment_2_1; }

		//ClassifierEnforce
		public RuleCall getEnforceclausesClassifierEnforceParserRuleCall_2_1_0() { return cEnforceclausesClassifierEnforceParserRuleCall_2_1_0; }
	}

	public class ClassifierEnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierEnforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViewpointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cViewpointMCSViewpointCrossReference_1_0 = (CrossReference)cViewpointAssignment_1.eContents().get(0);
		private final RuleCall cViewpointMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cViewpointMCSViewpointCrossReference_1_0.eContents().get(1);
		private final Assignment cScriptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptClassifierScriptParserRuleCall_2_0 = (RuleCall)cScriptAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassifierEnforce:
		//	"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";";
		@Override public ParserRule getRule() { return rule; }

		//"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";"
		public Group getGroup() { return cGroup; }

		//"enforce"
		public Keyword getEnforceKeyword_0() { return cEnforceKeyword_0; }

		//viewpoint=[MCSViewpoint]
		public Assignment getViewpointAssignment_1() { return cViewpointAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getViewpointMCSViewpointCrossReference_1_0() { return cViewpointMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getViewpointMCSViewpointIDTerminalRuleCall_1_0_1() { return cViewpointMCSViewpointIDTerminalRuleCall_1_0_1; }

		//script=ClassifierScript
		public Assignment getScriptAssignment_2() { return cScriptAssignment_2; }

		//ClassifierScript
		public RuleCall getScriptClassifierScriptParserRuleCall_2_0() { return cScriptClassifierScriptParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ClassifierScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cC_blockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cC_blockConstraintsBlockParserRuleCall_1_0 = (RuleCall)cC_blockAssignment_1.eContents().get(0);
		private final Keyword cEndscriptKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefViewpointReferenceParserRuleCall_3_0 = (RuleCall)cRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClassifierScript:
		//	"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";";
		@Override public ParserRule getRule() { return rule; }

		//"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//c_block+=ConstraintsBlock*
		public Assignment getC_blockAssignment_1() { return cC_blockAssignment_1; }

		//ConstraintsBlock
		public RuleCall getC_blockConstraintsBlockParserRuleCall_1_0() { return cC_blockConstraintsBlockParserRuleCall_1_0; }

		//"endscript"
		public Keyword getEndscriptKeyword_2() { return cEndscriptKeyword_2; }

		//ref=ViewpointReference
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//ViewpointReference
		public RuleCall getRefViewpointReferenceParserRuleCall_3_0() { return cRefViewpointReferenceParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Theorem_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "theorem_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheoremKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMlIn_modes_listParserRuleCall_2_0 = (RuleCall)cMlAssignment_2.eContents().get(0);
		private final Assignment cLocalsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocalsLocal_declarationParserRuleCall_3_0 = (RuleCall)cLocalsAssignment_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsTheorem_statementsParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndnameIDTerminalRuleCall_6_0 = (RuleCall)cEndnameAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//theorem_declaration:
		//	"theorem" name=ID ml?=in_modes_list? locals+=local_declaration* statements+=theorem_statements* "end" endname=ID ";";
		@Override public ParserRule getRule() { return rule; }

		//"theorem" name=ID ml?=in_modes_list? locals+=local_declaration* statements+=theorem_statements* "end" endname=ID ";"
		public Group getGroup() { return cGroup; }

		//"theorem"
		public Keyword getTheoremKeyword_0() { return cTheoremKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//ml?=in_modes_list?
		public Assignment getMlAssignment_2() { return cMlAssignment_2; }

		//in_modes_list
		public RuleCall getMlIn_modes_listParserRuleCall_2_0() { return cMlIn_modes_listParserRuleCall_2_0; }

		//locals+=local_declaration*
		public Assignment getLocalsAssignment_3() { return cLocalsAssignment_3; }

		//local_declaration
		public RuleCall getLocalsLocal_declarationParserRuleCall_3_0() { return cLocalsLocal_declarationParserRuleCall_3_0; }

		//statements+=theorem_statements*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//theorem_statements
		public RuleCall getStatementsTheorem_statementsParserRuleCall_4_0() { return cStatementsTheorem_statementsParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//endname=ID
		public Assignment getEndnameAssignment_6() { return cEndnameAssignment_6; }

		//ID
		public RuleCall getEndnameIDTerminalRuleCall_6_0() { return cEndnameIDTerminalRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class In_modes_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "in_modes_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModesIDTerminalRuleCall_2_0 = (RuleCall)cModesAssignment_2.eContents().get(0);
		
		//in_modes_list:
		//	"in" "modes" modes+=ID+;
		@Override public ParserRule getRule() { return rule; }

		//"in" "modes" modes+=ID+
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//"modes"
		public Keyword getModesKeyword_1() { return cModesKeyword_1; }

		//modes+=ID+
		public Assignment getModesAssignment_2() { return cModesAssignment_2; }

		//ID
		public RuleCall getModesIDTerminalRuleCall_2_0() { return cModesIDTerminalRuleCall_2_0; }
	}

	public class Local_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "local_declaration");
		private final RuleCall cConstant_declarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////temporary
		//local_declaration:
		//	constant_declaration;
		@Override public ParserRule getRule() { return rule; }

		//constant_declaration
		public RuleCall getConstant_declarationParserRuleCall() { return cConstant_declarationParserRuleCall; }
	}

	public class Constant_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cConstant_identifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeft_exprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeft_exprConstant_expressionParserRuleCall_4_0 = (RuleCall)cLeft_exprAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//constant_declaration:
		//	"const" constant_identifier type=type_expression? ":=" left_expr=constant_expression ";";
		@Override public ParserRule getRule() { return rule; }

		//"const" constant_identifier type=type_expression? ":=" left_expr=constant_expression ";"
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//constant_identifier
		public RuleCall getConstant_identifierParserRuleCall_1() { return cConstant_identifierParserRuleCall_1; }

		//type=type_expression?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//left_expr=constant_expression
		public Assignment getLeft_exprAssignment_4() { return cLeft_exprAssignment_4; }

		//constant_expression
		public RuleCall getLeft_exprConstant_expressionParserRuleCall_4_0() { return cLeft_exprConstant_expressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Constant_identifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_identifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//constant_identifier:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Type_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_expression");
		private final RuleCall cBasic_typeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////temporary
		//type_expression:
		//	basic_type;
		@Override public ParserRule getRule() { return rule; }

		//basic_type
		public RuleCall getBasic_typeParserRuleCall() { return cBasic_typeParserRuleCall; }
	}

	public class Basic_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "basic_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBoolBooleanTypeParserRuleCall_0_0 = (RuleCall)cBoolAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringStringTypeParserRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//basic_type:
		//	bool=BooleanType | string=StringType;
		@Override public ParserRule getRule() { return rule; }

		//bool=BooleanType | string=StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//bool=BooleanType
		public Assignment getBoolAssignment_0() { return cBoolAssignment_0; }

		//BooleanType
		public RuleCall getBoolBooleanTypeParserRuleCall_0_0() { return cBoolBooleanTypeParserRuleCall_0_0; }

		//string=StringType
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }

		//StringType
		public RuleCall getStringStringTypeParserRuleCall_1_0() { return cStringStringTypeParserRuleCall_1_0; }
	}

	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_expression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//constant_expression:
		//	expression;
		@Override public ParserRule getRule() { return rule; }

		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class Theorem_statementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "theorem_statements");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cStatementsStatementsKeyword_0 = (Keyword)cStatementsAssignment.eContents().get(0);
		
		//theorem_statements:
		//	statements="statements";
		@Override public ParserRule getRule() { return rule; }

		//statements="statements"
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//"statements"
		public Keyword getStatementsStatementsKeyword_0() { return cStatementsStatementsKeyword_0; }
	}
	
	
	private final MCSGrammarRootElements pMCSGrammarRoot;
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final MCSAnnexLibraryElements pMCSAnnexLibrary;
	private final MCSViewpointElements pMCSViewpoint;
	private final Enforcement_policyElements pEnforcement_policy;
	private final PackageScriptElements pPackageScript;
	private final AppliesToClauseElements pAppliesToClause;
	private final ClassifierCategoryElements pClassifierCategory;
	private final FeatureGroupClassifierReferenceElements pFeatureGroupClassifierReference;
	private final ViewpointReferenceElements pViewpointReference;
	private final ConstraintsBlockElements pConstraintsBlock;
	private final Labelled_check_statementElements pLabelled_check_statement;
	private final Check_statementElements pCheck_statement;
	private final Block_label_idElements pBlock_label_id;
	private final Check_label_idElements pCheck_label_id;
	private final Check_theoremElements pCheck_theorem;
	private final ModeSpecElements pModeSpec;
	private final ModeNameElements pModeName;
	private final Check_assertionElements pCheck_assertion;
	private final Root_elementElements pRoot_element;
	private final Element_referenceElements pElement_reference;
	private final PackageEnforceElements pPackageEnforce;
	private final ExpressionElements pExpression;
	private final Assertion_expressionElements pAssertion_expression;
	private final String_expressionElements pString_expression;
	private final MCSAnnexSubclauseElements pMCSAnnexSubclause;
	private final ClassifierEnforceElements pClassifierEnforce;
	private final ClassifierScriptElements pClassifierScript;
	private final Theorem_declarationElements pTheorem_declaration;
	private final In_modes_listElements pIn_modes_list;
	private final Local_declarationElements pLocal_declaration;
	private final Constant_declarationElements pConstant_declaration;
	private final Constant_identifierElements pConstant_identifier;
	private final Type_expressionElements pType_expression;
	private final Basic_typeElements pBasic_type;
	private final Constant_expressionElements pConstant_expression;
	private final Theorem_statementsElements pTheorem_statements;
	
	private final Grammar grammar;

	private final Aadl2GrammarAccess gaAadl2;

	@Inject
	public MCSGrammarAccess(GrammarProvider grammarProvider,
		Aadl2GrammarAccess gaAadl2) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAadl2 = gaAadl2;
		this.pMCSGrammarRoot = new MCSGrammarRootElements();
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pMCSAnnexLibrary = new MCSAnnexLibraryElements();
		this.pMCSViewpoint = new MCSViewpointElements();
		this.pEnforcement_policy = new Enforcement_policyElements();
		this.pPackageScript = new PackageScriptElements();
		this.pAppliesToClause = new AppliesToClauseElements();
		this.pClassifierCategory = new ClassifierCategoryElements();
		this.pFeatureGroupClassifierReference = new FeatureGroupClassifierReferenceElements();
		this.pViewpointReference = new ViewpointReferenceElements();
		this.pConstraintsBlock = new ConstraintsBlockElements();
		this.pLabelled_check_statement = new Labelled_check_statementElements();
		this.pCheck_statement = new Check_statementElements();
		this.pBlock_label_id = new Block_label_idElements();
		this.pCheck_label_id = new Check_label_idElements();
		this.pCheck_theorem = new Check_theoremElements();
		this.pModeSpec = new ModeSpecElements();
		this.pModeName = new ModeNameElements();
		this.pCheck_assertion = new Check_assertionElements();
		this.pRoot_element = new Root_elementElements();
		this.pElement_reference = new Element_referenceElements();
		this.pPackageEnforce = new PackageEnforceElements();
		this.pExpression = new ExpressionElements();
		this.pAssertion_expression = new Assertion_expressionElements();
		this.pString_expression = new String_expressionElements();
		this.pMCSAnnexSubclause = new MCSAnnexSubclauseElements();
		this.pClassifierEnforce = new ClassifierEnforceElements();
		this.pClassifierScript = new ClassifierScriptElements();
		this.pTheorem_declaration = new Theorem_declarationElements();
		this.pIn_modes_list = new In_modes_listElements();
		this.pLocal_declaration = new Local_declarationElements();
		this.pConstant_declaration = new Constant_declarationElements();
		this.pConstant_identifier = new Constant_identifierElements();
		this.pType_expression = new Type_expressionElements();
		this.pBasic_type = new Basic_typeElements();
		this.pConstant_expression = new Constant_expressionElements();
		this.pTheorem_statements = new Theorem_statementsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.xtext.aadl2.mcs.MCS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public Aadl2GrammarAccess getAadl2GrammarAccess() {
		return gaAadl2;
	}

	
	//MCSGrammarRoot:
	//	lib=MCSAnnexLibrary | "sub" subclause=MCSAnnexSubclause;
	public MCSGrammarRootElements getMCSGrammarRootAccess() {
		return pMCSGrammarRoot;
	}
	
	public ParserRule getMCSGrammarRootRule() {
		return getMCSGrammarRootAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary:
	//	MCSAnnexLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	MCSAnnexSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//MCSAnnexLibrary:
	//	{MCSAnnexLibrary} ("theorems" theorems+=theorem_declaration+) (viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)?
	//	(enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?;
	public MCSAnnexLibraryElements getMCSAnnexLibraryAccess() {
		return pMCSAnnexLibrary;
	}
	
	public ParserRule getMCSAnnexLibraryRule() {
		return getMCSAnnexLibraryAccess().getRule();
	}

	//MCSViewpoint:
	//	"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript? ";";
	public MCSViewpointElements getMCSViewpointAccess() {
		return pMCSViewpoint;
	}
	
	public ParserRule getMCSViewpointRule() {
		return getMCSViewpointAccess().getRule();
	}

	//Enforcement_policy:
	//	(pack?="package" | class?="classifier") "contract";
	public Enforcement_policyElements getEnforcement_policyAccess() {
		return pEnforcement_policy;
	}
	
	public ParserRule getEnforcement_policyRule() {
		return getEnforcement_policyAccess().getRule();
	}

	//PackageScript:
	//	"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";";
	public PackageScriptElements getPackageScriptAccess() {
		return pPackageScript;
	}
	
	public ParserRule getPackageScriptRule() {
		return getPackageScriptAccess().getRule();
	}

	//AppliesToClause:
	//	"applies" "to" (all?="all" //					ref_to_c = ComponentClassifierReference //|
	//	//					ref_to_f = FeatureGroupClassifierReference				
	//	| category= //|
	//	ClassifierCategory);
	public AppliesToClauseElements getAppliesToClauseAccess() {
		return pAppliesToClause;
	}
	
	public ParserRule getAppliesToClauseRule() {
		return getAppliesToClauseAccess().getRule();
	}

	//ClassifierCategory:
	//	{ClassifierCategory} (component=ComponentCategory ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
	//	ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?);
	public ClassifierCategoryElements getClassifierCategoryAccess() {
		return pClassifierCategory;
	}
	
	public ParserRule getClassifierCategoryRule() {
		return getClassifierCategoryAccess().getRule();
	}

	////ComponentClassifierReference : 
	////	(ct = [aadl2::ComponentType|QCREF]   | 
	////    ci = [aadl2::ComponentImplementation|QCREF] 
	////	)
	////;
	//FeatureGroupClassifierReference:
	//	fg=[aadl2::FeatureGroupType|QCREF];
	public FeatureGroupClassifierReferenceElements getFeatureGroupClassifierReferenceAccess() {
		return pFeatureGroupClassifierReference;
	}
	
	public ParserRule getFeatureGroupClassifierReferenceRule() {
		return getFeatureGroupClassifierReferenceAccess().getRule();
	}

	//ViewpointReference:
	//	policy=[Enforcement_policy]? vp_ref=[MCSViewpoint] ";";
	public ViewpointReferenceElements getViewpointReferenceAccess() {
		return pViewpointReference;
	}
	
	public ParserRule getViewpointReferenceRule() {
		return getViewpointReferenceAccess().getRule();
	}

	//ConstraintsBlock:
	//	(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}";
	public ConstraintsBlockElements getConstraintsBlockAccess() {
		return pConstraintsBlock;
	}
	
	public ParserRule getConstraintsBlockRule() {
		return getConstraintsBlockAccess().getRule();
	}

	//labelled_check_statement:
	//	c_label=check_label_id? cs=check_statement;
	public Labelled_check_statementElements getLabelled_check_statementAccess() {
		return pLabelled_check_statement;
	}
	
	public ParserRule getLabelled_check_statementRule() {
		return getLabelled_check_statementAccess().getRule();
	}

	//check_statement:
	//	check_theorem | check_assertion;
	public Check_statementElements getCheck_statementAccess() {
		return pCheck_statement;
	}
	
	public ParserRule getCheck_statementRule() {
		return getCheck_statementAccess().getRule();
	}

	//block_label_id:
	//	name=ID;
	public Block_label_idElements getBlock_label_idAccess() {
		return pBlock_label_id;
	}
	
	public ParserRule getBlock_label_idRule() {
		return getBlock_label_idAccess().getRule();
	}

	//check_label_id:
	//	name=ID;
	public Check_label_idElements getCheck_label_idAccess() {
		return pCheck_label_id;
	}
	
	public ParserRule getCheck_label_idRule() {
		return getCheck_label_idAccess().getRule();
	}

	//check_theorem:
	//	"check" "theorem" theo=[theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
	//	str=string_expression)? ";";
	public Check_theoremElements getCheck_theoremAccess() {
		return pCheck_theorem;
	}
	
	public ParserRule getCheck_theoremRule() {
		return getCheck_theoremAccess().getRule();
	}

	//ModeSpec:
	//	"in" "mode" mode=ModeName;
	public ModeSpecElements getModeSpecAccess() {
		return pModeSpec;
	}
	
	public ParserRule getModeSpecRule() {
		return getModeSpecAccess().getRule();
	}

	//ModeName:
	//	name= //temporary
	//	ID;
	public ModeNameElements getModeNameAccess() {
		return pModeName;
	}
	
	public ParserRule getModeNameRule() {
		return getModeNameAccess().getRule();
	}

	//check_assertion:
	//	"check" root=root_element? inmode=ModeSpec? expr=assertion_expression ("fail" str=string_expression)? ";";
	public Check_assertionElements getCheck_assertionAccess() {
		return pCheck_assertion;
	}
	
	public ParserRule getCheck_assertionRule() {
		return getCheck_assertionAccess().getRule();
	}

	//root_element:
	//	element_reference;
	public Root_elementElements getRoot_elementAccess() {
		return pRoot_element;
	}
	
	public ParserRule getRoot_elementRule() {
		return getRoot_elementAccess().getRule();
	}

	////temporary
	//element_reference:
	//	name=ID;
	public Element_referenceElements getElement_referenceAccess() {
		return pElement_reference;
	}
	
	public ParserRule getElement_referenceRule() {
		return getElement_referenceAccess().getRule();
	}

	//PackageEnforce:
	//	"enforce" viewpoint=[MCSViewpoint] //temporary
	//	";";
	public PackageEnforceElements getPackageEnforceAccess() {
		return pPackageEnforce;
	}
	
	public ParserRule getPackageEnforceRule() {
		return getPackageEnforceAccess().getRule();
	}

	//expression:
	//	expr=PropertyExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//assertion_expression:
	//	expr=expression;
	public Assertion_expressionElements getAssertion_expressionAccess() {
		return pAssertion_expression;
	}
	
	public ParserRule getAssertion_expressionRule() {
		return getAssertion_expressionAccess().getRule();
	}

	//string_expression:
	//	expr=expression;
	public String_expressionElements getString_expressionAccess() {
		return pString_expression;
	}
	
	public ParserRule getString_expressionRule() {
		return getString_expressionAccess().getRule();
	}

	////temporary
	//MCSAnnexSubclause:
	//	{MCSAnnexSubclause} ("theorems" theorems+=theorem_declaration+) (enforceclauses+=ClassifierEnforce
	//	enforceclauses+=ClassifierEnforce*)?;
	public MCSAnnexSubclauseElements getMCSAnnexSubclauseAccess() {
		return pMCSAnnexSubclause;
	}
	
	public ParserRule getMCSAnnexSubclauseRule() {
		return getMCSAnnexSubclauseAccess().getRule();
	}

	//ClassifierEnforce:
	//	"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";";
	public ClassifierEnforceElements getClassifierEnforceAccess() {
		return pClassifierEnforce;
	}
	
	public ParserRule getClassifierEnforceRule() {
		return getClassifierEnforceAccess().getRule();
	}

	//ClassifierScript:
	//	"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";";
	public ClassifierScriptElements getClassifierScriptAccess() {
		return pClassifierScript;
	}
	
	public ParserRule getClassifierScriptRule() {
		return getClassifierScriptAccess().getRule();
	}

	//theorem_declaration:
	//	"theorem" name=ID ml?=in_modes_list? locals+=local_declaration* statements+=theorem_statements* "end" endname=ID ";";
	public Theorem_declarationElements getTheorem_declarationAccess() {
		return pTheorem_declaration;
	}
	
	public ParserRule getTheorem_declarationRule() {
		return getTheorem_declarationAccess().getRule();
	}

	//in_modes_list:
	//	"in" "modes" modes+=ID+;
	public In_modes_listElements getIn_modes_listAccess() {
		return pIn_modes_list;
	}
	
	public ParserRule getIn_modes_listRule() {
		return getIn_modes_listAccess().getRule();
	}

	////temporary
	//local_declaration:
	//	constant_declaration;
	public Local_declarationElements getLocal_declarationAccess() {
		return pLocal_declaration;
	}
	
	public ParserRule getLocal_declarationRule() {
		return getLocal_declarationAccess().getRule();
	}

	//constant_declaration:
	//	"const" constant_identifier type=type_expression? ":=" left_expr=constant_expression ";";
	public Constant_declarationElements getConstant_declarationAccess() {
		return pConstant_declaration;
	}
	
	public ParserRule getConstant_declarationRule() {
		return getConstant_declarationAccess().getRule();
	}

	//constant_identifier:
	//	name=ID;
	public Constant_identifierElements getConstant_identifierAccess() {
		return pConstant_identifier;
	}
	
	public ParserRule getConstant_identifierRule() {
		return getConstant_identifierAccess().getRule();
	}

	////temporary
	//type_expression:
	//	basic_type;
	public Type_expressionElements getType_expressionAccess() {
		return pType_expression;
	}
	
	public ParserRule getType_expressionRule() {
		return getType_expressionAccess().getRule();
	}

	//basic_type:
	//	bool=BooleanType | string=StringType;
	public Basic_typeElements getBasic_typeAccess() {
		return pBasic_type;
	}
	
	public ParserRule getBasic_typeRule() {
		return getBasic_typeAccess().getRule();
	}

	//constant_expression:
	//	expression;
	public Constant_expressionElements getConstant_expressionAccess() {
		return pConstant_expression;
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}

	//theorem_statements:
	//	statements="statements";
	public Theorem_statementsElements getTheorem_statementsAccess() {
		return pTheorem_statements;
	}
	
	public ParserRule getTheorem_statementsRule() {
		return getTheorem_statementsAccess().getRule();
	}

	////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	// Model returns aadl2::ModelUnit:
	//	(AadlPackage | PropertySet)?;
	public Aadl2GrammarAccess.ModelElements getModelAccess() {
		return gaAadl2.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////ID ('::' ID)* ';';
	// AadlPackage returns aadl2::AadlPackage:
	//	"package" name=PNAME (ownedPublicSection=PublicPackageSection ownedPrivateSection=PrivatePackageSection? |
	//	ownedPrivateSection=PrivatePackageSection) ("properties" (ownedPropertyAssociation+=BasicPropertyAssociation+
	//	//| (noProperties?='none' ';')
	// | "none" ";"))? "end" PNAME ";";
	public Aadl2GrammarAccess.AadlPackageElements getAadlPackageAccess() {
		return gaAadl2.getAadlPackageAccess();
	}
	
	public ParserRule getAadlPackageRule() {
		return getAadlPackageAccess().getRule();
	}

	//PublicPackageSection returns aadl2::PublicPackageSection:
	//	{aadl2::PublicPackageSection} "public" ("with" importedUnit+=[aadl2::ModelUnit|PNAME] (","
	//	importedUnit+=[aadl2::ModelUnit|PNAME])* ";" | ownedPackageRename+=(PackageRename | RenameAll) |
	//	ownedFeatureGroupTypeRename+=FGTRename | ownedComponentTypeRename+=CTRename)* (ownedClassifier+=Classifier |
	//	ownedAnnexLibrary+=AnnexLibrary)*;
	public Aadl2GrammarAccess.PublicPackageSectionElements getPublicPackageSectionAccess() {
		return gaAadl2.getPublicPackageSectionAccess();
	}
	
	public ParserRule getPublicPackageSectionRule() {
		return getPublicPackageSectionAccess().getRule();
	}

	//PrivatePackageSection returns aadl2::PrivatePackageSection:
	//	{aadl2::PrivatePackageSection} "private" ("with" importedUnit+=[aadl2::ModelUnit|PNAME] (","
	//	importedUnit+=[aadl2::ModelUnit|PNAME])* ";" | ownedPackageRename+=(PackageRename | RenameAll) |
	//	ownedFeatureGroupTypeRename+=FGTRename | ownedComponentTypeRename+=CTRename)* (ownedClassifier+=Classifier |
	//	ownedAnnexLibrary+=AnnexLibrary)*;
	public Aadl2GrammarAccess.PrivatePackageSectionElements getPrivatePackageSectionAccess() {
		return gaAadl2.getPrivatePackageSectionAccess();
	}
	
	public ParserRule getPrivatePackageSectionRule() {
		return getPrivatePackageSectionAccess().getRule();
	}

	//PackageRename returns aadl2::PackageRename:
	//	name=ID "renames" "package" renamedPackage=[aadl2::AadlPackage|PNAME] ("::" renameAll?="all")? ";";
	public Aadl2GrammarAccess.PackageRenameElements getPackageRenameAccess() {
		return gaAadl2.getPackageRenameAccess();
	}
	
	public ParserRule getPackageRenameRule() {
		return getPackageRenameAccess().getRule();
	}

	//RenameAll returns aadl2::PackageRename:
	//	"renames" renamedPackage=[aadl2::AadlPackage|PNAME] "::" renameAll?="all" ";";
	public Aadl2GrammarAccess.RenameAllElements getRenameAllAccess() {
		return gaAadl2.getRenameAllAccess();
	}
	
	public ParserRule getRenameAllRule() {
		return getRenameAllAccess().getRule();
	}

	//FGTRename returns aadl2::FeatureGroupTypeRename:
	//	name=ID? "renames" "feature" "group" renamedFeatureGroupType=[aadl2::FeatureGroupType|QCREF] ";";
	public Aadl2GrammarAccess.FGTRenameElements getFGTRenameAccess() {
		return gaAadl2.getFGTRenameAccess();
	}
	
	public ParserRule getFGTRenameRule() {
		return getFGTRenameAccess().getRule();
	}

	//CTRename returns aadl2::ComponentTypeRename:
	//	name=ID? "renames" category=ComponentCategory renamedComponentType=[aadl2::ComponentType|QCREF] ";";
	public Aadl2GrammarAccess.CTRenameElements getCTRenameAccess() {
		return gaAadl2.getCTRenameAccess();
	}
	
	public ParserRule getCTRenameRule() {
		return getCTRenameAccess().getRule();
	}

	//TypeExtension returns aadl2::TypeExtension:
	//	"extends" extended=[aadl2::ComponentType|QCREF];
	public Aadl2GrammarAccess.TypeExtensionElements getTypeExtensionAccess() {
		return gaAadl2.getTypeExtensionAccess();
	}
	
	public ParserRule getTypeExtensionRule() {
		return getTypeExtensionAccess().getRule();
	}

	//ImplementationExtension returns aadl2::ImplementationExtension:
	//	"extends" extended=[aadl2::ComponentImplementation|QCREF];
	public Aadl2GrammarAccess.ImplementationExtensionElements getImplementationExtensionAccess() {
		return gaAadl2.getImplementationExtensionAccess();
	}
	
	public ParserRule getImplementationExtensionRule() {
		return getImplementationExtensionAccess().getRule();
	}

	//GroupExtension returns aadl2::GroupExtension:
	//	"extends" extended=[aadl2::FeatureGroupType|QCREF];
	public Aadl2GrammarAccess.GroupExtensionElements getGroupExtensionAccess() {
		return gaAadl2.getGroupExtensionAccess();
	}
	
	public ParserRule getGroupExtensionRule() {
		return getGroupExtensionAccess().getRule();
	}

	//ComponentCategory returns aadl2::ComponentCategory:
	//	"abstract" | "bus" | "data" | "device" | "memory" | "process" | "processor" | "subprogram" | "subprogram" "group" |
	//	"system" | "thread" "group" | "thread" | "virtual" "bus" | "virtual" "processor";
	public Aadl2GrammarAccess.ComponentCategoryElements getComponentCategoryAccess() {
		return gaAadl2.getComponentCategoryAccess();
	}
	
	public ParserRule getComponentCategoryRule() {
		return getComponentCategoryAccess().getRule();
	}

	//Classifier returns aadl2::Classifier:
	//	ComponentType | ComponentImplementation | FeatureGroupType;
	public Aadl2GrammarAccess.ClassifierElements getClassifierAccess() {
		return gaAadl2.getClassifierAccess();
	}
	
	public ParserRule getClassifierRule() {
		return getClassifierAccess().getRule();
	}

	//ComponentType returns aadl2::ComponentType:
	//	AbstractType | SystemType | VirtualProcessorType | SubprogramGroupType | DataType | BusType | VirtualBusType |
	//	MemoryType | ProcessorType | ProcessType | ThreadGroupType | ThreadType | DeviceType | SubprogramType;
	public Aadl2GrammarAccess.ComponentTypeElements getComponentTypeAccess() {
		return gaAadl2.getComponentTypeAccess();
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}

	//AbstractType returns aadl2::AbstractType:
	//	"abstract" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedBusAccess+=BusAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.AbstractTypeElements getAbstractTypeAccess() {
		return gaAadl2.getAbstractTypeAccess();
	}
	
	public ParserRule getAbstractTypeRule() {
		return getAbstractTypeAccess().getRule();
	}

	//SystemType returns aadl2::SystemType:
	//	"system" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (ownedPrototype+=Prototype+ | noPrototypes?="none"
	//	";"))? ("features" ((ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort |
	//	ownedFeatureGroup+=FeatureGroup | ownedDataAccess+=DataAccess | ownedBusAccess+=BusAccess |
	//	ownedSubprogramAccess+=SubprogramAccess | ownedSubprogramGroupAccess+=SubprogramGroupAccess |
	//	ownedAbstractFeature+=AbstractFeature)+ | noFeatures?="none" ";"))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.SystemTypeElements getSystemTypeAccess() {
		return gaAadl2.getSystemTypeAccess();
	}
	
	public ParserRule getSystemTypeRule() {
		return getSystemTypeAccess().getRule();
	}

	//ProcessType returns aadl2::ProcessType:
	//	"process" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.ProcessTypeElements getProcessTypeAccess() {
		return gaAadl2.getProcessTypeAccess();
	}
	
	public ParserRule getProcessTypeRule() {
		return getProcessTypeAccess().getRule();
	}

	//ThreadGroupType returns aadl2::ThreadGroupType:
	//	"thread" "group" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.ThreadGroupTypeElements getThreadGroupTypeAccess() {
		return gaAadl2.getThreadGroupTypeAccess();
	}
	
	public ParserRule getThreadGroupTypeRule() {
		return getThreadGroupTypeAccess().getRule();
	}

	//ThreadType returns aadl2::ThreadType:
	//	"thread" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.ThreadTypeElements getThreadTypeAccess() {
		return gaAadl2.getThreadTypeAccess();
	}
	
	public ParserRule getThreadTypeRule() {
		return getThreadTypeAccess().getRule();
	}

	//SubprogramType returns aadl2::SubprogramType:
	//	"subprogram" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedParameter+=Parameter |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.SubprogramTypeElements getSubprogramTypeAccess() {
		return gaAadl2.getSubprogramTypeAccess();
	}
	
	public ParserRule getSubprogramTypeRule() {
		return getSubprogramTypeAccess().getRule();
	}

	//SubprogramGroupType returns aadl2::SubprogramGroupType:
	//	"subprogram" "group" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedSubprogramAccess+=SubprogramAccess |
	//	ownedFeatureGroup+=FeatureGroup | ownedSubprogramGroupAccess+=SubprogramGroupAccess |
	//	ownedAbstractFeature+=AbstractFeature)+))? ("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?="none"
	//	";"))? ("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.SubprogramGroupTypeElements getSubprogramGroupTypeAccess() {
		return gaAadl2.getSubprogramGroupTypeAccess();
	}
	
	public ParserRule getSubprogramGroupTypeRule() {
		return getSubprogramGroupTypeAccess().getRule();
	}

	//ProcessorType returns aadl2::ProcessorType:
	//	"processor" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedBusAccess+=BusAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.ProcessorTypeElements getProcessorTypeAccess() {
		return gaAadl2.getProcessorTypeAccess();
	}
	
	public ParserRule getProcessorTypeRule() {
		return getProcessorTypeAccess().getRule();
	}

	//DeviceType returns aadl2::DeviceType:
	//	"device" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedBusAccess+=BusAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.DeviceTypeElements getDeviceTypeAccess() {
		return gaAadl2.getDeviceTypeAccess();
	}
	
	public ParserRule getDeviceTypeRule() {
		return getDeviceTypeAccess().getRule();
	}

	//MemoryType returns aadl2::MemoryType:
	//	"memory" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedFeatureGroup+=FeatureGroup |
	//	ownedBusAccess+=BusAccess | ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort |
	//	ownedAbstractFeature+=AbstractFeature)+))? (derivedModes?="requires" "modes" ownedMode+=Mode+ | "modes"
	//	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.MemoryTypeElements getMemoryTypeAccess() {
		return gaAadl2.getMemoryTypeAccess();
	}
	
	public ParserRule getMemoryTypeRule() {
		return getMemoryTypeAccess().getRule();
	}

	//BusType returns aadl2::BusType:
	//	"bus" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedFeatureGroup+=FeatureGroup |
	//	ownedBusAccess+=BusAccess | ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort |
	//	ownedAbstractFeature+=AbstractFeature)+))? (derivedModes?="requires" "modes" ownedMode+=Mode+ | "modes"
	//	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.BusTypeElements getBusTypeAccess() {
		return gaAadl2.getBusTypeAccess();
	}
	
	public ParserRule getBusTypeRule() {
		return getBusTypeAccess().getRule();
	}

	//VirtualBusType returns aadl2::VirtualBusType:
	//	"virtual" "bus" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedFeatureGroup+=FeatureGroup |
	//	ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort |
	//	ownedAbstractFeature+=AbstractFeature)+))? (derivedModes?="requires" "modes" ownedMode+=Mode+ | "modes"
	//	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.VirtualBusTypeElements getVirtualBusTypeAccess() {
		return gaAadl2.getVirtualBusTypeAccess();
	}
	
	public ParserRule getVirtualBusTypeRule() {
		return getVirtualBusTypeAccess().getRule();
	}

	//VirtualProcessorType returns aadl2::VirtualProcessorType:
	//	"virtual" "processor" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedDataPort+=DataPort |
	//	ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort | ownedFeatureGroup+=FeatureGroup |
	//	ownedSubprogramAccess+=SubprogramAccess | ownedSubprogramGroupAccess+=SubprogramGroupAccess |
	//	ownedAbstractFeature+=AbstractFeature)+))? ("flows" (ownedFlowSpecification+=FlowSpecification+ | noFlows?="none"
	//	";"))? (derivedModes?="requires" "modes" ownedMode+=Mode+ | "modes" ((ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.VirtualProcessorTypeElements getVirtualProcessorTypeAccess() {
		return gaAadl2.getVirtualProcessorTypeAccess();
	}
	
	public ParserRule getVirtualProcessorTypeRule() {
		return getVirtualProcessorTypeAccess().getRule();
	}

	//DataType returns aadl2::DataType:
	//	"data" name=ID (ownedExtension=TypeExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" (noFeatures?="none" ";" | (ownedFeatureGroup+=FeatureGroup |
	//	ownedDataAccess+=DataAccess | ownedSubprogramAccess+=SubprogramAccess |
	//	ownedSubprogramGroupAccess+=SubprogramGroupAccess | ownedAbstractFeature+=AbstractFeature)+))? ("flows"
	//	(ownedFlowSpecification+=FlowSpecification+ | noFlows?="none" ";"))? (derivedModes?="requires" "modes"
	//	ownedMode+=Mode+ | "modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))?
	//	("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.DataTypeElements getDataTypeAccess() {
		return gaAadl2.getDataTypeAccess();
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//// Component Implementations: 
	// ComponentImplementation returns aadl2::ComponentImplementation:
	//	AbstractImplementation | SystemImplementation | ProcessorImplementation | ProcessImplementation |
	//	ThreadGroupImplementation | ThreadImplementation | DeviceImplementation | BusImplementation |
	//	VirtualProcessorImplementation | VirtualBusImplementation | MemoryImplementation | SubprogramImplementation |
	//	SubprogramGroupImplementation | DataImplementation;
	public Aadl2GrammarAccess.ComponentImplementationElements getComponentImplementationAccess() {
		return gaAadl2.getComponentImplementationAccess();
	}
	
	public ParserRule getComponentImplementationRule() {
		return getComponentImplementationAccess().getRule();
	}

	//Realization returns aadl2::Realization:
	//	implemented=[aadl2::ComponentType];
	public Aadl2GrammarAccess.RealizationElements getRealizationAccess() {
		return gaAadl2.getRealizationAccess();
	}
	
	public ParserRule getRealizationRule() {
		return getRealizationAccess().getRule();
	}

	//AbstractImplementation returns aadl2::AbstractImplementation:
	//	"abstract" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedSystemSubcomponent+=SystemSubcomponent | ownedSubprogramSubcomponent+=SubprogramSubcomponent |
	//	ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent | ownedThreadSubcomponent+=ThreadSubcomponent |
	//	ownedThreadGroupSubcomponent+=ThreadGroupSubcomponent | ownedProcessSubcomponent+=ProcessSubcomponent |
	//	ownedProcessorSubcomponent+=ProcessorSubcomponent | ownedVirtualProcessorSubcomponent+=VirtualProcessorSubcomponent |
	//	ownedMemorySubcomponent+=MemorySubcomponent | ownedDeviceSubcomponent+=DeviceSubcomponent |
	//	ownedBusSubcomponent+=BusSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ | noSubcomponents?="none"
	//	";"))? ("internal" "features" (ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("processor"
	//	"features" (ownedPortProxy+=PortProxy | ownedSubprogramProxy+=SubprogramProxy)+)? ("calls"
	//	(ownedSubprogramCallSequence+=SubprogramCallSequence+ | noCalls?="none" ";"))? ("connections"
	//	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection |
	//	ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection |
	//	ownedParameterConnection+=ParameterConnection)+ | noConnections?="none" ";"))? ("flows"
	//	((ownedFlowImplementation+=FlowImplementation | ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes"
	//	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.AbstractImplementationElements getAbstractImplementationAccess() {
		return gaAadl2.getAbstractImplementationAccess();
	}
	
	public ParserRule getAbstractImplementationRule() {
		return getAbstractImplementationAccess().getRule();
	}

	//SystemImplementation returns aadl2::SystemImplementation:
	//	"system" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedSystemSubcomponent+=SystemSubcomponent | ownedSubprogramSubcomponent+=SubprogramSubcomponent |
	//	ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent | ownedProcessSubcomponent+=ProcessSubcomponent |
	//	ownedProcessorSubcomponent+=ProcessorSubcomponent | ownedVirtualProcessorSubcomponent+=VirtualProcessorSubcomponent |
	//	ownedMemorySubcomponent+=MemorySubcomponent | ownedDeviceSubcomponent+=DeviceSubcomponent |
	//	ownedBusSubcomponent+=BusSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ | noSubcomponents?="none"
	//	";"))? ("internal" "features" (ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("processor"
	//	"features" (ownedPortProxy+=PortProxy | ownedSubprogramProxy+=SubprogramProxy)+)? ("connections"
	//	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection |
	//	ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection)+ |
	//	noConnections?="none" ";"))? ("flows" ((ownedFlowImplementation+=FlowImplementation |
	//	ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes" ((ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.SystemImplementationElements getSystemImplementationAccess() {
		return gaAadl2.getSystemImplementationAccess();
	}
	
	public ParserRule getSystemImplementationRule() {
		return getSystemImplementationAccess().getRule();
	}

	//ProcessImplementation returns aadl2::ProcessImplementation:
	//	"process" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedThreadGroupSubcomponent+=ThreadGroupSubcomponent | ownedThreadSubcomponent+=ThreadSubcomponent |
	//	ownedSubprogramSubcomponent+=SubprogramSubcomponent | ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ | noSubcomponents?="none"
	//	";"))? ("internal" "features" (ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("processor"
	//	"features" (ownedPortProxy+=PortProxy | ownedSubprogramProxy+=SubprogramProxy)+)? ("connections"
	//	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection |
	//	ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection)+ |
	//	noConnections?="none" ";"))? ("flows" ((ownedFlowImplementation+=FlowImplementation |
	//	ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes" ((ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.ProcessImplementationElements getProcessImplementationAccess() {
		return gaAadl2.getProcessImplementationAccess();
	}
	
	public ParserRule getProcessImplementationRule() {
		return getProcessImplementationAccess().getRule();
	}

	//ThreadGroupImplementation returns aadl2::ThreadGroupImplementation:
	//	"thread" "group" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension?
	//	("(" ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedThreadGroupSubcomponent+=ThreadGroupSubcomponent | ownedThreadSubcomponent+=ThreadSubcomponent |
	//	ownedSubprogramSubcomponent+=SubprogramSubcomponent | ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ | noSubcomponents?="none"
	//	";"))? ("internal" "features" (ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("processor"
	//	"features" (ownedPortProxy+=PortProxy | ownedSubprogramProxy+=SubprogramProxy)+)? ("connections"
	//	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection |
	//	ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection)+ |
	//	noConnections?="none" ";"))? ("flows" ((ownedFlowImplementation+=FlowImplementation |
	//	ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes" ((ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.ThreadGroupImplementationElements getThreadGroupImplementationAccess() {
		return gaAadl2.getThreadGroupImplementationAccess();
	}
	
	public ParserRule getThreadGroupImplementationRule() {
		return getThreadGroupImplementationAccess().getRule();
	}

	//ThreadImplementation returns aadl2::ThreadImplementation:
	//	"thread" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedSubprogramSubcomponent+=SubprogramSubcomponent | ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent
	//	| ownedDataSubcomponent+=DataSubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent)+ |
	//	noSubcomponents?="none" ";"))? ("internal" "features" (ownedEventSource+=EventSource |
	//	ownedEventDataSource+=EventDataSource)+)? ("processor" "features" (ownedPortProxy+=PortProxy |
	//	ownedSubprogramProxy+=SubprogramProxy)+)? ("calls" (ownedSubprogramCallSequence+=SubprogramCallSequence+ |
	//	noCalls?="none" ";"))? ("connections" ((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection
	//	| ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection |
	//	ownedParameterConnection+=ParameterConnection)+ | noConnections?="none" ";"))? ("flows"
	//	((ownedFlowImplementation+=FlowImplementation | ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes"
	//	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.ThreadImplementationElements getThreadImplementationAccess() {
		return gaAadl2.getThreadImplementationAccess();
	}
	
	public ParserRule getThreadImplementationRule() {
		return getThreadImplementationAccess().getRule();
	}

	//SubprogramImplementation returns aadl2::SubprogramImplementation:
	//	"subprogram" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension?
	//	("(" ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedSubprogramSubcomponent+=SubprogramSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent)+ | noSubcomponents?="none" ";"))? ("internal" "features"
	//	(ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("processor" "features"
	//	(ownedPortProxy+=PortProxy | ownedSubprogramProxy+=SubprogramProxy)+)? ("calls"
	//	(ownedSubprogramCallSequence+=SubprogramCallSequence+ | noCalls?="none" ";"))? ("connections"
	//	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection |
	//	ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection |
	//	ownedParameterConnection+=ParameterConnection)+ | noConnections?="none" ";"))? ("flows"
	//	((ownedFlowImplementation+=FlowImplementation | ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes"
	//	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.SubprogramImplementationElements getSubprogramImplementationAccess() {
		return gaAadl2.getSubprogramImplementationAccess();
	}
	
	public ParserRule getSubprogramImplementationRule() {
		return getSubprogramImplementationAccess().getRule();
	}

	//SubprogramGroupImplementation returns aadl2::SubprogramGroupImplementation:
	//	"subprogram" "group" "implementation" ownedRealization=Realization "." name=INAME
	//	ownedExtension=ImplementationExtension? ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes" (ownedPrototype+=Prototype+ | noPrototypes?="none"
	//	";"))? ("subcomponents" ((ownedSubprogramSubcomponent+=SubprogramSubcomponent |
	//	ownedAbstractSubcomponent+=AbstractSubcomponent | ownedSubprogramGroupSubcomponent+=SubprogramGroupSubcomponent |
	//	ownedDataSubcomponent+=DataSubcomponent)+ | noSubcomponents?="none" ";"))? ("internal" "features"
	//	(ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("processor" "features"
	//	(ownedPortProxy+=PortProxy | ownedSubprogramProxy+=SubprogramProxy)+)? ("connections"
	//	((ownedAccessConnection+=AccessConnection | ownedFeatureGroupConnection+=FeatureGroupConnection |
	//	ownedFeatureConnection+=FeatureConnection)+ | noConnections?="none" ";"))? ("modes" ((ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.SubprogramGroupImplementationElements getSubprogramGroupImplementationAccess() {
		return gaAadl2.getSubprogramGroupImplementationAccess();
	}
	
	public ParserRule getSubprogramGroupImplementationRule() {
		return getSubprogramGroupImplementationAccess().getRule();
	}

	//ProcessorImplementation returns aadl2::ProcessorImplementation:
	//	"processor" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedMemorySubcomponent+=MemorySubcomponent | ownedAbstractSubcomponent+=AbstractSubcomponent |
	//	ownedBusSubcomponent+=BusSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent |
	//	ownedVirtualProcessorSubcomponent+=VirtualProcessorSubcomponent)+ | noSubcomponents?="none" ";"))? ("internal"
	//	"features" (ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("connections"
	//	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection |
	//	ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection)+ |
	//	noConnections?="none" ";"))? ("flows" ((ownedFlowImplementation+=FlowImplementation |
	//	ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes" ((ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.ProcessorImplementationElements getProcessorImplementationAccess() {
		return gaAadl2.getProcessorImplementationAccess();
	}
	
	public ParserRule getProcessorImplementationRule() {
		return getProcessorImplementationAccess().getRule();
	}

	//VirtualProcessorImplementation returns aadl2::VirtualProcessorImplementation:
	//	"virtual" "processor" "implementation" ownedRealization=Realization "." name=INAME
	//	ownedExtension=ImplementationExtension? ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes" (ownedPrototype+=Prototype+ | noPrototypes?="none"
	//	";"))? ("subcomponents" ((ownedAbstractSubcomponent+=AbstractSubcomponent |
	//	ownedVirtualBusSubcomponent+=VirtualBusSubcomponent |
	//	ownedVirtualProcessorSubcomponent+=VirtualProcessorSubcomponent)+ | noSubcomponents?="none" ";"))? ("internal"
	//	"features" (ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("processor" "features"
	//	(ownedPortProxy+=PortProxy | ownedSubprogramProxy+=SubprogramProxy)+)? ("connections"
	//	((ownedPortConnection+=PortConnection | ownedAccessConnection+=AccessConnection |
	//	ownedFeatureGroupConnection+=FeatureGroupConnection | ownedFeatureConnection+=FeatureConnection)+ |
	//	noConnections?="none" ";"))? ("flows" ((ownedFlowImplementation+=FlowImplementation |
	//	ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes" ((ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.VirtualProcessorImplementationElements getVirtualProcessorImplementationAccess() {
		return gaAadl2.getVirtualProcessorImplementationAccess();
	}
	
	public ParserRule getVirtualProcessorImplementationRule() {
		return getVirtualProcessorImplementationAccess().getRule();
	}

	//DeviceImplementation returns aadl2::DeviceImplementation:
	//	"device" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedDataSubcomponent+=DataSubcomponent |
	//	ownedVirtualBusSubcomponent+=VirtualBusSubcomponent | ownedBusSubcomponent+=BusSubcomponent)+ |
	//	noSubcomponents?="none" ";"))? ("internal" "features" (ownedEventSource+=EventSource |
	//	ownedEventDataSource+=EventDataSource)+)? ("processor" "features" (ownedPortProxy+=PortProxy |
	//	ownedSubprogramProxy+=SubprogramProxy)+)? ("connections" ((ownedPortConnection+=PortConnection |
	//	ownedAccessConnection+=AccessConnection | ownedFeatureGroupConnection+=FeatureGroupConnection |
	//	ownedFeatureConnection+=FeatureConnection)+ | noConnections?="none" ";"))? ("flows"
	//	((ownedFlowImplementation+=FlowImplementation | ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes"
	//	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.DeviceImplementationElements getDeviceImplementationAccess() {
		return gaAadl2.getDeviceImplementationAccess();
	}
	
	public ParserRule getDeviceImplementationRule() {
		return getDeviceImplementationAccess().getRule();
	}

	//MemoryImplementation returns aadl2::MemoryImplementation:
	//	"memory" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedMemorySubcomponent+=MemorySubcomponent |
	//	ownedBusSubcomponent+=BusSubcomponent)+ | noSubcomponents?="none" ";"))? ("internal" "features"
	//	(ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("connections"
	//	((ownedAccessConnection+=AccessConnection | ownedFeatureGroupConnection+=FeatureGroupConnection |
	//	ownedFeatureConnection+=FeatureConnection)+ | noConnections?="none" ";"))? ("modes" ((ownedMode+=Mode |
	//	ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.MemoryImplementationElements getMemoryImplementationAccess() {
		return gaAadl2.getMemoryImplementationAccess();
	}
	
	public ParserRule getMemoryImplementationRule() {
		return getMemoryImplementationAccess().getRule();
	}

	//BusImplementation returns aadl2::BusImplementation:
	//	"bus" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension? ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent)+ |
	//	noSubcomponents?="none" ";"))? ("internal" "features" (ownedEventSource+=EventSource |
	//	ownedEventDataSource+=EventDataSource)+)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ |
	//	noModes?="none" ";"))? ("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none"
	//	";"))? ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.BusImplementationElements getBusImplementationAccess() {
		return gaAadl2.getBusImplementationAccess();
	}
	
	public ParserRule getBusImplementationRule() {
		return getBusImplementationAccess().getRule();
	}

	//VirtualBusImplementation returns aadl2::VirtualBusImplementation:
	//	"virtual" "bus" "implementation" ownedRealization=Realization "." name=INAME ownedExtension=ImplementationExtension?
	//	("(" ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes"
	//	(ownedPrototype+=Prototype+ | noPrototypes?="none" ";"))? ("subcomponents"
	//	((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedVirtualBusSubcomponent+=VirtualBusSubcomponent)+ |
	//	noSubcomponents?="none" ";"))? ("internal" "features" (ownedEventSource+=EventSource |
	//	ownedEventDataSource+=EventDataSource)+)? ("modes" ((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ |
	//	noModes?="none" ";"))? ("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none"
	//	";"))? ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.VirtualBusImplementationElements getVirtualBusImplementationAccess() {
		return gaAadl2.getVirtualBusImplementationAccess();
	}
	
	public ParserRule getVirtualBusImplementationRule() {
		return getVirtualBusImplementationAccess().getRule();
	}

	//DataImplementation returns aadl2::DataImplementation:
	//	{aadl2::DataImplementation} "data" "implementation" ownedRealization=Realization "." name=INAME
	//	ownedExtension=ImplementationExtension? ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")? ("prototypes" (ownedPrototype+=Prototype+ | noPrototypes?="none"
	//	";"))? ("subcomponents" ((ownedAbstractSubcomponent+=AbstractSubcomponent | ownedDataSubcomponent+=DataSubcomponent |
	//	ownedSubprogramSubcomponent+=SubprogramSubcomponent)+ | noSubcomponents?="none" ";"))? ("internal" "features"
	//	(ownedEventSource+=EventSource | ownedEventDataSource+=EventDataSource)+)? ("connections"
	//	((ownedAccessConnection+=AccessConnection | ownedFeatureGroupConnection+=FeatureGroupConnection |
	//	ownedFeatureConnection+=FeatureConnection)+ | noConnections?="none" ";"))? ("flows"
	//	((ownedFlowImplementation+=FlowImplementation | ownedEndToEndFlow+=EndToEndFlow)+ | noFlows?="none" ";"))? ("modes"
	//	((ownedMode+=Mode | ownedModeTransition+=ModeTransition)+ | noModes?="none" ";"))? ("properties"
	//	(ownedPropertyAssociation+=ContainedPropertyAssociation+ | noProperties?="none" ";"))?
	//	ownedAnnexSubclause+=AnnexSubclause* "end" FULLINAME ";";
	public Aadl2GrammarAccess.DataImplementationElements getDataImplementationAccess() {
		return gaAadl2.getDataImplementationAccess();
	}
	
	public ParserRule getDataImplementationRule() {
		return getDataImplementationAccess().getRule();
	}

	/// * subprogram calls * / SubprogramCallSequence returns aadl2::SubprogramCallSequence:
	//	name=ID ":" "{" ownedSubprogramCall+=SubprogramCall+ "}" ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")?
	//	("in" "modes" "(" (inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])*) ")")? ";";
	public Aadl2GrammarAccess.SubprogramCallSequenceElements getSubprogramCallSequenceAccess() {
		return gaAadl2.getSubprogramCallSequenceAccess();
	}
	
	public ParserRule getSubprogramCallSequenceRule() {
		return getSubprogramCallSequenceAccess().getRule();
	}

	//SubprogramCall returns aadl2::SubprogramCall:
	//	{aadl2::SubprogramCall} name=ID ":" "subprogram" (context=[aadl2::CallContext|PNAME] "."
	//	calledSubprogram=[aadl2::CalledSubprogram]
	//	// direct assignment of context does not work because the name <id>.<id> could also refer to a component implementation
	//
	//	// therefore we let the LinkingService figure out what kind of reference we have and set the context as appropriate
	//
	//	//calledSubprogram=[aadl2::CalledSubprogram|QCREF]
	// | calledSubprogram=[aadl2::CalledSubprogram|PNAME] | "processor"
	//	"." calledSubprogram=[aadl2::SubprogramProxy]) ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.SubprogramCallElements getSubprogramCallAccess() {
		return gaAadl2.getSubprogramCallAccess();
	}
	
	public ParserRule getSubprogramCallRule() {
		return getSubprogramCallAccess().getRule();
	}

	//// ******* Prototypes
	// Prototype returns aadl2::Prototype:
	//	(ComponentPrototype constrainingClassifier=[aadl2::ComponentClassifier|QCREF]? (array?="[" "]")? |
	//	FeatureGroupPrototype | FeaturePrototype) ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.PrototypeElements getPrototypeAccess() {
		return gaAadl2.getPrototypeAccess();
	}
	
	public ParserRule getPrototypeRule() {
		return getPrototypeAccess().getRule();
	}

	//ComponentPrototype returns aadl2::ComponentPrototype:
	//	AbstractPrototype | BusPrototype | DevicePrototype | MemoryPrototype | ProcessPrototype | ProcessorPrototype |
	//	SubprogramPrototype | SubprogramGroupPrototype | ThreadPrototype | ThreadGroupPrototype | VirtualBusPrototype |
	//	VirtualProcessorPrototype | SystemPrototype | DataPrototype;
	public Aadl2GrammarAccess.ComponentPrototypeElements getComponentPrototypeAccess() {
		return gaAadl2.getComponentPrototypeAccess();
	}
	
	public ParserRule getComponentPrototypeRule() {
		return getComponentPrototypeAccess().getRule();
	}

	//AbstractPrototype returns aadl2::AbstractPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "abstract";
	public Aadl2GrammarAccess.AbstractPrototypeElements getAbstractPrototypeAccess() {
		return gaAadl2.getAbstractPrototypeAccess();
	}
	
	public ParserRule getAbstractPrototypeRule() {
		return getAbstractPrototypeAccess().getRule();
	}

	//BusPrototype returns aadl2::BusPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "bus";
	public Aadl2GrammarAccess.BusPrototypeElements getBusPrototypeAccess() {
		return gaAadl2.getBusPrototypeAccess();
	}
	
	public ParserRule getBusPrototypeRule() {
		return getBusPrototypeAccess().getRule();
	}

	//DataPrototype returns aadl2::DataPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "data";
	public Aadl2GrammarAccess.DataPrototypeElements getDataPrototypeAccess() {
		return gaAadl2.getDataPrototypeAccess();
	}
	
	public ParserRule getDataPrototypeRule() {
		return getDataPrototypeAccess().getRule();
	}

	//DevicePrototype returns aadl2::DevicePrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "device";
	public Aadl2GrammarAccess.DevicePrototypeElements getDevicePrototypeAccess() {
		return gaAadl2.getDevicePrototypeAccess();
	}
	
	public ParserRule getDevicePrototypeRule() {
		return getDevicePrototypeAccess().getRule();
	}

	//MemoryPrototype returns aadl2::MemoryPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "memory";
	public Aadl2GrammarAccess.MemoryPrototypeElements getMemoryPrototypeAccess() {
		return gaAadl2.getMemoryPrototypeAccess();
	}
	
	public ParserRule getMemoryPrototypeRule() {
		return getMemoryPrototypeAccess().getRule();
	}

	//ProcessPrototype returns aadl2::ProcessPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "process";
	public Aadl2GrammarAccess.ProcessPrototypeElements getProcessPrototypeAccess() {
		return gaAadl2.getProcessPrototypeAccess();
	}
	
	public ParserRule getProcessPrototypeRule() {
		return getProcessPrototypeAccess().getRule();
	}

	//ProcessorPrototype returns aadl2::ProcessorPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "processor";
	public Aadl2GrammarAccess.ProcessorPrototypeElements getProcessorPrototypeAccess() {
		return gaAadl2.getProcessorPrototypeAccess();
	}
	
	public ParserRule getProcessorPrototypeRule() {
		return getProcessorPrototypeAccess().getRule();
	}

	//SubprogramPrototype returns aadl2::SubprogramPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "subprogram";
	public Aadl2GrammarAccess.SubprogramPrototypeElements getSubprogramPrototypeAccess() {
		return gaAadl2.getSubprogramPrototypeAccess();
	}
	
	public ParserRule getSubprogramPrototypeRule() {
		return getSubprogramPrototypeAccess().getRule();
	}

	//SubprogramGroupPrototype returns aadl2::SubprogramGroupPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "subprogram" "group";
	public Aadl2GrammarAccess.SubprogramGroupPrototypeElements getSubprogramGroupPrototypeAccess() {
		return gaAadl2.getSubprogramGroupPrototypeAccess();
	}
	
	public ParserRule getSubprogramGroupPrototypeRule() {
		return getSubprogramGroupPrototypeAccess().getRule();
	}

	//SystemPrototype returns aadl2::SystemPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "system";
	public Aadl2GrammarAccess.SystemPrototypeElements getSystemPrototypeAccess() {
		return gaAadl2.getSystemPrototypeAccess();
	}
	
	public ParserRule getSystemPrototypeRule() {
		return getSystemPrototypeAccess().getRule();
	}

	//ThreadPrototype returns aadl2::ThreadPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "thread";
	public Aadl2GrammarAccess.ThreadPrototypeElements getThreadPrototypeAccess() {
		return gaAadl2.getThreadPrototypeAccess();
	}
	
	public ParserRule getThreadPrototypeRule() {
		return getThreadPrototypeAccess().getRule();
	}

	//ThreadGroupPrototype returns aadl2::ThreadGroupPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "thread" "group";
	public Aadl2GrammarAccess.ThreadGroupPrototypeElements getThreadGroupPrototypeAccess() {
		return gaAadl2.getThreadGroupPrototypeAccess();
	}
	
	public ParserRule getThreadGroupPrototypeRule() {
		return getThreadGroupPrototypeAccess().getRule();
	}

	//VirtualBusPrototype returns aadl2::VirtualBusPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "virtual" "bus";
	public Aadl2GrammarAccess.VirtualBusPrototypeElements getVirtualBusPrototypeAccess() {
		return gaAadl2.getVirtualBusPrototypeAccess();
	}
	
	public ParserRule getVirtualBusPrototypeRule() {
		return getVirtualBusPrototypeAccess().getRule();
	}

	//VirtualProcessorPrototype returns aadl2::VirtualProcessorPrototype:
	//	(name=ID ":" | refined=[aadl2::ComponentPrototype|REFINEDNAME] ":" "refined" "to") "virtual" "processor";
	public Aadl2GrammarAccess.VirtualProcessorPrototypeElements getVirtualProcessorPrototypeAccess() {
		return gaAadl2.getVirtualProcessorPrototypeAccess();
	}
	
	public ParserRule getVirtualProcessorPrototypeRule() {
		return getVirtualProcessorPrototypeAccess().getRule();
	}

	//FeatureGroupPrototype returns aadl2::FeatureGroupPrototype:
	//	(name=ID ":" | refined=[aadl2::FeatureGroupPrototype|REFINEDNAME] ":" "refined" "to") "feature" "group"
	//	constrainingFeatureGroupType=[aadl2::FeatureGroupType|QCREF]?;
	public Aadl2GrammarAccess.FeatureGroupPrototypeElements getFeatureGroupPrototypeAccess() {
		return gaAadl2.getFeatureGroupPrototypeAccess();
	}
	
	public ParserRule getFeatureGroupPrototypeRule() {
		return getFeatureGroupPrototypeAccess().getRule();
	}

	//FeaturePrototype returns aadl2::FeaturePrototype:
	//	(name=ID ":" | refined=[aadl2::FeaturePrototype|REFINEDNAME] ":" "refined" "to") (in?="in" | out?="out")?
	//	// only in or out not inout
	// "feature" constrainingClassifier=[aadl2::ComponentClassifier|QCREF]?;
	public Aadl2GrammarAccess.FeaturePrototypeElements getFeaturePrototypeAccess() {
		return gaAadl2.getFeaturePrototypeAccess();
	}
	
	public ParserRule getFeaturePrototypeRule() {
		return getFeaturePrototypeAccess().getRule();
	}

	/// *
	// * Prototype Bindings
	// * / PrototypeBinding returns aadl2::PrototypeBinding:
	//	FeatureGroupPrototypeBinding | FeaturePrototypeBinding | ComponentPrototypeBinding;
	public Aadl2GrammarAccess.PrototypeBindingElements getPrototypeBindingAccess() {
		return gaAadl2.getPrototypeBindingAccess();
	}
	
	public ParserRule getPrototypeBindingRule() {
		return getPrototypeBindingAccess().getRule();
	}

	//FeatureGroupPrototypeBinding returns aadl2::FeatureGroupPrototypeBinding:
	//	formal=[aadl2::Prototype] "=>" "feature" "group" actual=FeatureGroupPrototypeActual;
	public Aadl2GrammarAccess.FeatureGroupPrototypeBindingElements getFeatureGroupPrototypeBindingAccess() {
		return gaAadl2.getFeatureGroupPrototypeBindingAccess();
	}
	
	public ParserRule getFeatureGroupPrototypeBindingRule() {
		return getFeatureGroupPrototypeBindingAccess().getRule();
	}

	//FeatureGroupPrototypeActual returns aadl2::FeatureGroupPrototypeActual:
	//	featureType=[aadl2::FeatureType|QCREF] ("(" binding+=PrototypeBinding ("," binding+=PrototypeBinding)* ")")?;
	public Aadl2GrammarAccess.FeatureGroupPrototypeActualElements getFeatureGroupPrototypeActualAccess() {
		return gaAadl2.getFeatureGroupPrototypeActualAccess();
	}
	
	public ParserRule getFeatureGroupPrototypeActualRule() {
		return getFeatureGroupPrototypeActualAccess().getRule();
	}

	//FeaturePrototypeBinding returns aadl2::FeaturePrototypeBinding:
	//	formal=[aadl2::Prototype] "=>" actual=(PortSpecification | AccessSpecification | FeaturePrototypeReference);
	public Aadl2GrammarAccess.FeaturePrototypeBindingElements getFeaturePrototypeBindingAccess() {
		return gaAadl2.getFeaturePrototypeBindingAccess();
	}
	
	public ParserRule getFeaturePrototypeBindingRule() {
		return getFeaturePrototypeBindingAccess().getRule();
	}

	//PortSpecification returns aadl2::PortSpecification:
	//	(in?="in" out?="out"? | out?="out") category=PortCategory "port" classifier=[aadl2::ComponentClassifier|QCREF]?;
	public Aadl2GrammarAccess.PortSpecificationElements getPortSpecificationAccess() {
		return gaAadl2.getPortSpecificationAccess();
	}
	
	public ParserRule getPortSpecificationRule() {
		return getPortSpecificationAccess().getRule();
	}

	//AccessSpecification returns aadl2::AccessSpecification:
	//	kind=AccessDirection category=AccessCategory "access" classifier=[aadl2::ComponentClassifier|QCREF]?;
	public Aadl2GrammarAccess.AccessSpecificationElements getAccessSpecificationAccess() {
		return gaAadl2.getAccessSpecificationAccess();
	}
	
	public ParserRule getAccessSpecificationRule() {
		return getAccessSpecificationAccess().getRule();
	}

	//FeaturePrototypeReference returns aadl2::FeaturePrototypeReference:
	//	(in?="in" | out?="out")? "feature" prototype=[aadl2::FeaturePrototype];
	public Aadl2GrammarAccess.FeaturePrototypeReferenceElements getFeaturePrototypeReferenceAccess() {
		return gaAadl2.getFeaturePrototypeReferenceAccess();
	}
	
	public ParserRule getFeaturePrototypeReferenceRule() {
		return getFeaturePrototypeReferenceAccess().getRule();
	}

	//ComponentPrototypeBinding returns aadl2::ComponentPrototypeBinding:
	//	formal=[aadl2::Prototype] "=>" (actual+=ComponentReference | "(" actual+=ComponentReference (","
	//	actual+=ComponentReference)* ")");
	public Aadl2GrammarAccess.ComponentPrototypeBindingElements getComponentPrototypeBindingAccess() {
		return gaAadl2.getComponentPrototypeBindingAccess();
	}
	
	public ParserRule getComponentPrototypeBindingRule() {
		return getComponentPrototypeBindingAccess().getRule();
	}

	//ComponentReference returns aadl2::ComponentPrototypeActual:
	//	category=ComponentCategory subcomponentType=[aadl2::SubcomponentType|QCREF] ("(" binding+=PrototypeBinding (","
	//	binding+=PrototypeBinding)* ")")?;
	public Aadl2GrammarAccess.ComponentReferenceElements getComponentReferenceAccess() {
		return gaAadl2.getComponentReferenceAccess();
	}
	
	public ParserRule getComponentReferenceRule() {
		return getComponentReferenceAccess().getRule();
	}

	/// *
	// * Subcomponents
	// * / AbstractSubcomponent returns aadl2::AbstractSubcomponent:
	//	(name=ID ":" | refined=[aadl2::AbstractSubcomponent|REFINEDNAME] ":" "refined" "to") "abstract"
	//	(abstractSubcomponentType=[aadl2::AbstractSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.AbstractSubcomponentElements getAbstractSubcomponentAccess() {
		return gaAadl2.getAbstractSubcomponentAccess();
	}
	
	public ParserRule getAbstractSubcomponentRule() {
		return getAbstractSubcomponentAccess().getRule();
	}

	//SystemSubcomponent returns aadl2::SystemSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "system"
	//	(systemSubcomponentType=[aadl2::SystemSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.SystemSubcomponentElements getSystemSubcomponentAccess() {
		return gaAadl2.getSystemSubcomponentAccess();
	}
	
	public ParserRule getSystemSubcomponentRule() {
		return getSystemSubcomponentAccess().getRule();
	}

	//ProcessSubcomponent returns aadl2::ProcessSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "process"
	//	(processSubcomponentType=[aadl2::ProcessSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.ProcessSubcomponentElements getProcessSubcomponentAccess() {
		return gaAadl2.getProcessSubcomponentAccess();
	}
	
	public ParserRule getProcessSubcomponentRule() {
		return getProcessSubcomponentAccess().getRule();
	}

	//ThreadGroupSubcomponent returns aadl2::ThreadGroupSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "thread" "group"
	//	(threadGroupSubcomponentType=[aadl2::ThreadGroupSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding
	//	("," ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.ThreadGroupSubcomponentElements getThreadGroupSubcomponentAccess() {
		return gaAadl2.getThreadGroupSubcomponentAccess();
	}
	
	public ParserRule getThreadGroupSubcomponentRule() {
		return getThreadGroupSubcomponentAccess().getRule();
	}

	//ThreadSubcomponent returns aadl2::ThreadSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "thread"
	//	(threadSubcomponentType=[aadl2::ThreadSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.ThreadSubcomponentElements getThreadSubcomponentAccess() {
		return gaAadl2.getThreadSubcomponentAccess();
	}
	
	public ParserRule getThreadSubcomponentRule() {
		return getThreadSubcomponentAccess().getRule();
	}

	//SubprogramSubcomponent returns aadl2::SubprogramSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "subprogram"
	//	(subprogramSubcomponentType=[aadl2::SubprogramSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding
	//	("," ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.SubprogramSubcomponentElements getSubprogramSubcomponentAccess() {
		return gaAadl2.getSubprogramSubcomponentAccess();
	}
	
	public ParserRule getSubprogramSubcomponentRule() {
		return getSubprogramSubcomponentAccess().getRule();
	}

	//SubprogramGroupSubcomponent returns aadl2::SubprogramGroupSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "subprogram" "group"
	//	(subprogramGroupSubcomponentType=[aadl2::SubprogramGroupSubcomponentType|QCREF] ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")?)?
	//	(arrayDimension+=ArrayDimension+ ("(" implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.SubprogramGroupSubcomponentElements getSubprogramGroupSubcomponentAccess() {
		return gaAadl2.getSubprogramGroupSubcomponentAccess();
	}
	
	public ParserRule getSubprogramGroupSubcomponentRule() {
		return getSubprogramGroupSubcomponentAccess().getRule();
	}

	//ProcessorSubcomponent returns aadl2::ProcessorSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "processor"
	//	(processorSubcomponentType=[aadl2::ProcessorSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.ProcessorSubcomponentElements getProcessorSubcomponentAccess() {
		return gaAadl2.getProcessorSubcomponentAccess();
	}
	
	public ParserRule getProcessorSubcomponentRule() {
		return getProcessorSubcomponentAccess().getRule();
	}

	//VirtualProcessorSubcomponent returns aadl2::VirtualProcessorSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "virtual" "processor"
	//	(virtualProcessorSubcomponentType=[aadl2::VirtualProcessorSubcomponentType|QCREF] ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")?)?
	//	(arrayDimension+=ArrayDimension+ ("(" implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.VirtualProcessorSubcomponentElements getVirtualProcessorSubcomponentAccess() {
		return gaAadl2.getVirtualProcessorSubcomponentAccess();
	}
	
	public ParserRule getVirtualProcessorSubcomponentRule() {
		return getVirtualProcessorSubcomponentAccess().getRule();
	}

	//DeviceSubcomponent returns aadl2::DeviceSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "device"
	//	(deviceSubcomponentType=[aadl2::DeviceSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.DeviceSubcomponentElements getDeviceSubcomponentAccess() {
		return gaAadl2.getDeviceSubcomponentAccess();
	}
	
	public ParserRule getDeviceSubcomponentRule() {
		return getDeviceSubcomponentAccess().getRule();
	}

	//MemorySubcomponent returns aadl2::MemorySubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "memory"
	//	(memorySubcomponentType=[aadl2::MemorySubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.MemorySubcomponentElements getMemorySubcomponentAccess() {
		return gaAadl2.getMemorySubcomponentAccess();
	}
	
	public ParserRule getMemorySubcomponentRule() {
		return getMemorySubcomponentAccess().getRule();
	}

	//BusSubcomponent returns aadl2::BusSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "bus"
	//	(busSubcomponentType=[aadl2::BusSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.BusSubcomponentElements getBusSubcomponentAccess() {
		return gaAadl2.getBusSubcomponentAccess();
	}
	
	public ParserRule getBusSubcomponentRule() {
		return getBusSubcomponentAccess().getRule();
	}

	//VirtualBusSubcomponent returns aadl2::VirtualBusSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "virtual" "bus"
	//	(virtualBusSubcomponentType=[aadl2::VirtualBusClassifier|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.VirtualBusSubcomponentElements getVirtualBusSubcomponentAccess() {
		return gaAadl2.getVirtualBusSubcomponentAccess();
	}
	
	public ParserRule getVirtualBusSubcomponentRule() {
		return getVirtualBusSubcomponentAccess().getRule();
	}

	//DataSubcomponent returns aadl2::DataSubcomponent:
	//	(name=ID ":" | refined=[aadl2::Subcomponent|REFINEDNAME] ":" "refined" "to") "data"
	//	(dataSubcomponentType=[aadl2::DataSubcomponentType|QCREF] ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? (arrayDimension+=ArrayDimension+ ("("
	//	implementationReference+=ComponentImplementationReference (","
	//	implementationReference+=ComponentImplementationReference)* ")")?)? ("{"
	//	ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ("in" "modes" "(" (ownedModeBinding+=ModeRef (","
	//	ownedModeBinding+=ModeRef)*) ")")? ";";
	public Aadl2GrammarAccess.DataSubcomponentElements getDataSubcomponentAccess() {
		return gaAadl2.getDataSubcomponentAccess();
	}
	
	public ParserRule getDataSubcomponentRule() {
		return getDataSubcomponentAccess().getRule();
	}

	//ArrayDimension returns aadl2::ArrayDimension:
	//	{aadl2::ArrayDimension} "[" size=ArraySize? "]";
	public Aadl2GrammarAccess.ArrayDimensionElements getArrayDimensionAccess() {
		return gaAadl2.getArrayDimensionAccess();
	}
	
	public ParserRule getArrayDimensionRule() {
		return getArrayDimensionAccess().getRule();
	}

	//ArraySize returns aadl2::ArraySize:
	//	size=INTVALUE | sizeProperty=[aadl2::ArraySizeProperty|QPREF];
	public Aadl2GrammarAccess.ArraySizeElements getArraySizeAccess() {
		return gaAadl2.getArraySizeAccess();
	}
	
	public ParserRule getArraySizeRule() {
		return getArraySizeAccess().getRule();
	}

	//ComponentImplementationReference returns aadl2::ComponentImplementationReference:
	//	{aadl2::ComponentImplementationReference} implementation=[aadl2::ComponentImplementation|QCREF] ("("
	//	ownedPrototypeBinding+=PrototypeBinding ("," ownedPrototypeBinding+=PrototypeBinding)* ")")?;
	public Aadl2GrammarAccess.ComponentImplementationReferenceElements getComponentImplementationReferenceAccess() {
		return gaAadl2.getComponentImplementationReferenceAccess();
	}
	
	public ParserRule getComponentImplementationReferenceRule() {
		return getComponentImplementationReferenceAccess().getRule();
	}

	//// ******** Features
	// DataPort returns aadl2::DataPort:
	//	{aadl2::DataPort} (name=ID ":" | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to") (in?="in" out?="out"? |
	//	out?="out") "data" "port" dataFeatureClassifier=[aadl2::DataSubcomponentType|QCREF]? arrayDimension+=ArrayDimension?
	//	("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.DataPortElements getDataPortAccess() {
		return gaAadl2.getDataPortAccess();
	}
	
	public ParserRule getDataPortRule() {
		return getDataPortAccess().getRule();
	}

	//EventDataPort returns aadl2::EventDataPort:
	//	{aadl2::EventDataPort} (name=ID ":" | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to") (in?="in" out?="out"?
	//	| out?="out") "event" "data" "port" dataFeatureClassifier=[aadl2::DataSubcomponentType|QCREF]?
	//	arrayDimension+=ArrayDimension? ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.EventDataPortElements getEventDataPortAccess() {
		return gaAadl2.getEventDataPortAccess();
	}
	
	public ParserRule getEventDataPortRule() {
		return getEventDataPortAccess().getRule();
	}

	//EventPort returns aadl2::EventPort:
	//	{aadl2::EventPort} (name=ID ":" | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to") (in?="in" out?="out"? |
	//	out?="out") "event" "port" arrayDimension+=ArrayDimension? ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")?
	//	";";
	public Aadl2GrammarAccess.EventPortElements getEventPortAccess() {
		return gaAadl2.getEventPortAccess();
	}
	
	public ParserRule getEventPortRule() {
		return getEventPortAccess().getRule();
	}

	//FeatureGroup returns aadl2::FeatureGroup:
	//	(name=ID ":" // default is inout if no direction
	// | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to")
	//	(in?="in" | out?="out")? "feature" "group" ((inverse?="inverse" "of")? featureType=[aadl2::FeatureType|QCREF])?
	//	arrayDimension+=ArrayDimension? ("{" ownedPropertyAssociation+=ContainedPropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.FeatureGroupElements getFeatureGroupAccess() {
		return gaAadl2.getFeatureGroupAccess();
	}
	
	public ParserRule getFeatureGroupRule() {
		return getFeatureGroupAccess().getRule();
	}

	//Parameter returns aadl2::Parameter:
	//	(name=ID ":" | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to") (in?="in" out?="out"? | out?="out")
	//	"parameter" dataFeatureClassifier=[aadl2::DataSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.ParameterElements getParameterAccess() {
		return gaAadl2.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// AccessCategory not set (is encoded in type)
	// SubprogramAccess returns aadl2::SubprogramAccess:
	//	(name=ID ":" | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to") kind=AccessDirection "subprogram" "access"
	//	subprogramFeatureClassifier=[aadl2::SubprogramSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.SubprogramAccessElements getSubprogramAccessAccess() {
		return gaAadl2.getSubprogramAccessAccess();
	}
	
	public ParserRule getSubprogramAccessRule() {
		return getSubprogramAccessAccess().getRule();
	}

	//SubprogramGroupAccess returns aadl2::SubprogramGroupAccess:
	//	(name=ID ":" | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to") kind=AccessDirection "subprogram" "group"
	//	"access" subprogramGroupFeatureClassifier=[aadl2::SubprogramGroupSubcomponentType|QCREF]?
	//	arrayDimension+=ArrayDimension? ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.SubprogramGroupAccessElements getSubprogramGroupAccessAccess() {
		return gaAadl2.getSubprogramGroupAccessAccess();
	}
	
	public ParserRule getSubprogramGroupAccessRule() {
		return getSubprogramGroupAccessAccess().getRule();
	}

	//BusAccess returns aadl2::BusAccess:
	//	(name=ID ":" | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to") kind=AccessDirection "bus" "access"
	//	busFeatureClassifier=[aadl2::BusSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.BusAccessElements getBusAccessAccess() {
		return gaAadl2.getBusAccessAccess();
	}
	
	public ParserRule getBusAccessRule() {
		return getBusAccessAccess().getRule();
	}

	//DataAccess returns aadl2::DataAccess:
	//	(name=ID ":" | refined=[aadl2::Feature|REFINEDNAME] ":" "refined" "to") kind=AccessDirection "data" "access"
	//	dataFeatureClassifier=[aadl2::DataSubcomponentType|QCREF]? arrayDimension+=ArrayDimension? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.DataAccessElements getDataAccessAccess() {
		return gaAadl2.getDataAccessAccess();
	}
	
	public ParserRule getDataAccessRule() {
		return getDataAccessAccess().getRule();
	}

	//AbstractFeature returns aadl2::AbstractFeature:
	//	(name=ID ":" // default is inout if no direction
	// | refined=[aadl2::AbstractFeature|REFINEDNAME] ":" "refined" "to")
	//	(in?="in" | out?="out")? "feature" featurePrototype=[aadl2::FeaturePrototype|QCREF]? arrayDimension+=ArrayDimension?
	//	("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.AbstractFeatureElements getAbstractFeatureAccess() {
		return gaAadl2.getAbstractFeatureAccess();
	}
	
	public ParserRule getAbstractFeatureRule() {
		return getAbstractFeatureAccess().getRule();
	}

	//PortDirection returns aadl2::DirectionType:
	//	"in" | "out" | "in" "out";
	public Aadl2GrammarAccess.PortDirectionElements getPortDirectionAccess() {
		return gaAadl2.getPortDirectionAccess();
	}
	
	public ParserRule getPortDirectionRule() {
		return getPortDirectionAccess().getRule();
	}

	//InOutDirection returns aadl2::DirectionType:
	//	"in" | "out";
	public Aadl2GrammarAccess.InOutDirectionElements getInOutDirectionAccess() {
		return gaAadl2.getInOutDirectionAccess();
	}
	
	public ParserRule getInOutDirectionRule() {
		return getInOutDirectionAccess().getRule();
	}

	//AccessDirection returns aadl2::AccessType:
	//	"requires" | "provides";
	public Aadl2GrammarAccess.AccessDirectionElements getAccessDirectionAccess() {
		return gaAadl2.getAccessDirectionAccess();
	}
	
	public ParserRule getAccessDirectionRule() {
		return getAccessDirectionAccess().getRule();
	}

	//PortCategory returns aadl2::PortCategory:
	//	"data" | "event" | "event" "data";
	public Aadl2GrammarAccess.PortCategoryElements getPortCategoryAccess() {
		return gaAadl2.getPortCategoryAccess();
	}
	
	public ParserRule getPortCategoryRule() {
		return getPortCategoryAccess().getRule();
	}

	//FeatureGroupType returns aadl2::FeatureGroupType:
	//	"feature" "group" name=ID (ownedExtension=GroupExtension ("(" ownedPrototypeBinding+=PrototypeBinding (","
	//	ownedPrototypeBinding+=PrototypeBinding)* ")")?)? ("prototypes" (noPrototypes?="none" ";" |
	//	ownedPrototype+=Prototype+))? ("features" // no none for FGT in standard 2.1 (noFeatures?='none' ';') |
	//
	//	(ownedDataPort+=DataPort | ownedEventPort+=EventPort | ownedEventDataPort+=EventDataPort |
	//	ownedFeatureGroup+=FeatureGroup | ownedDataAccess+=DataAccess | ownedBusAccess+=BusAccess |
	//	ownedSubprogramAccess+=SubprogramAccess | ownedSubprogramGroupAccess+=SubprogramGroupAccess |
	//	ownedAbstractFeature+=AbstractFeature | ownedParameter+=Parameter)+)? ("inverse" "of"
	//	inverse=[aadl2::FeatureGroupType|QCREF])? ("properties" (ownedPropertyAssociation+=ContainedPropertyAssociation+ |
	//	noProperties?="none" ";"))? ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.FeatureGroupTypeElements getFeatureGroupTypeAccess() {
		return gaAadl2.getFeatureGroupTypeAccess();
	}
	
	public ParserRule getFeatureGroupTypeRule() {
		return getFeatureGroupTypeAccess().getRule();
	}

	//// ********* internal features
	// //This rule is dead code in the grammar, but it is needed by the formatter.
	//
	//InternalFeature returns aadl2::InternalFeature:
	//	(EventSource | EventDataSource) ";";
	public Aadl2GrammarAccess.InternalFeatureElements getInternalFeatureAccess() {
		return gaAadl2.getInternalFeatureAccess();
	}
	
	public ParserRule getInternalFeatureRule() {
		return getInternalFeatureAccess().getRule();
	}

	////This rule is dead code in the grammar, but it is needed by the formatter.
	// ProcessorFeature returns
	//aadl2::ProcessorFeature:
	//	(PortProxy | SubprogramProxy) ";";
	public Aadl2GrammarAccess.ProcessorFeatureElements getProcessorFeatureAccess() {
		return gaAadl2.getProcessorFeatureAccess();
	}
	
	public ParserRule getProcessorFeatureRule() {
		return getProcessorFeatureAccess().getRule();
	}

	//EventSource returns aadl2::EventSource:
	//	name=ID ":" "event" ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.EventSourceElements getEventSourceAccess() {
		return gaAadl2.getEventSourceAccess();
	}
	
	public ParserRule getEventSourceRule() {
		return getEventSourceAccess().getRule();
	}

	//EventDataSource returns aadl2::EventDataSource:
	//	name=ID ":" "event" "data" dataClassifier=[aadl2::DataClassifier|QCREF]? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.EventDataSourceElements getEventDataSourceAccess() {
		return gaAadl2.getEventDataSourceAccess();
	}
	
	public ParserRule getEventDataSourceRule() {
		return getEventDataSourceAccess().getRule();
	}

	//PortProxy returns aadl2::PortProxy:
	//	name=ID ":" "port" dataClassifier=[aadl2::DataClassifier|QCREF]? ("{" ownedPropertyAssociation+=PropertyAssociation+
	//	"}")? ";";
	public Aadl2GrammarAccess.PortProxyElements getPortProxyAccess() {
		return gaAadl2.getPortProxyAccess();
	}
	
	public ParserRule getPortProxyRule() {
		return getPortProxyAccess().getRule();
	}

	//SubprogramProxy returns aadl2::SubprogramProxy:
	//	name=ID ":" "subprogram" subprogramClassifier=[aadl2::SubprogramClassifier|QCREF]? ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.SubprogramProxyElements getSubprogramProxyAccess() {
		return gaAadl2.getSubprogramProxyAccess();
	}
	
	public ParserRule getSubprogramProxyRule() {
		return getSubprogramProxyAccess().getRule();
	}

	//// ********* connections 
	// ConnectedElement returns aadl2::ConnectedElement:
	//	(context=[aadl2::Context] ".")? connectionEnd=[aadl2::ConnectionEnd];
	public Aadl2GrammarAccess.ConnectedElementElements getConnectedElementAccess() {
		return gaAadl2.getConnectedElementAccess();
	}
	
	public ParserRule getConnectedElementRule() {
		return getConnectedElementAccess().getRule();
	}

	//ProcessorPort returns aadl2::ConnectedElement:
	//	"processor" "." connectionEnd=[aadl2::PortProxy];
	public Aadl2GrammarAccess.ProcessorPortElements getProcessorPortAccess() {
		return gaAadl2.getProcessorPortAccess();
	}
	
	public ParserRule getProcessorPortRule() {
		return getProcessorPortAccess().getRule();
	}

	//ProcessorSubprogram returns aadl2::ConnectedElement:
	//	"processor" "." connectionEnd=[aadl2::SubprogramProxy];
	public Aadl2GrammarAccess.ProcessorSubprogramElements getProcessorSubprogramAccess() {
		return gaAadl2.getProcessorSubprogramAccess();
	}
	
	public ParserRule getProcessorSubprogramRule() {
		return getProcessorSubprogramAccess().getRule();
	}

	//InternalEvent returns aadl2::ConnectedElement:
	//	"self" "." connectionEnd=[aadl2::InternalFeature];
	public Aadl2GrammarAccess.InternalEventElements getInternalEventAccess() {
		return gaAadl2.getInternalEventAccess();
	}
	
	public ParserRule getInternalEventRule() {
		return getInternalEventAccess().getRule();
	}

	//AbstractConnectionEnd returns aadl2::ConnectedElement:
	//	ConnectedElement | ProcessorPort | InternalEvent;
	public Aadl2GrammarAccess.AbstractConnectionEndElements getAbstractConnectionEndAccess() {
		return gaAadl2.getAbstractConnectionEndAccess();
	}
	
	public ParserRule getAbstractConnectionEndRule() {
		return getAbstractConnectionEndAccess().getRule();
	}

	//ProcessorConnectionEnd returns aadl2::ConnectedElement:
	//	ConnectedElement | ProcessorPort;
	public Aadl2GrammarAccess.ProcessorConnectionEndElements getProcessorConnectionEndAccess() {
		return gaAadl2.getProcessorConnectionEndAccess();
	}
	
	public ParserRule getProcessorConnectionEndRule() {
		return getProcessorConnectionEndAccess().getRule();
	}

	//AccessConnectionEnd returns aadl2::ConnectedElement:
	//	ConnectedElement | ProcessorSubprogram;
	public Aadl2GrammarAccess.AccessConnectionEndElements getAccessConnectionEndAccess() {
		return gaAadl2.getAccessConnectionEndAccess();
	}
	
	public ParserRule getAccessConnectionEndRule() {
		return getAccessConnectionEndAccess().getRule();
	}

	//PortConnection returns aadl2::PortConnection:
	//	(name=ID ":" "port" source=AbstractConnectionEnd ("->" | bidirectional?="<->") destination=ProcessorConnectionEnd |
	//	refined=[aadl2::PortConnection|REFINEDNAME] ":" "refined" "to" "port") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.PortConnectionElements getPortConnectionAccess() {
		return gaAadl2.getPortConnectionAccess();
	}
	
	public ParserRule getPortConnectionRule() {
		return getPortConnectionAccess().getRule();
	}

	//AccessConnection returns aadl2::AccessConnection:
	//	(name=ID ":" accessCategory=AccessCategory "access" source=AccessConnectionEnd ("->" | bidirectional?="<->")
	//	destination=AccessConnectionEnd | refined=[aadl2::AccessConnection|REFINEDNAME] ":" "refined" "to"
	//	accessCategory=AccessCategory "access") ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "("
	//	(inModeOrTransition+=[aadl2::ModeFeature] ("," inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.AccessConnectionElements getAccessConnectionAccess() {
		return gaAadl2.getAccessConnectionAccess();
	}
	
	public ParserRule getAccessConnectionRule() {
		return getAccessConnectionAccess().getRule();
	}

	//FeatureGroupConnection returns aadl2::FeatureGroupConnection:
	//	(name=ID ":" "feature" "group" source=ConnectedElement ("->" | bidirectional?="<->") destination=ConnectedElement |
	//	refined=[aadl2::FeatureGroupConnection|REFINEDNAME] ":" "refined" "to" "feature" "group") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.FeatureGroupConnectionElements getFeatureGroupConnectionAccess() {
		return gaAadl2.getFeatureGroupConnectionAccess();
	}
	
	public ParserRule getFeatureGroupConnectionRule() {
		return getFeatureGroupConnectionAccess().getRule();
	}

	//FeatureConnection returns aadl2::FeatureConnection:
	//	(name=ID ":" "feature" source=ConnectedElement ("->" | bidirectional?="<->") destination=ConnectedElement |
	//	refined=[aadl2::FeatureConnection|REFINEDNAME] ":" "refined" "to" "feature") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.FeatureConnectionElements getFeatureConnectionAccess() {
		return gaAadl2.getFeatureConnectionAccess();
	}
	
	public ParserRule getFeatureConnectionRule() {
		return getFeatureConnectionAccess().getRule();
	}

	//ParameterConnection returns aadl2::ParameterConnection:
	//	(name=ID ":" "parameter" source=ConnectedElement "->" destination=ConnectedElement |
	//	refined=[aadl2::ParameterConnection|REFINEDNAME] ":" "refined" "to" "parameter") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" (inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])*) ")")? ";";
	public Aadl2GrammarAccess.ParameterConnectionElements getParameterConnectionAccess() {
		return gaAadl2.getParameterConnectionAccess();
	}
	
	public ParserRule getParameterConnectionRule() {
		return getParameterConnectionAccess().getRule();
	}

	//AccessCategory returns aadl2::AccessCategory:
	//	"bus" | "data" | "subprogram" | "subprogram" "group";
	public Aadl2GrammarAccess.AccessCategoryElements getAccessCategoryAccess() {
		return gaAadl2.getAccessCategoryAccess();
	}
	
	public ParserRule getAccessCategoryRule() {
		return getAccessCategoryAccess().getRule();
	}

	//// ******** Flows 
	// enum FlowKind returns aadl2::FlowKind:
	//	source | path | sink;
	public Aadl2GrammarAccess.FlowKindElements getFlowKindAccess() {
		return gaAadl2.getFlowKindAccess();
	}
	
	public EnumRule getFlowKindRule() {
		return getFlowKindAccess().getRule();
	}

	//FlowSource returns aadl2::FlowKind:
	//	"source";
	public Aadl2GrammarAccess.FlowSourceElements getFlowSourceAccess() {
		return gaAadl2.getFlowSourceAccess();
	}
	
	public ParserRule getFlowSourceRule() {
		return getFlowSourceAccess().getRule();
	}

	//FlowSink returns aadl2::FlowKind:
	//	"sink";
	public Aadl2GrammarAccess.FlowSinkElements getFlowSinkAccess() {
		return gaAadl2.getFlowSinkAccess();
	}
	
	public ParserRule getFlowSinkRule() {
		return getFlowSinkAccess().getRule();
	}

	//FlowPath returns aadl2::FlowKind:
	//	"path";
	public Aadl2GrammarAccess.FlowPathElements getFlowPathAccess() {
		return gaAadl2.getFlowPathAccess();
	}
	
	public ParserRule getFlowPathRule() {
		return getFlowPathAccess().getRule();
	}

	//FlowSpecification returns aadl2::FlowSpecification:
	//	(FlowSourceSpec | FlowSinkSpec | FlowPathSpec | FlowSpecRefinement) ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])* ")")? ";";
	public Aadl2GrammarAccess.FlowSpecificationElements getFlowSpecificationAccess() {
		return gaAadl2.getFlowSpecificationAccess();
	}
	
	public ParserRule getFlowSpecificationRule() {
		return getFlowSpecificationAccess().getRule();
	}

	//FlowSourceSpec returns aadl2::FlowSpecification:
	//	name=ID ":" "flow" kind=FlowSource outEnd=FlowEnd;
	public Aadl2GrammarAccess.FlowSourceSpecElements getFlowSourceSpecAccess() {
		return gaAadl2.getFlowSourceSpecAccess();
	}
	
	public ParserRule getFlowSourceSpecRule() {
		return getFlowSourceSpecAccess().getRule();
	}

	//FlowSinkSpec returns aadl2::FlowSpecification:
	//	name=ID ":" "flow" kind=FlowSink InEnd=FlowEnd;
	public Aadl2GrammarAccess.FlowSinkSpecElements getFlowSinkSpecAccess() {
		return gaAadl2.getFlowSinkSpecAccess();
	}
	
	public ParserRule getFlowSinkSpecRule() {
		return getFlowSinkSpecAccess().getRule();
	}

	//FlowPathSpec returns aadl2::FlowSpecification:
	//	name=ID ":" "flow" kind=FlowPath InEnd=FlowEnd "->" outEnd=FlowEnd;
	public Aadl2GrammarAccess.FlowPathSpecElements getFlowPathSpecAccess() {
		return gaAadl2.getFlowPathSpecAccess();
	}
	
	public ParserRule getFlowPathSpecRule() {
		return getFlowPathSpecAccess().getRule();
	}

	//FlowEnd returns aadl2::FlowEnd:
	//	(context=[aadl2::Context] ".")? feature=[aadl2::Feature];
	public Aadl2GrammarAccess.FlowEndElements getFlowEndAccess() {
		return gaAadl2.getFlowEndAccess();
	}
	
	public ParserRule getFlowEndRule() {
		return getFlowEndAccess().getRule();
	}

	//FlowSpecRefinement returns aadl2::FlowSpecification:
	//	refined=[aadl2::FlowSpecification|REFINEDNAME] ":" "refined" "to" "flow" kind=FlowKind;
	public Aadl2GrammarAccess.FlowSpecRefinementElements getFlowSpecRefinementAccess() {
		return gaAadl2.getFlowSpecRefinementAccess();
	}
	
	public ParserRule getFlowSpecRefinementRule() {
		return getFlowSpecRefinementAccess().getRule();
	}

	//FlowImplementation returns aadl2::FlowImplementation:
	//	(FlowSourceImpl | FlowSinkImpl | FlowPathImpl) ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in"
	//	"modes" "(" inModeOrTransition+=[aadl2::ModeFeature] ("," inModeOrTransition+=[aadl2::ModeFeature])* ")")? ";";
	public Aadl2GrammarAccess.FlowImplementationElements getFlowImplementationAccess() {
		return gaAadl2.getFlowImplementationAccess();
	}
	
	public ParserRule getFlowImplementationRule() {
		return getFlowImplementationAccess().getRule();
	}

	//FlowSourceImpl returns aadl2::FlowImplementation:
	//	specification=[aadl2::FlowSpecification] ":" "flow" kind=FlowSource (ownedFlowSegment+=SubcomponentFlow "->"
	//	ownedFlowSegment+=ConnectionFlow "->")* FLOWOUT;
	public Aadl2GrammarAccess.FlowSourceImplElements getFlowSourceImplAccess() {
		return gaAadl2.getFlowSourceImplAccess();
	}
	
	public ParserRule getFlowSourceImplRule() {
		return getFlowSourceImplAccess().getRule();
	}

	//FlowSinkImpl returns aadl2::FlowImplementation:
	//	specification= //name=ID 
	// [aadl2::FlowSpecification] ":" "flow" kind=FlowSink FLOWIN ("->"
	//	ownedFlowSegment+=ConnectionFlow "->" ownedFlowSegment+=SubcomponentFlow)*;
	public Aadl2GrammarAccess.FlowSinkImplElements getFlowSinkImplAccess() {
		return gaAadl2.getFlowSinkImplAccess();
	}
	
	public ParserRule getFlowSinkImplRule() {
		return getFlowSinkImplAccess().getRule();
	}

	//FlowPathImpl returns aadl2::FlowImplementation:
	//	specification= //name=ID 
	// [aadl2::FlowSpecification] ":" "flow" kind=FlowPath FLOWIN (("->"
	//	ownedFlowSegment+=ConnectionFlow "->" ownedFlowSegment+=SubcomponentFlow)* "->" ownedFlowSegment+=ConnectionFlow)?
	//	"->" FLOWOUT;
	public Aadl2GrammarAccess.FlowPathImplElements getFlowPathImplAccess() {
		return gaAadl2.getFlowPathImplAccess();
	}
	
	public ParserRule getFlowPathImplRule() {
		return getFlowPathImplAccess().getRule();
	}

	//EndToEndFlow returns aadl2::EndToEndFlow:
	//	(name=ID ":" "end" "to" "end" "flow" ownedEndToEndFlowSegment+=ETESubcomponentFlow ("->"
	//	ownedEndToEndFlowSegment+=ETEConnectionFlow "->" ownedEndToEndFlowSegment+=ETESubcomponentFlow)+ |
	//	refined=[aadl2::EndToEndFlow|REFINEDNAME] ":" "refined" "to" "end" "to" "end" "flow") ("{"
	//	ownedPropertyAssociation+=PropertyAssociation+ "}")? ("in" "modes" "(" inModeOrTransition+=[aadl2::ModeFeature] (","
	//	inModeOrTransition+=[aadl2::ModeFeature])* ")")? ";";
	public Aadl2GrammarAccess.EndToEndFlowElements getEndToEndFlowAccess() {
		return gaAadl2.getEndToEndFlowAccess();
	}
	
	public ParserRule getEndToEndFlowRule() {
		return getEndToEndFlowAccess().getRule();
	}

	//// refinement should have at elast one of property or in modes. We perform a validation check    
	// SubcomponentFlow
	//returns aadl2::FlowSegment:
	//	(context=[aadl2::Subcomponent] ".")? flowElement=[aadl2::FlowElement];
	public Aadl2GrammarAccess.SubcomponentFlowElements getSubcomponentFlowAccess() {
		return gaAadl2.getSubcomponentFlowAccess();
	}
	
	public ParserRule getSubcomponentFlowRule() {
		return getSubcomponentFlowAccess().getRule();
	}

	//ConnectionFlow returns aadl2::FlowSegment:
	//	flowElement=[aadl2::Connection];
	public Aadl2GrammarAccess.ConnectionFlowElements getConnectionFlowAccess() {
		return gaAadl2.getConnectionFlowAccess();
	}
	
	public ParserRule getConnectionFlowRule() {
		return getConnectionFlowAccess().getRule();
	}

	//ETESubcomponentFlow returns aadl2::EndToEndFlowSegment:
	//	(context=[aadl2::Subcomponent] ".")? flowElement=[aadl2::EndToEndFlowElement];
	public Aadl2GrammarAccess.ETESubcomponentFlowElements getETESubcomponentFlowAccess() {
		return gaAadl2.getETESubcomponentFlowAccess();
	}
	
	public ParserRule getETESubcomponentFlowRule() {
		return getETESubcomponentFlowAccess().getRule();
	}

	//ETEConnectionFlow returns aadl2::EndToEndFlowSegment:
	//	flowElement=[aadl2::Connection];
	public Aadl2GrammarAccess.ETEConnectionFlowElements getETEConnectionFlowAccess() {
		return gaAadl2.getETEConnectionFlowAccess();
	}
	
	public ParserRule getETEConnectionFlowRule() {
		return getETEConnectionFlowAccess().getRule();
	}

	//// Modes 
	// Mode returns aadl2::Mode:
	//	name=ID ":" initial?="initial"? "mode" ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.ModeElements getModeAccess() {
		return gaAadl2.getModeAccess();
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}

	//ModeTransition returns aadl2::ModeTransition:
	//	(name=ID ":")? source=[aadl2::Mode] "-[" ownedTrigger+=Trigger ("," ownedTrigger+=Trigger)* "]->"
	//	destination=[aadl2::Mode] ("{" ownedPropertyAssociation+=PropertyAssociation+ "}")? ";";
	public Aadl2GrammarAccess.ModeTransitionElements getModeTransitionAccess() {
		return gaAadl2.getModeTransitionAccess();
	}
	
	public ParserRule getModeTransitionRule() {
		return getModeTransitionAccess().getRule();
	}

	//Trigger returns aadl2::ModeTransitionTrigger:
	//	(context=[aadl2::Context] ".")? triggerPort=[aadl2::Port] | "self" "." triggerPort=[aadl2::InternalFeature] |
	//	"processor" "." triggerPort=[aadl2::PortProxy];
	public Aadl2GrammarAccess.TriggerElements getTriggerAccess() {
		return gaAadl2.getTriggerAccess();
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//// used where component_in_modes is shown in standard grammar
	// ModeRef returns aadl2::ModeBinding:
	//	parentMode=[aadl2::Mode] ("=>" derivedMode=[aadl2::Mode])?;
	public Aadl2GrammarAccess.ModeRefElements getModeRefAccess() {
		return gaAadl2.getModeRefAccess();
	}
	
	public ParserRule getModeRefRule() {
		return getModeRefAccess().getRule();
	}

	//DefaultAnnexLibrary returns aadl2::DefaultAnnexLibrary:
	//	"annex" name=ID sourceText=ANNEXTEXT ";";
	public Aadl2GrammarAccess.DefaultAnnexLibraryElements getDefaultAnnexLibraryAccess() {
		return gaAadl2.getDefaultAnnexLibraryAccess();
	}
	
	public ParserRule getDefaultAnnexLibraryRule() {
		return getDefaultAnnexLibraryAccess().getRule();
	}

	//DefaultAnnexSubclause returns aadl2::DefaultAnnexSubclause:
	//	"annex" name=ID sourceText=ANNEXTEXT ("in" "modes" "(" (inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])*) ")")?
	//	";";
	public Aadl2GrammarAccess.DefaultAnnexSubclauseElements getDefaultAnnexSubclauseAccess() {
		return gaAadl2.getDefaultAnnexSubclauseAccess();
	}
	
	public ParserRule getDefaultAnnexSubclauseRule() {
		return getDefaultAnnexSubclauseAccess().getRule();
	}

	//// **************
	// // Properties
	// PropertySet returns aadl2::PropertySet:
	//	"property" "set" name=ID "is" ("with" importedUnit+=[aadl2::PropertySet] ("," importedUnit+=[aadl2::PropertySet])*
	//	";")* (ownedPropertyType+=PropertyType | ownedProperty+=PropertyDefinition |
	//	ownedPropertyConstant+=PropertyConstant)* ownedAnnexSubclause+=AnnexSubclause* "end" ID ";";
	public Aadl2GrammarAccess.PropertySetElements getPropertySetAccess() {
		return gaAadl2.getPropertySetAccess();
	}
	
	public ParserRule getPropertySetRule() {
		return getPropertySetAccess().getRule();
	}

	//PropertyType returns aadl2::PropertyType:
	//	(BooleanType | StringType | EnumerationType | UnitsType | RealType | IntegerType | RangeType | ClassifierType |
	//	ReferenceType | RecordType) ";";
	public Aadl2GrammarAccess.PropertyTypeElements getPropertyTypeAccess() {
		return gaAadl2.getPropertyTypeAccess();
	}
	
	public ParserRule getPropertyTypeRule() {
		return getPropertyTypeAccess().getRule();
	}

	//UnnamedPropertyType returns aadl2::PropertyType:
	//	ListType | UnnamedBooleanType | UnnamedStringType | UnnamedEnumerationType | UnnamedUnitsType | UnnamedRealType |
	//	UnnamedIntegerType | UnnamedRangeType | UnnamedClassifierType | UnnamedReferenceType | UnnamedRecordType;
	public Aadl2GrammarAccess.UnnamedPropertyTypeElements getUnnamedPropertyTypeAccess() {
		return gaAadl2.getUnnamedPropertyTypeAccess();
	}
	
	public ParserRule getUnnamedPropertyTypeRule() {
		return getUnnamedPropertyTypeAccess().getRule();
	}

	//BooleanType returns aadl2::AadlBoolean:
	//	name=ID ":" "type" "aadlboolean";
	public Aadl2GrammarAccess.BooleanTypeElements getBooleanTypeAccess() {
		return gaAadl2.getBooleanTypeAccess();
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//UnnamedBooleanType returns aadl2::AadlBoolean:
	//	{aadl2::AadlBoolean} "aadlboolean";
	public Aadl2GrammarAccess.UnnamedBooleanTypeElements getUnnamedBooleanTypeAccess() {
		return gaAadl2.getUnnamedBooleanTypeAccess();
	}
	
	public ParserRule getUnnamedBooleanTypeRule() {
		return getUnnamedBooleanTypeAccess().getRule();
	}

	//StringType returns aadl2::AadlString:
	//	name=ID ":" "type" "aadlstring";
	public Aadl2GrammarAccess.StringTypeElements getStringTypeAccess() {
		return gaAadl2.getStringTypeAccess();
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//UnnamedStringType returns aadl2::AadlString:
	//	{aadl2::AadlString} "aadlstring";
	public Aadl2GrammarAccess.UnnamedStringTypeElements getUnnamedStringTypeAccess() {
		return gaAadl2.getUnnamedStringTypeAccess();
	}
	
	public ParserRule getUnnamedStringTypeRule() {
		return getUnnamedStringTypeAccess().getRule();
	}

	//EnumerationType returns aadl2::EnumerationType:
	//	name=ID ":" "type" "enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
	public Aadl2GrammarAccess.EnumerationTypeElements getEnumerationTypeAccess() {
		return gaAadl2.getEnumerationTypeAccess();
	}
	
	public ParserRule getEnumerationTypeRule() {
		return getEnumerationTypeAccess().getRule();
	}

	//UnnamedEnumerationType returns aadl2::EnumerationType:
	//	"enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
	public Aadl2GrammarAccess.UnnamedEnumerationTypeElements getUnnamedEnumerationTypeAccess() {
		return gaAadl2.getUnnamedEnumerationTypeAccess();
	}
	
	public ParserRule getUnnamedEnumerationTypeRule() {
		return getUnnamedEnumerationTypeAccess().getRule();
	}

	//EnumerationLiteral returns aadl2::EnumerationLiteral:
	//	name=ID;
	public Aadl2GrammarAccess.EnumerationLiteralElements getEnumerationLiteralAccess() {
		return gaAadl2.getEnumerationLiteralAccess();
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	//UnitsType returns aadl2::UnitsType:
	//	name=ID ":" "type" "units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
	public Aadl2GrammarAccess.UnitsTypeElements getUnitsTypeAccess() {
		return gaAadl2.getUnitsTypeAccess();
	}
	
	public ParserRule getUnitsTypeRule() {
		return getUnitsTypeAccess().getRule();
	}

	//UnnamedUnitsType returns aadl2::UnitsType:
	//	"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
	public Aadl2GrammarAccess.UnnamedUnitsTypeElements getUnnamedUnitsTypeAccess() {
		return gaAadl2.getUnnamedUnitsTypeAccess();
	}
	
	public ParserRule getUnnamedUnitsTypeRule() {
		return getUnnamedUnitsTypeAccess().getRule();
	}

	//UnitLiteral returns aadl2::UnitLiteral:
	//	name=ID;
	public Aadl2GrammarAccess.UnitLiteralElements getUnitLiteralAccess() {
		return gaAadl2.getUnitLiteralAccess();
	}
	
	public ParserRule getUnitLiteralRule() {
		return getUnitLiteralAccess().getRule();
	}

	//UnitLiteralConversion returns aadl2::UnitLiteral:
	//	name=ID "=>" baseUnit=[aadl2::UnitLiteral] STAR factor=NumberValue;
	public Aadl2GrammarAccess.UnitLiteralConversionElements getUnitLiteralConversionAccess() {
		return gaAadl2.getUnitLiteralConversionAccess();
	}
	
	public ParserRule getUnitLiteralConversionRule() {
		return getUnitLiteralConversionAccess().getRule();
	}

	//RealType returns aadl2::AadlReal:
	//	name=ID ":" "type" "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public Aadl2GrammarAccess.RealTypeElements getRealTypeAccess() {
		return gaAadl2.getRealTypeAccess();
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}

	//UnnamedRealType returns aadl2::AadlReal:
	//	{aadl2::AadlReal} "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public Aadl2GrammarAccess.UnnamedRealTypeElements getUnnamedRealTypeAccess() {
		return gaAadl2.getUnnamedRealTypeAccess();
	}
	
	public ParserRule getUnnamedRealTypeRule() {
		return getUnnamedRealTypeAccess().getRule();
	}

	//IntegerType returns aadl2::AadlInteger:
	//	name=ID ":" "type" "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public Aadl2GrammarAccess.IntegerTypeElements getIntegerTypeAccess() {
		return gaAadl2.getIntegerTypeAccess();
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//UnnamedIntegerType returns aadl2::AadlInteger:
	//	{aadl2::AadlInteger} "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public Aadl2GrammarAccess.UnnamedIntegerTypeElements getUnnamedIntegerTypeAccess() {
		return gaAadl2.getUnnamedIntegerTypeAccess();
	}
	
	public ParserRule getUnnamedIntegerTypeRule() {
		return getUnnamedIntegerTypeAccess().getRule();
	}

	//RangeType returns aadl2::RangeType:
	//	name=ID ":" "type" "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
	//	numberType=[aadl2::NumberType|QPREF]);
	public Aadl2GrammarAccess.RangeTypeElements getRangeTypeAccess() {
		return gaAadl2.getRangeTypeAccess();
	}
	
	public ParserRule getRangeTypeRule() {
		return getRangeTypeAccess().getRule();
	}

	//UnnamedRangeType returns aadl2::RangeType:
	//	{aadl2::RangeType} "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
	//	numberType=[aadl2::NumberType|QPREF]);
	public Aadl2GrammarAccess.UnnamedRangeTypeElements getUnnamedRangeTypeAccess() {
		return gaAadl2.getUnnamedRangeTypeAccess();
	}
	
	public ParserRule getUnnamedRangeTypeRule() {
		return getUnnamedRangeTypeAccess().getRule();
	}

	//ClassifierType returns aadl2::ClassifierType:
	//	name=ID ":" "type" "classifier" ("(" classifierReference+=QMReference ("," classifierReference+=QMReference)* ")")?;
	public Aadl2GrammarAccess.ClassifierTypeElements getClassifierTypeAccess() {
		return gaAadl2.getClassifierTypeAccess();
	}
	
	public ParserRule getClassifierTypeRule() {
		return getClassifierTypeAccess().getRule();
	}

	//UnnamedClassifierType returns aadl2::ClassifierType:
	//	{aadl2::ClassifierType} "classifier" ("(" classifierReference+=QMReference ("," classifierReference+=QMReference)*
	//	")")?;
	public Aadl2GrammarAccess.UnnamedClassifierTypeElements getUnnamedClassifierTypeAccess() {
		return gaAadl2.getUnnamedClassifierTypeAccess();
	}
	
	public ParserRule getUnnamedClassifierTypeRule() {
		return getUnnamedClassifierTypeAccess().getRule();
	}

	//QMReference returns aadl2::MetaclassReference:
	//	("{" annexName=ID "}" STAR STAR)? metaclassName+=(CoreKeyWord | ID)+;
	public Aadl2GrammarAccess.QMReferenceElements getQMReferenceAccess() {
		return gaAadl2.getQMReferenceAccess();
	}
	
	public ParserRule getQMReferenceRule() {
		return getQMReferenceAccess().getRule();
	}

	//QCReference returns aadl2::ClassifierValue:
	//	classifier=[aadl2::ComponentClassifier|FQCREF];
	public Aadl2GrammarAccess.QCReferenceElements getQCReferenceAccess() {
		return gaAadl2.getQCReferenceAccess();
	}
	
	public ParserRule getQCReferenceRule() {
		return getQCReferenceAccess().getRule();
	}

	//ReferenceType returns aadl2::ReferenceType:
	//	name=ID ":" "type" "reference" ("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)*
	//	")")?;
	public Aadl2GrammarAccess.ReferenceTypeElements getReferenceTypeAccess() {
		return gaAadl2.getReferenceTypeAccess();
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}

	//UnnamedReferenceType returns aadl2::ReferenceType:
	//	"reference" {aadl2::ReferenceType} ("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)*
	//	")")?;
	public Aadl2GrammarAccess.UnnamedReferenceTypeElements getUnnamedReferenceTypeAccess() {
		return gaAadl2.getUnnamedReferenceTypeAccess();
	}
	
	public ParserRule getUnnamedReferenceTypeRule() {
		return getUnnamedReferenceTypeAccess().getRule();
	}

	//RecordType returns aadl2::RecordType:
	//	name=ID ":" "type" "record" "(" ownedField+=RecordField+ ")";
	public Aadl2GrammarAccess.RecordTypeElements getRecordTypeAccess() {
		return gaAadl2.getRecordTypeAccess();
	}
	
	public ParserRule getRecordTypeRule() {
		return getRecordTypeAccess().getRule();
	}

	//UnnamedRecordType returns aadl2::RecordType:
	//	"record" "(" ownedField+=RecordField+ ")";
	public Aadl2GrammarAccess.UnnamedRecordTypeElements getUnnamedRecordTypeAccess() {
		return gaAadl2.getUnnamedRecordTypeAccess();
	}
	
	public ParserRule getUnnamedRecordTypeRule() {
		return getUnnamedRecordTypeAccess().getRule();
	}

	//RecordField returns aadl2::BasicProperty:
	//	name=ID ":" (referencedPropertyType=[aadl2::PropertyType|QPREF]
	//	//	('list' 'of')* is handled as part of UnnamedPropertytype
	// | ownedPropertyType=UnnamedPropertyType) ";";
	public Aadl2GrammarAccess.RecordFieldElements getRecordFieldAccess() {
		return gaAadl2.getRecordFieldAccess();
	}
	
	public ParserRule getRecordFieldRule() {
		return getRecordFieldAccess().getRule();
	}

	////&&&&& Property Definition
	// PropertyDefinition returns aadl2::Property:
	//	name=ID ":" inherit?="inherit"? (referencedPropertyType=[aadl2::PropertyType|QPREF]
	//	//	('list' 'of')* is handled as part of UnnamedPropertytype
	// | ownedPropertyType=UnnamedPropertyType) ("=>"
	//	defaultValue=PropertyExpression)? "applies" "to" "(" (appliesTo+=PropertyOwner ("," appliesTo+=PropertyOwner)* |
	//	appliesTo+=AllReference) ")" ";";
	public Aadl2GrammarAccess.PropertyDefinitionElements getPropertyDefinitionAccess() {
		return gaAadl2.getPropertyDefinitionAccess();
	}
	
	public ParserRule getPropertyDefinitionRule() {
		return getPropertyDefinitionAccess().getRule();
	}

	//AllReference returns aadl2::MetaclassReference:
	//	metaclassName+= // &&&&& actually set it to NamedElement using ALL rule returning "named element" as string
	// "all";
	public Aadl2GrammarAccess.AllReferenceElements getAllReferenceAccess() {
		return gaAadl2.getAllReferenceAccess();
	}
	
	public ParserRule getAllReferenceRule() {
		return getAllReferenceAccess().getRule();
	}

	//ListType returns aadl2::ListType:
	//	"list" "of" (referencedElementType=[aadl2::PropertyType|QPREF] | ownedElementType=UnnamedPropertyType);
	public Aadl2GrammarAccess.ListTypeElements getListTypeAccess() {
		return gaAadl2.getListTypeAccess();
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}

	//PropertyOwner returns aadl2::PropertyOwner: // classifier value is always qualified by a package name
	// QMReference |
	//	QCReference;
	public Aadl2GrammarAccess.PropertyOwnerElements getPropertyOwnerAccess() {
		return gaAadl2.getPropertyOwnerAccess();
	}
	
	public ParserRule getPropertyOwnerRule() {
		return getPropertyOwnerAccess().getRule();
	}

	//PropertyConstant returns aadl2::PropertyConstant:
	//	name=ID ":" "constant" (referencedPropertyType=[aadl2::PropertyType|QPREF]
	//	//	('list' 'of')* is handled as part of UnnamedPropertytype
	// | ownedPropertyType=UnnamedPropertyType) "=>"
	//	constantValue=ConstantPropertyExpression ";";
	public Aadl2GrammarAccess.PropertyConstantElements getPropertyConstantAccess() {
		return gaAadl2.getPropertyConstantAccess();
	}
	
	public ParserRule getPropertyConstantRule() {
		return getPropertyConstantAccess().getRule();
	}

	//NumberValue returns aadl2::NumberValue:
	//	RealLit | IntegerLit;
	public Aadl2GrammarAccess.NumberValueElements getNumberValueAccess() {
		return gaAadl2.getNumberValueAccess();
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//RealLit returns aadl2::RealLiteral:
	//	value=SignedReal;
	public Aadl2GrammarAccess.RealLitElements getRealLitAccess() {
		return gaAadl2.getRealLitAccess();
	}
	
	public ParserRule getRealLitRule() {
		return getRealLitAccess().getRule();
	}

	//IntegerLit returns aadl2::IntegerLiteral:
	//	value=SignedInt;
	public Aadl2GrammarAccess.IntegerLitElements getIntegerLitAccess() {
		return gaAadl2.getIntegerLitAccess();
	}
	
	public ParserRule getIntegerLitRule() {
		return getIntegerLitAccess().getRule();
	}

	//ConstantPropertyExpression returns aadl2::PropertyExpression: //	OldRecordTerm | 
	// RecordTerm | ComponentClassifierTerm
	//	| ComputedTerm | StringTerm | NumericRangeTerm | RealTerm | IntegerTerm | ListTerm | BooleanLiteral |
	//	LiteralorReferenceTerm;
	public Aadl2GrammarAccess.ConstantPropertyExpressionElements getConstantPropertyExpressionAccess() {
		return gaAadl2.getConstantPropertyExpressionAccess();
	}
	
	public ParserRule getConstantPropertyExpressionRule() {
		return getConstantPropertyExpressionAccess().getRule();
	}

	//IntegerRange returns aadl2::NumericRange:
	//	lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant |
	//	ConstantValue);
	public Aadl2GrammarAccess.IntegerRangeElements getIntegerRangeAccess() {
		return gaAadl2.getIntegerRangeAccess();
	}
	
	public ParserRule getIntegerRangeRule() {
		return getIntegerRangeAccess().getRule();
	}

	//RealRange returns aadl2::NumericRange:
	//	lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue);
	public Aadl2GrammarAccess.RealRangeElements getRealRangeAccess() {
		return gaAadl2.getRealRangeAccess();
	}
	
	public ParserRule getRealRangeRule() {
		return getRealRangeAccess().getRule();
	}

	////// properties grammar	|'properties'|'property'|'delta'|'false'|'not'| 'and'|'or'|'range'|'record'|'reference'|'true'|'units'
	//
	//CoreKeyWord:
	//	"abstract" | "access" | "annex" | "applies" | "binding" | "bus" | "calls" | "classifier" | "connections" | "constant"
	//	| "data" | "device" | "end" | "enumeration" | "event" | "extends" | "feature" | "features" | "flow" | "flows" |
	//	"group" | "implementation" | "in" | "inherit" | "initial" | "internal" | "inverse" | "is" | "list" | "memory" |
	//	"mode" | "modes" | "none" | "of" | "out" | "package" | "parameter" | "path" | "port" | "private" | "process" |
	//	"processor" | "prototypes" | "provides" | "public" | "refined" | "renames" | "requires" | "self" | "set" | "sink" |
	//	"source" | "subcomponents" | "subprogram" | "system" | "thread" | "type" | "to" | "virtual" | "with";
	public Aadl2GrammarAccess.CoreKeyWordElements getCoreKeyWordAccess() {
		return gaAadl2.getCoreKeyWordAccess();
	}
	
	public ParserRule getCoreKeyWordRule() {
		return getCoreKeyWordAccess().getRule();
	}

	//// package anme
	// PNAME:
	//	ID ("::" ID)*;
	public Aadl2GrammarAccess.PNAMEElements getPNAMEAccess() {
		return gaAadl2.getPNAMEAccess();
	}
	
	public ParserRule getPNAMERule() {
		return getPNAMEAccess().getRule();
	}

	//FLOWOUT:
	//	(ID ".")? ID;
	public Aadl2GrammarAccess.FLOWOUTElements getFLOWOUTAccess() {
		return gaAadl2.getFLOWOUTAccess();
	}
	
	public ParserRule getFLOWOUTRule() {
		return getFLOWOUTAccess().getRule();
	}

	//FLOWIN:
	//	(ID ".")? ID;
	public Aadl2GrammarAccess.FLOWINElements getFLOWINAccess() {
		return gaAadl2.getFLOWINAccess();
	}
	
	public ParserRule getFLOWINRule() {
		return getFLOWINAccess().getRule();
	}

	//// fully qualified classifier name (always includes package name
	// FQCREF:
	//	(ID "::")+ ID ("." ID)?;
	public Aadl2GrammarAccess.FQCREFElements getFQCREFAccess() {
		return gaAadl2.getFQCREFAccess();
	}
	
	public ParserRule getFQCREFRule() {
		return getFQCREFAccess().getRule();
	}

	//// implementation name (used by value converter)
	// INAME:
	//	ID;
	public Aadl2GrammarAccess.INAMEElements getINAMEAccess() {
		return gaAadl2.getINAMEAccess();
	}
	
	public ParserRule getINAMERule() {
		return getINAMEAccess().getRule();
	}

	//// implementation name (used by value converter)
	// FULLINAME:
	//	ID "." ID;
	public Aadl2GrammarAccess.FULLINAMEElements getFULLINAMEAccess() {
		return gaAadl2.getFULLINAMEAccess();
	}
	
	public ParserRule getFULLINAMERule() {
		return getFULLINAMEAccess().getRule();
	}

	//// name of refined entity. Used to set name field by value converter	
	// REFINEDNAME:
	//	ID;
	public Aadl2GrammarAccess.REFINEDNAMEElements getREFINEDNAMEAccess() {
		return gaAadl2.getREFINEDNAMEAccess();
	}
	
	public ParserRule getREFINEDNAMERule() {
		return getREFINEDNAMEAccess().getRule();
	}

	//terminal ANNEXTEXT:
	//	"{**"->"**}";
	public TerminalRule getANNEXTEXTRule() {
		return gaAadl2.getANNEXTEXTRule();
	} 

	//PModel returns aadl2::Element: //| BasicPropertyAssociation | PropertyAssociation
	// ContainedPropertyAssociation;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaAadl2.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	// ContainedPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("applies" "to" appliesTo+=ContainmentPath (","
	//	appliesTo+=ContainmentPath)*)? ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaAadl2.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaAadl2.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] "=>" ownedValue+=PropertyValue ";";
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaAadl2.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	////	( 'annex' containmentPathElement+=AnnexPath )?
	// ContainmentPath returns aadl2::ContainedNamedElement:
	//	path=ContainmentPathElement;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaAadl2.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	// //	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//
	//ModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression "in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")";
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaAadl2.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression // phf made this optional: need to check separately that only the last one is optional
	//
	//	("in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")")?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaAadl2.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	// PropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaAadl2.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression returns aadl2::PropertyExpression: //	OldRecordTerm |
	// RecordTerm | ReferenceTerm |
	//	ComponentClassifierTerm | ComputedTerm | StringTerm | NumericRangeTerm | RealTerm | IntegerTerm | ListTerm |
	//	BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaAadl2.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm returns aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaAadl2.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral returns aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?="true" | "false");
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaAadl2.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue returns aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaAadl2.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm returns aadl2::ReferenceValue:
	//	"reference" "(" path=ContainmentPathElement //	( 'annex' ID '{**' 
	//
	//	//	containmentPathElement+=ContainmentPathElement
	// //	( '.' containmentPathElement+=ContainmentPathElement)*
	//
	//	//	'**}')?
	// ")";
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaAadl2.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm returns aadl2::RecordValue:
	//	"[" ownedFieldValue+=FieldPropertyAssociation+ "]";
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaAadl2.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm returns aadl2::RecordValue:
	//	"(" ownedFieldValue+=FieldPropertyAssociation+ ")";
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaAadl2.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm returns aadl2::ComputedValue:
	//	"compute" "(" function=ID ")";
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaAadl2.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm returns aadl2::ClassifierValue:
	//	"classifier" "(" classifier=[aadl2::ComponentClassifier|QCREF] ")";
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaAadl2.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm returns aadl2::ListValue:
	//	{aadl2::ListValue} "(" (ownedListElement+=PropertyExpression ("," ownedListElement+=PropertyExpression)*)? ")";
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaAadl2.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation returns aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty] "=>" ownedValue=PropertyExpression ";";
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaAadl2.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	// // need to add annex path element
	// //	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//
	//ContainmentPathElement returns aadl2::ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange?) ("." path=ContainmentPathElement)?;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaAadl2.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	// "{" STAR STAR ID STAR STAR "}";
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaAadl2.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus returns aadl2::OperationKind:
	//	"+" | "-";
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaAadl2.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm returns aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaAadl2.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString: // remove quotes from string in ValueConverter
	// STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaAadl2.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange returns aadl2::ArrayRange:
	//	{aadl2::ArrayRange} "[" lowerBound=INTVALUE (".." upperBound=INTVALUE)? "]";
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaAadl2.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant returns aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaAadl2.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//IntegerTerm returns aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.IntegerTermElements getIntegerTermAccess() {
		return gaAadl2.getIntegerTermAccess();
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedInt returns aadl2::Integer:
	//	("+" | "-")? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaAadl2.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//RealTerm returns aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.RealTermElements getRealTermAccess() {
		return gaAadl2.getRealTermAccess();
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//SignedReal returns aadl2::Real:
	//	("+" | "-")? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaAadl2.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm returns aadl2::RangeValue:
	//	minimum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	// NumAlt ".." maximum=
	//	//(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	// NumAlt ("delta" delta=
	//	//(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	// NumAlt)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaAadl2.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt returns aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaAadl2.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaAadl2.getSL_COMMENTRule();
	} 

	//INTVALUE returns aadl2::Integer: //NUMERAL 	
	// INTEGER_LIT;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaAadl2.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	////terminal NUMERAL:
	// //	(DIGIT)+('_' (DIGIT)+)*
	// //;
	// //terminal INT returns ecore::EInt: (DIGIT)+('_' (DIGIT)+)*;
	//
	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaAadl2.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	("e" | "E") "+"? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaAadl2.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("." DIGIT+ ("_" DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaAadl2.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("#" BASED_INTEGER "#" INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaAadl2.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return gaAadl2.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaAadl2.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaAadl2.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID "::" ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaAadl2.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ("::" ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaAadl2.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID ("." ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaAadl2.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	"*";
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaAadl2.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaAadl2.getSTRINGRule();
	} 

	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	// terminal ID:
	//	("a".."z" | "A".."Z") ("_"? ("a".."z" | "A".."Z" | "0".."9"))*;
	public TerminalRule getIDRule() {
		return gaAadl2.getIDRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaAadl2.getWSRule();
	} 
}
