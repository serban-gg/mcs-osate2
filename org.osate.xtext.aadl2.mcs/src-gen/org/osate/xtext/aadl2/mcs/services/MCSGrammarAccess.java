/*
 * generated by Xtext
 */
package org.osate.xtext.aadl2.mcs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class MCSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MCSGrammarRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSGrammarRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLibAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLibMCSAnnexLibraryParserRuleCall_0_0 = (RuleCall)cLibAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSubKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubclauseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubclauseMCSAnnexSubclauseParserRuleCall_1_1_0 = (RuleCall)cSubclauseAssignment_1_1.eContents().get(0);
		
		//MCSGrammarRoot:
		//	lib=MCSAnnexLibrary | "sub" subclause=MCSAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//lib=MCSAnnexLibrary | "sub" subclause=MCSAnnexSubclause
		public Alternatives getAlternatives() { return cAlternatives; }

		//lib=MCSAnnexLibrary
		public Assignment getLibAssignment_0() { return cLibAssignment_0; }

		//MCSAnnexLibrary
		public RuleCall getLibMCSAnnexLibraryParserRuleCall_0_0() { return cLibMCSAnnexLibraryParserRuleCall_0_0; }

		//"sub" subclause=MCSAnnexSubclause
		public Group getGroup_1() { return cGroup_1; }

		//"sub"
		public Keyword getSubKeyword_1_0() { return cSubKeyword_1_0; }

		//subclause=MCSAnnexSubclause
		public Assignment getSubclauseAssignment_1_1() { return cSubclauseAssignment_1_1; }

		//MCSAnnexSubclause
		public RuleCall getSubclauseMCSAnnexSubclauseParserRuleCall_1_1_0() { return cSubclauseMCSAnnexSubclauseParserRuleCall_1_1_0; }
	}

	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cMCSAnnexLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//	MCSAnnexLibrary;
		@Override public ParserRule getRule() { return rule; }

		//MCSAnnexLibrary
		public RuleCall getMCSAnnexLibraryParserRuleCall() { return cMCSAnnexLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cMCSAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	MCSAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//MCSAnnexSubclause
		public RuleCall getMCSAnnexSubclauseParserRuleCall() { return cMCSAnnexSubclauseParserRuleCall; }
	}

	public class MCSAnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSAnnexLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSAnnexLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTypesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypesType_declarationParserRuleCall_1_1_0 = (RuleCall)cTypesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFunctionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFunctionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctionsFunction_declarationParserRuleCall_2_1_0 = (RuleCall)cFunctionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTheoremsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTheoremsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTheoremsTheorem_declarationParserRuleCall_3_1_0 = (RuleCall)cTheoremsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cViewpointsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cViewpointsMCSViewpointParserRuleCall_4_0_0 = (RuleCall)cViewpointsAssignment_4_0.eContents().get(0);
		private final Assignment cViewpointsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cViewpointsMCSViewpointParserRuleCall_4_1_0 = (RuleCall)cViewpointsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cEnforceclausesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cEnforceclausesPackageEnforceParserRuleCall_5_0_0 = (RuleCall)cEnforceclausesAssignment_5_0.eContents().get(0);
		private final Assignment cEnforceclausesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEnforceclausesPackageEnforceParserRuleCall_5_1_0 = (RuleCall)cEnforceclausesAssignment_5_1.eContents().get(0);
		
		//MCSAnnexLibrary:
		//	{MCSAnnexLibrary} ("types" types+=type_declaration+)? ("functions" functions+=function_declaration+)? ("theorems"
		//	theorems+=theorem_declaration+)? (viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)?
		//	(enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSAnnexLibrary} ("types" types+=type_declaration+)? ("functions" functions+=function_declaration+)? ("theorems"
		//theorems+=theorem_declaration+)? (viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)? (enforceclauses+=PackageEnforce
		//enforceclauses+=PackageEnforce*)?
		public Group getGroup() { return cGroup; }

		//{MCSAnnexLibrary}
		public Action getMCSAnnexLibraryAction_0() { return cMCSAnnexLibraryAction_0; }

		//("types" types+=type_declaration+)?
		public Group getGroup_1() { return cGroup_1; }

		//"types"
		public Keyword getTypesKeyword_1_0() { return cTypesKeyword_1_0; }

		//types+=type_declaration+
		public Assignment getTypesAssignment_1_1() { return cTypesAssignment_1_1; }

		//type_declaration
		public RuleCall getTypesType_declarationParserRuleCall_1_1_0() { return cTypesType_declarationParserRuleCall_1_1_0; }

		//("functions" functions+=function_declaration+)?
		public Group getGroup_2() { return cGroup_2; }

		//"functions"
		public Keyword getFunctionsKeyword_2_0() { return cFunctionsKeyword_2_0; }

		//functions+=function_declaration+
		public Assignment getFunctionsAssignment_2_1() { return cFunctionsAssignment_2_1; }

		//function_declaration
		public RuleCall getFunctionsFunction_declarationParserRuleCall_2_1_0() { return cFunctionsFunction_declarationParserRuleCall_2_1_0; }

		//("theorems" theorems+=theorem_declaration+)?
		public Group getGroup_3() { return cGroup_3; }

		//"theorems"
		public Keyword getTheoremsKeyword_3_0() { return cTheoremsKeyword_3_0; }

		//theorems+=theorem_declaration+
		public Assignment getTheoremsAssignment_3_1() { return cTheoremsAssignment_3_1; }

		//theorem_declaration
		public RuleCall getTheoremsTheorem_declarationParserRuleCall_3_1_0() { return cTheoremsTheorem_declarationParserRuleCall_3_1_0; }

		//(viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)?
		public Group getGroup_4() { return cGroup_4; }

		//viewpoints+=MCSViewpoint
		public Assignment getViewpointsAssignment_4_0() { return cViewpointsAssignment_4_0; }

		//MCSViewpoint
		public RuleCall getViewpointsMCSViewpointParserRuleCall_4_0_0() { return cViewpointsMCSViewpointParserRuleCall_4_0_0; }

		//viewpoints+=MCSViewpoint*
		public Assignment getViewpointsAssignment_4_1() { return cViewpointsAssignment_4_1; }

		//MCSViewpoint
		public RuleCall getViewpointsMCSViewpointParserRuleCall_4_1_0() { return cViewpointsMCSViewpointParserRuleCall_4_1_0; }

		//(enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?
		public Group getGroup_5() { return cGroup_5; }

		//enforceclauses+=PackageEnforce
		public Assignment getEnforceclausesAssignment_5_0() { return cEnforceclausesAssignment_5_0; }

		//PackageEnforce
		public RuleCall getEnforceclausesPackageEnforceParserRuleCall_5_0_0() { return cEnforceclausesPackageEnforceParserRuleCall_5_0_0; }

		//enforceclauses+=PackageEnforce*
		public Assignment getEnforceclausesAssignment_5_1() { return cEnforceclausesAssignment_5_1; }

		//PackageEnforce
		public RuleCall getEnforceclausesPackageEnforceParserRuleCall_5_1_0() { return cEnforceclausesPackageEnforceParserRuleCall_5_1_0; }
	}

	public class MCSViewpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSViewpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPolicyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPolicyEnforcement_policyParserRuleCall_2_0 = (RuleCall)cPolicyAssignment_2.eContents().get(0);
		private final Assignment cPscriptAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPscriptPackageScriptParserRuleCall_3_0 = (RuleCall)cPscriptAssignment_3.eContents().get(0);
		
		//MCSViewpoint:
		//	"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript?;
		@Override public ParserRule getRule() { return rule; }

		//"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript?
		public Group getGroup() { return cGroup; }

		//"viewpoint"
		public Keyword getViewpointKeyword_0() { return cViewpointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//policy=Enforcement_policy
		public Assignment getPolicyAssignment_2() { return cPolicyAssignment_2; }

		//Enforcement_policy
		public RuleCall getPolicyEnforcement_policyParserRuleCall_2_0() { return cPolicyEnforcement_policyParserRuleCall_2_0; }

		//pscript=PackageScript?
		public Assignment getPscriptAssignment_3() { return cPscriptAssignment_3; }

		//PackageScript
		public RuleCall getPscriptPackageScriptParserRuleCall_3_0() { return cPscriptPackageScriptParserRuleCall_3_0; }
	}

	public class Enforcement_policyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enforcement_policy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPackAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cPackPackageKeyword_0_0_0 = (Keyword)cPackAssignment_0_0.eContents().get(0);
		private final Assignment cClassAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cClassClassifierKeyword_0_1_0 = (Keyword)cClassAssignment_0_1.eContents().get(0);
		private final Keyword cContractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Enforcement_policy:
		//	(pack?="package" | class?="classifier") "contract";
		@Override public ParserRule getRule() { return rule; }

		//(pack?="package" | class?="classifier") "contract"
		public Group getGroup() { return cGroup; }

		//pack?="package" | class?="classifier"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//pack?="package"
		public Assignment getPackAssignment_0_0() { return cPackAssignment_0_0; }

		//"package"
		public Keyword getPackPackageKeyword_0_0_0() { return cPackPackageKeyword_0_0_0; }

		//class?="classifier"
		public Assignment getClassAssignment_0_1() { return cClassAssignment_0_1; }

		//"classifier"
		public Keyword getClassClassifierKeyword_0_1_0() { return cClassClassifierKeyword_0_1_0; }

		//"contract"
		public Keyword getContractKeyword_1() { return cContractKeyword_1; }
	}

	public class PackageScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAppliesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAppliesAppliesToClauseParserRuleCall_1_0_0 = (RuleCall)cAppliesAssignment_1_0.eContents().get(0);
		private final Assignment cC_blockAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cC_blockConstraintsBlockParserRuleCall_1_1_0 = (RuleCall)cC_blockAssignment_1_1.eContents().get(0);
		private final Keyword cEndscriptKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefViewpointReferenceParserRuleCall_3_0 = (RuleCall)cRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageScript:
		//	"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";";
		@Override public ParserRule getRule() { return rule; }

		//"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//(applies+=AppliesToClause c_block+=ConstraintsBlock+)*
		public Group getGroup_1() { return cGroup_1; }

		//applies+=AppliesToClause
		public Assignment getAppliesAssignment_1_0() { return cAppliesAssignment_1_0; }

		//AppliesToClause
		public RuleCall getAppliesAppliesToClauseParserRuleCall_1_0_0() { return cAppliesAppliesToClauseParserRuleCall_1_0_0; }

		//c_block+=ConstraintsBlock+
		public Assignment getC_blockAssignment_1_1() { return cC_blockAssignment_1_1; }

		//ConstraintsBlock
		public RuleCall getC_blockConstraintsBlockParserRuleCall_1_1_0() { return cC_blockConstraintsBlockParserRuleCall_1_1_0; }

		//"endscript"
		public Keyword getEndscriptKeyword_2() { return cEndscriptKeyword_2; }

		//ref=ViewpointReference
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//ViewpointReference
		public RuleCall getRefViewpointReferenceParserRuleCall_3_0() { return cRefViewpointReferenceParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AppliesToClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AppliesToClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppliesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAllAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cAllAllKeyword_2_0_0 = (Keyword)cAllAssignment_2_0.eContents().get(0);
		private final Assignment cCategoryAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCategoryClassifierCategoryParserRuleCall_2_1_0 = (RuleCall)cCategoryAssignment_2_1.eContents().get(0);
		
		//AppliesToClause:
		//	"applies" "to" (all?="all" //					ref_to_c = ComponentClassifierReference //|
		//	//					ref_to_f = FeatureGroupClassifierReference				
		//	| category= //|
		//	ClassifierCategory);
		@Override public ParserRule getRule() { return rule; }

		//"applies" "to" (all?="all" //					ref_to_c = ComponentClassifierReference //|
		////					ref_to_f = FeatureGroupClassifierReference				
		//| category= //|
		//ClassifierCategory)
		public Group getGroup() { return cGroup; }

		//"applies"
		public Keyword getAppliesKeyword_0() { return cAppliesKeyword_0; }

		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		//all?="all" //					ref_to_c = ComponentClassifierReference //|
		////					ref_to_f = FeatureGroupClassifierReference				
		//| category= //|
		//ClassifierCategory
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//all?="all"
		public Assignment getAllAssignment_2_0() { return cAllAssignment_2_0; }

		//"all"
		public Keyword getAllAllKeyword_2_0_0() { return cAllAllKeyword_2_0_0; }

		//category= //|
		//ClassifierCategory
		public Assignment getCategoryAssignment_2_1() { return cCategoryAssignment_2_1; }

		////|
		//ClassifierCategory
		public RuleCall getCategoryClassifierCategoryParserRuleCall_2_1_0() { return cCategoryClassifierCategoryParserRuleCall_2_1_0; }
	}

	public class ClassifierCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierCategory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassifierCategoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cComponentAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cComponentComponentCategoryKeyword_1_0_0_0 = (Keyword)cComponentAssignment_1_0_0.eContents().get(0);
		private final Assignment cCtAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cCtComponentTypeCrossReference_1_0_1_0 = (CrossReference)cCtAssignment_1_0_1.eContents().get(0);
		private final RuleCall cCtComponentTypeQCREFParserRuleCall_1_0_1_0_1 = (RuleCall)cCtComponentTypeCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Assignment cImplAssignment_1_0_2_0 = (Assignment)cGroup_1_0_2.eContents().get(0);
		private final Keyword cImplImplementationKeyword_1_0_2_0_0 = (Keyword)cImplAssignment_1_0_2_0.eContents().get(0);
		private final Assignment cCiAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final CrossReference cCiComponentImplementationCrossReference_1_0_2_1_0 = (CrossReference)cCiAssignment_1_0_2_1.eContents().get(0);
		private final RuleCall cCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1 = (RuleCall)cCiComponentImplementationCrossReference_1_0_2_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cFeat_gAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cFeat_gFeatureGroupKeyword_1_1_0_0 = (Keyword)cFeat_gAssignment_1_1_0.eContents().get(0);
		private final Assignment cRef_to_fAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0 = (RuleCall)cRef_to_fAssignment_1_1_1.eContents().get(0);
		
		//ClassifierCategory:
		//	{ClassifierCategory} (component="ComponentCategory" ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//	ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?);
		@Override public ParserRule getRule() { return rule; }

		//{ClassifierCategory} (component="ComponentCategory" ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?)
		public Group getGroup() { return cGroup; }

		//{ClassifierCategory}
		public Action getClassifierCategoryAction_0() { return cClassifierCategoryAction_0; }

		//component="ComponentCategory" ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//component="ComponentCategory" ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
		//ci=[aadl2::ComponentImplementation|QCREF]?)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//component="ComponentCategory"
		public Assignment getComponentAssignment_1_0_0() { return cComponentAssignment_1_0_0; }

		//"ComponentCategory"
		public Keyword getComponentComponentCategoryKeyword_1_0_0_0() { return cComponentComponentCategoryKeyword_1_0_0_0; }

		//ct=[aadl2::ComponentType|QCREF]?
		public Assignment getCtAssignment_1_0_1() { return cCtAssignment_1_0_1; }

		//[aadl2::ComponentType|QCREF]
		public CrossReference getCtComponentTypeCrossReference_1_0_1_0() { return cCtComponentTypeCrossReference_1_0_1_0; }

		//QCREF
		public RuleCall getCtComponentTypeQCREFParserRuleCall_1_0_1_0_1() { return cCtComponentTypeQCREFParserRuleCall_1_0_1_0_1; }

		//(impl?="implementation" ci=[aadl2::ComponentImplementation|QCREF]?)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//impl?="implementation"
		public Assignment getImplAssignment_1_0_2_0() { return cImplAssignment_1_0_2_0; }

		//"implementation"
		public Keyword getImplImplementationKeyword_1_0_2_0_0() { return cImplImplementationKeyword_1_0_2_0_0; }

		//ci=[aadl2::ComponentImplementation|QCREF]?
		public Assignment getCiAssignment_1_0_2_1() { return cCiAssignment_1_0_2_1; }

		//[aadl2::ComponentImplementation|QCREF]
		public CrossReference getCiComponentImplementationCrossReference_1_0_2_1_0() { return cCiComponentImplementationCrossReference_1_0_2_1_0; }

		//QCREF
		public RuleCall getCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1() { return cCiComponentImplementationQCREFParserRuleCall_1_0_2_1_0_1; }

		//feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//feat_g?="feature group"
		public Assignment getFeat_gAssignment_1_1_0() { return cFeat_gAssignment_1_1_0; }

		//"feature group"
		public Keyword getFeat_gFeatureGroupKeyword_1_1_0_0() { return cFeat_gFeatureGroupKeyword_1_1_0_0; }

		//ref_to_f=FeatureGroupClassifierReference?
		public Assignment getRef_to_fAssignment_1_1_1() { return cRef_to_fAssignment_1_1_1; }

		//FeatureGroupClassifierReference
		public RuleCall getRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0() { return cRef_to_fFeatureGroupClassifierReferenceParserRuleCall_1_1_1_0; }
	}

	public class FeatureGroupClassifierReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureGroupClassifierReference");
		private final Assignment cFgAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFgFeatureGroupTypeCrossReference_0 = (CrossReference)cFgAssignment.eContents().get(0);
		private final RuleCall cFgFeatureGroupTypeQCREFParserRuleCall_0_1 = (RuleCall)cFgFeatureGroupTypeCrossReference_0.eContents().get(1);
		
		////ComponentClassifierReference : 
		////	(ct = [aadl2::ComponentType|QCREF]   | 
		////    ci = [aadl2::ComponentImplementation|QCREF] 
		////	)
		////;
		//FeatureGroupClassifierReference:
		//	fg=[aadl2::FeatureGroupType|QCREF];
		@Override public ParserRule getRule() { return rule; }

		//fg=[aadl2::FeatureGroupType|QCREF]
		public Assignment getFgAssignment() { return cFgAssignment; }

		//[aadl2::FeatureGroupType|QCREF]
		public CrossReference getFgFeatureGroupTypeCrossReference_0() { return cFgFeatureGroupTypeCrossReference_0; }

		//QCREF
		public RuleCall getFgFeatureGroupTypeQCREFParserRuleCall_0_1() { return cFgFeatureGroupTypeQCREFParserRuleCall_0_1; }
	}

	public class ViewpointReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewpointReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolicyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPolicyEnforcement_policyCrossReference_0_0 = (CrossReference)cPolicyAssignment_0.eContents().get(0);
		private final RuleCall cPolicyEnforcement_policyIDTerminalRuleCall_0_0_1 = (RuleCall)cPolicyEnforcement_policyCrossReference_0_0.eContents().get(1);
		private final Assignment cVp_refAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVp_refMCSViewpointCrossReference_1_0 = (CrossReference)cVp_refAssignment_1.eContents().get(0);
		private final RuleCall cVp_refMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cVp_refMCSViewpointCrossReference_1_0.eContents().get(1);
		
		//ViewpointReference:
		//	policy=[Enforcement_policy]? vp_ref=[MCSViewpoint];
		@Override public ParserRule getRule() { return rule; }

		//policy=[Enforcement_policy]? vp_ref=[MCSViewpoint]
		public Group getGroup() { return cGroup; }

		//policy=[Enforcement_policy]?
		public Assignment getPolicyAssignment_0() { return cPolicyAssignment_0; }

		//[Enforcement_policy]
		public CrossReference getPolicyEnforcement_policyCrossReference_0_0() { return cPolicyEnforcement_policyCrossReference_0_0; }

		//ID
		public RuleCall getPolicyEnforcement_policyIDTerminalRuleCall_0_0_1() { return cPolicyEnforcement_policyIDTerminalRuleCall_0_0_1; }

		//vp_ref=[MCSViewpoint]
		public Assignment getVp_refAssignment_1() { return cVp_refAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getVp_refMCSViewpointCrossReference_1_0() { return cVp_refMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getVp_refMCSViewpointIDTerminalRuleCall_1_0_1() { return cVp_refMCSViewpointIDTerminalRuleCall_1_0_1; }
	}

	public class ConstraintsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstraintsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cB_labelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cB_labelBlock_label_idParserRuleCall_0_0_0 = (RuleCall)cB_labelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCsLabelled_check_statementParserRuleCall_2_0 = (RuleCall)cCsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstraintsBlock:
		//	(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}";
		@Override public ParserRule getRule() { return rule; }

		//(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}"
		public Group getGroup() { return cGroup; }

		//(b_label=block_label_id ":")?
		public Group getGroup_0() { return cGroup_0; }

		//b_label=block_label_id
		public Assignment getB_labelAssignment_0_0() { return cB_labelAssignment_0_0; }

		//block_label_id
		public RuleCall getB_labelBlock_label_idParserRuleCall_0_0_0() { return cB_labelBlock_label_idParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//cs+=labelled_check_statement+
		public Assignment getCsAssignment_2() { return cCsAssignment_2; }

		//labelled_check_statement
		public RuleCall getCsLabelled_check_statementParserRuleCall_2_0() { return cCsLabelled_check_statementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class Labelled_check_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "labelled_check_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cC_labelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cC_labelCheck_label_idParserRuleCall_0_0_0 = (RuleCall)cC_labelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCsCheck_statementParserRuleCall_1_0 = (RuleCall)cCsAssignment_1.eContents().get(0);
		
		//labelled_check_statement:
		//	(c_label=check_label_id ":")? cs=check_statement;
		@Override public ParserRule getRule() { return rule; }

		//(c_label=check_label_id ":")? cs=check_statement
		public Group getGroup() { return cGroup; }

		//(c_label=check_label_id ":")?
		public Group getGroup_0() { return cGroup_0; }

		//c_label=check_label_id
		public Assignment getC_labelAssignment_0_0() { return cC_labelAssignment_0_0; }

		//check_label_id
		public RuleCall getC_labelCheck_label_idParserRuleCall_0_0_0() { return cC_labelCheck_label_idParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//cs=check_statement
		public Assignment getCsAssignment_1() { return cCsAssignment_1; }

		//check_statement
		public RuleCall getCsCheck_statementParserRuleCall_1_0() { return cCsCheck_statementParserRuleCall_1_0; }
	}

	public class Check_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheck_theoremParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheck_assertionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//check_statement:
		//	check_theorem | check_assertion;
		@Override public ParserRule getRule() { return rule; }

		//check_theorem | check_assertion
		public Alternatives getAlternatives() { return cAlternatives; }

		//check_theorem
		public RuleCall getCheck_theoremParserRuleCall_0() { return cCheck_theoremParserRuleCall_0; }

		//check_assertion
		public RuleCall getCheck_assertionParserRuleCall_1() { return cCheck_assertionParserRuleCall_1; }
	}

	public class Block_label_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block_label_id");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//block_label_id:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_label_idElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_label_id");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//check_label_id:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_theoremElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_theorem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTheoremKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTheoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTheoTheorem_declarationCrossReference_2_0 = (CrossReference)cTheoAssignment_2.eContents().get(0);
		private final RuleCall cTheoTheorem_declarationIDTerminalRuleCall_2_0_1 = (RuleCall)cTheoTheorem_declarationCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRootAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRootRoot_elementParserRuleCall_3_1_0 = (RuleCall)cRootAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cInmodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInmodeModeSpecParserRuleCall_4_0 = (RuleCall)cInmodeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFailKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStrAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStrString_expressionParserRuleCall_5_1_0 = (RuleCall)cStrAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//check_theorem:
		//	"check" "theorem" theo=[theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
		//	str=string_expression)? ";";
		@Override public ParserRule getRule() { return rule; }

		//"check" "theorem" theo=[theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
		//str=string_expression)? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//"theorem"
		public Keyword getTheoremKeyword_1() { return cTheoremKeyword_1; }

		//theo=[theorem_declaration]
		public Assignment getTheoAssignment_2() { return cTheoAssignment_2; }

		//[theorem_declaration]
		public CrossReference getTheoTheorem_declarationCrossReference_2_0() { return cTheoTheorem_declarationCrossReference_2_0; }

		//ID
		public RuleCall getTheoTheorem_declarationIDTerminalRuleCall_2_0_1() { return cTheoTheorem_declarationIDTerminalRuleCall_2_0_1; }

		//("(" root=root_element ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//root=root_element
		public Assignment getRootAssignment_3_1() { return cRootAssignment_3_1; }

		//root_element
		public RuleCall getRootRoot_elementParserRuleCall_3_1_0() { return cRootRoot_elementParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//inmode=ModeSpec?
		public Assignment getInmodeAssignment_4() { return cInmodeAssignment_4; }

		//ModeSpec
		public RuleCall getInmodeModeSpecParserRuleCall_4_0() { return cInmodeModeSpecParserRuleCall_4_0; }

		//("fail" str=string_expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"fail"
		public Keyword getFailKeyword_5_0() { return cFailKeyword_5_0; }

		//str=string_expression
		public Assignment getStrAssignment_5_1() { return cStrAssignment_5_1; }

		//string_expression
		public RuleCall getStrString_expressionParserRuleCall_5_1_0() { return cStrString_expressionParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ModeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeModeNameParserRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		
		//ModeSpec:
		//	"in" "mode" mode=ModeName;
		@Override public ParserRule getRule() { return rule; }

		//"in" "mode" mode=ModeName
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//"mode"
		public Keyword getModeKeyword_1() { return cModeKeyword_1; }

		//mode=ModeName
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }

		//ModeName
		public RuleCall getModeModeNameParserRuleCall_2_0() { return cModeModeNameParserRuleCall_2_0; }
	}

	public class ModeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModeName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ModeName:
		//	name= //temporary
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//name= //temporary
		//ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		////temporary
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class Check_assertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "check_assertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRootRoot_elementParserRuleCall_1_0 = (RuleCall)cRootAssignment_1.eContents().get(0);
		private final Assignment cInmodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInmodeModeSpecParserRuleCall_2_0 = (RuleCall)cInmodeAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprAssertion_expressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFailKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cStrAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStrString_expressionParserRuleCall_6_1_0 = (RuleCall)cStrAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//check_assertion:
		//	"check" root=root_element? inmode=ModeSpec? "(" expr=assertion_expression ")" ("fail" str=string_expression)? ";";
		@Override public ParserRule getRule() { return rule; }

		//"check" root=root_element? inmode=ModeSpec? "(" expr=assertion_expression ")" ("fail" str=string_expression)? ";"
		public Group getGroup() { return cGroup; }

		//"check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//root=root_element?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }

		//root_element
		public RuleCall getRootRoot_elementParserRuleCall_1_0() { return cRootRoot_elementParserRuleCall_1_0; }

		//inmode=ModeSpec?
		public Assignment getInmodeAssignment_2() { return cInmodeAssignment_2; }

		//ModeSpec
		public RuleCall getInmodeModeSpecParserRuleCall_2_0() { return cInmodeModeSpecParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expr=assertion_expression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//assertion_expression
		public RuleCall getExprAssertion_expressionParserRuleCall_4_0() { return cExprAssertion_expressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("fail" str=string_expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"fail"
		public Keyword getFailKeyword_6_0() { return cFailKeyword_6_0; }

		//str=string_expression
		public Assignment getStrAssignment_6_1() { return cStrAssignment_6_1; }

		//string_expression
		public RuleCall getStrString_expressionParserRuleCall_6_1_0() { return cStrString_expressionParserRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class Root_elementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "root_element");
		private final RuleCall cElement_referenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//root_element:
		//	element_reference;
		@Override public ParserRule getRule() { return rule; }

		//element_reference
		public RuleCall getElement_referenceParserRuleCall() { return cElement_referenceParserRuleCall; }
	}

	public class Element_referenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "element_reference");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////temporary
		//element_reference:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class PackageEnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageEnforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViewpointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cViewpointMCSViewpointCrossReference_1_0 = (CrossReference)cViewpointAssignment_1.eContents().get(0);
		private final RuleCall cViewpointMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cViewpointMCSViewpointCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageEnforce:
		//	"enforce" viewpoint=[MCSViewpoint] //temporary
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//"enforce" viewpoint=[MCSViewpoint] //temporary
		//";"
		public Group getGroup() { return cGroup; }

		//"enforce"
		public Keyword getEnforceKeyword_0() { return cEnforceKeyword_0; }

		//viewpoint=[MCSViewpoint]
		public Assignment getViewpointAssignment_1() { return cViewpointAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getViewpointMCSViewpointCrossReference_1_0() { return cViewpointMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getViewpointMCSViewpointIDTerminalRuleCall_1_0_1() { return cViewpointMCSViewpointIDTerminalRuleCall_1_0_1; }

		////temporary
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameXExpressionParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//expression:
		//	name=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//name=XExpression
		public Assignment getNameAssignment() { return cNameAssignment; }

		//XExpression
		public RuleCall getNameXExpressionParserRuleCall_0() { return cNameXExpressionParserRuleCall_0; }
	}

	public class Assertion_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assertion_expression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//assertion_expression:
		//	expr=expression;
		@Override public ParserRule getRule() { return rule; }

		//expr=expression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}

	public class String_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "string_expression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//string_expression:
		//	expr=expression;
		@Override public ParserRule getRule() { return rule; }

		//expr=expression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}

	public class MCSAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSAnnexSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTheoremsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTheoremsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTheoremsTheorem_declarationParserRuleCall_1_1_0 = (RuleCall)cTheoremsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEnforceclausesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEnforceclausesClassifierEnforceParserRuleCall_2_0_0 = (RuleCall)cEnforceclausesAssignment_2_0.eContents().get(0);
		private final Assignment cEnforceclausesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEnforceclausesClassifierEnforceParserRuleCall_2_1_0 = (RuleCall)cEnforceclausesAssignment_2_1.eContents().get(0);
		
		////temporary
		//MCSAnnexSubclause:
		//	{MCSAnnexSubclause} ("theorems" theorems+=theorem_declaration+) (enforceclauses+=ClassifierEnforce
		//	enforceclauses+=ClassifierEnforce*)?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSAnnexSubclause} ("theorems" theorems+=theorem_declaration+) (enforceclauses+=ClassifierEnforce
		//enforceclauses+=ClassifierEnforce*)?
		public Group getGroup() { return cGroup; }

		//{MCSAnnexSubclause}
		public Action getMCSAnnexSubclauseAction_0() { return cMCSAnnexSubclauseAction_0; }

		//"theorems" theorems+=theorem_declaration+
		public Group getGroup_1() { return cGroup_1; }

		//"theorems"
		public Keyword getTheoremsKeyword_1_0() { return cTheoremsKeyword_1_0; }

		//theorems+=theorem_declaration+
		public Assignment getTheoremsAssignment_1_1() { return cTheoremsAssignment_1_1; }

		//theorem_declaration
		public RuleCall getTheoremsTheorem_declarationParserRuleCall_1_1_0() { return cTheoremsTheorem_declarationParserRuleCall_1_1_0; }

		//(enforceclauses+=ClassifierEnforce enforceclauses+=ClassifierEnforce*)?
		public Group getGroup_2() { return cGroup_2; }

		//enforceclauses+=ClassifierEnforce
		public Assignment getEnforceclausesAssignment_2_0() { return cEnforceclausesAssignment_2_0; }

		//ClassifierEnforce
		public RuleCall getEnforceclausesClassifierEnforceParserRuleCall_2_0_0() { return cEnforceclausesClassifierEnforceParserRuleCall_2_0_0; }

		//enforceclauses+=ClassifierEnforce*
		public Assignment getEnforceclausesAssignment_2_1() { return cEnforceclausesAssignment_2_1; }

		//ClassifierEnforce
		public RuleCall getEnforceclausesClassifierEnforceParserRuleCall_2_1_0() { return cEnforceclausesClassifierEnforceParserRuleCall_2_1_0; }
	}

	public class ClassifierEnforceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierEnforce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnforceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cViewpointAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cViewpointMCSViewpointCrossReference_1_0 = (CrossReference)cViewpointAssignment_1.eContents().get(0);
		private final RuleCall cViewpointMCSViewpointIDTerminalRuleCall_1_0_1 = (RuleCall)cViewpointMCSViewpointCrossReference_1_0.eContents().get(1);
		private final Assignment cScriptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScriptClassifierScriptParserRuleCall_2_0 = (RuleCall)cScriptAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClassifierEnforce:
		//	"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";";
		@Override public ParserRule getRule() { return rule; }

		//"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";"
		public Group getGroup() { return cGroup; }

		//"enforce"
		public Keyword getEnforceKeyword_0() { return cEnforceKeyword_0; }

		//viewpoint=[MCSViewpoint]
		public Assignment getViewpointAssignment_1() { return cViewpointAssignment_1; }

		//[MCSViewpoint]
		public CrossReference getViewpointMCSViewpointCrossReference_1_0() { return cViewpointMCSViewpointCrossReference_1_0; }

		//ID
		public RuleCall getViewpointMCSViewpointIDTerminalRuleCall_1_0_1() { return cViewpointMCSViewpointIDTerminalRuleCall_1_0_1; }

		//script=ClassifierScript
		public Assignment getScriptAssignment_2() { return cScriptAssignment_2; }

		//ClassifierScript
		public RuleCall getScriptClassifierScriptParserRuleCall_2_0() { return cScriptClassifierScriptParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ClassifierScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassifierScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScriptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cC_blockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cC_blockConstraintsBlockParserRuleCall_1_0 = (RuleCall)cC_blockAssignment_1.eContents().get(0);
		private final Keyword cEndscriptKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRefViewpointReferenceParserRuleCall_3_0 = (RuleCall)cRefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ClassifierScript:
		//	"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";";
		@Override public ParserRule getRule() { return rule; }

		//"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";"
		public Group getGroup() { return cGroup; }

		//"script"
		public Keyword getScriptKeyword_0() { return cScriptKeyword_0; }

		//c_block+=ConstraintsBlock*
		public Assignment getC_blockAssignment_1() { return cC_blockAssignment_1; }

		//ConstraintsBlock
		public RuleCall getC_blockConstraintsBlockParserRuleCall_1_0() { return cC_blockConstraintsBlockParserRuleCall_1_0; }

		//"endscript"
		public Keyword getEndscriptKeyword_2() { return cEndscriptKeyword_2; }

		//ref=ViewpointReference
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }

		//ViewpointReference
		public RuleCall getRefViewpointReferenceParserRuleCall_3_0() { return cRefViewpointReferenceParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Theorem_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "theorem_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheoremKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMlIn_modes_listParserRuleCall_2_0 = (RuleCall)cMlAssignment_2.eContents().get(0);
		private final Assignment cLocalsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocalsLocal_declarationParserRuleCall_3_0 = (RuleCall)cLocalsAssignment_3.eContents().get(0);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsTheorem_statementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndnameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cEndnameTheorem_declarationCrossReference_6_0 = (CrossReference)cEndnameAssignment_6.eContents().get(0);
		private final RuleCall cEndnameTheorem_declarationIDTerminalRuleCall_6_0_1 = (RuleCall)cEndnameTheorem_declarationCrossReference_6_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//theorem_declaration:
		//	"theorem" name=ID ml?=in_modes_list? locals+=local_declaration* statements+=theorem_statement* "end"
		//	endname=[theorem_declaration] ";";
		@Override public ParserRule getRule() { return rule; }

		//"theorem" name=ID ml?=in_modes_list? locals+=local_declaration* statements+=theorem_statement* "end"
		//endname=[theorem_declaration] ";"
		public Group getGroup() { return cGroup; }

		//"theorem"
		public Keyword getTheoremKeyword_0() { return cTheoremKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//ml?=in_modes_list?
		public Assignment getMlAssignment_2() { return cMlAssignment_2; }

		//in_modes_list
		public RuleCall getMlIn_modes_listParserRuleCall_2_0() { return cMlIn_modes_listParserRuleCall_2_0; }

		//locals+=local_declaration*
		public Assignment getLocalsAssignment_3() { return cLocalsAssignment_3; }

		//local_declaration
		public RuleCall getLocalsLocal_declarationParserRuleCall_3_0() { return cLocalsLocal_declarationParserRuleCall_3_0; }

		//statements+=theorem_statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//theorem_statement
		public RuleCall getStatementsTheorem_statementParserRuleCall_4_0() { return cStatementsTheorem_statementParserRuleCall_4_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//endname=[theorem_declaration]
		public Assignment getEndnameAssignment_6() { return cEndnameAssignment_6; }

		//[theorem_declaration]
		public CrossReference getEndnameTheorem_declarationCrossReference_6_0() { return cEndnameTheorem_declarationCrossReference_6_0; }

		//ID
		public RuleCall getEndnameTheorem_declarationIDTerminalRuleCall_6_0_1() { return cEndnameTheorem_declarationIDTerminalRuleCall_6_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class In_modes_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "in_modes_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModesIDTerminalRuleCall_3_0 = (RuleCall)cModesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cModesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cModesIDTerminalRuleCall_4_1_0 = (RuleCall)cModesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//in_modes_list:
		//	"in" "modes" "(" modes+=ID ("," modes+=ID)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"in" "modes" "(" modes+=ID ("," modes+=ID)* ")"
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//"modes"
		public Keyword getModesKeyword_1() { return cModesKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//modes+=ID
		public Assignment getModesAssignment_3() { return cModesAssignment_3; }

		//ID
		public RuleCall getModesIDTerminalRuleCall_3_0() { return cModesIDTerminalRuleCall_3_0; }

		//("," modes+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//modes+=ID
		public Assignment getModesAssignment_4_1() { return cModesAssignment_4_1; }

		//ID
		public RuleCall getModesIDTerminalRuleCall_4_1_0() { return cModesIDTerminalRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class Local_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "local_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeft_exprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeft_exprConstant_expressionParserRuleCall_4_0 = (RuleCall)cLeft_exprAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//local_declaration:
		//	const?="const"? name=ID type=type_expression? ":=" left_expr=constant_expression ";";
		@Override public ParserRule getRule() { return rule; }

		//const?="const"? name=ID type=type_expression? ":=" left_expr=constant_expression ";"
		public Group getGroup() { return cGroup; }

		//const?="const"?
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }

		//"const"
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=type_expression?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//left_expr=constant_expression
		public Assignment getLeft_exprAssignment_4() { return cLeft_exprAssignment_4; }

		//constant_expression
		public RuleCall getLeft_exprConstant_expressionParserRuleCall_4_0() { return cLeft_exprConstant_expressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class Theorem_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "theorem_statement");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementCheck_statementParserRuleCall_0 = (RuleCall)cStatementAssignment.eContents().get(0);
		
		//theorem_statement:
		//	statement=check_statement;
		@Override public ParserRule getRule() { return rule; }

		//statement=check_statement
		public Assignment getStatementAssignment() { return cStatementAssignment; }

		//check_statement
		public RuleCall getStatementCheck_statementParserRuleCall_0() { return cStatementCheck_statementParserRuleCall_0; }
	}

	public class Type_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypeType_expressionParserRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cMappedKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cToKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cJavatypeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cJavatypeJvmTypeCrossReference_3_1_2_0 = (CrossReference)cJavatypeAssignment_3_1_2.eContents().get(0);
		private final RuleCall cJavatypeJvmTypeQualifiedNameParserRuleCall_3_1_2_0_1 = (RuleCall)cJavatypeJvmTypeCrossReference_3_1_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//type_declaration:
		//	name=ID ":" "type" (type=type_expression | "mapped" "to" javatype=[types::JvmType|QualifiedName]) ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" "type" (type=type_expression | "mapped" "to" javatype=[types::JvmType|QualifiedName]) ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//type=type_expression | "mapped" "to" javatype=[types::JvmType|QualifiedName]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//type=type_expression
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }

		//type_expression
		public RuleCall getTypeType_expressionParserRuleCall_3_0_0() { return cTypeType_expressionParserRuleCall_3_0_0; }

		//"mapped" "to" javatype=[types::JvmType|QualifiedName]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"mapped"
		public Keyword getMappedKeyword_3_1_0() { return cMappedKeyword_3_1_0; }

		//"to"
		public Keyword getToKeyword_3_1_1() { return cToKeyword_3_1_1; }

		//javatype=[types::JvmType|QualifiedName]
		public Assignment getJavatypeAssignment_3_1_2() { return cJavatypeAssignment_3_1_2; }

		//[types::JvmType|QualifiedName]
		public CrossReference getJavatypeJvmTypeCrossReference_3_1_2_0() { return cJavatypeJvmTypeCrossReference_3_1_2_0; }

		//QualifiedName
		public RuleCall getJavatypeJvmTypeQualifiedNameParserRuleCall_3_1_2_0_1() { return cJavatypeJvmTypeQualifiedNameParserRuleCall_3_1_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Type_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type_expression");
		private final Assignment cBasicAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBasicBasic_typeParserRuleCall_0 = (RuleCall)cBasicAssignment.eContents().get(0);
		
		////temporary
		//type_expression:
		//	basic=basic_type;
		@Override public ParserRule getRule() { return rule; }

		//basic=basic_type
		public Assignment getBasicAssignment() { return cBasicAssignment; }

		//basic_type
		public RuleCall getBasicBasic_typeParserRuleCall_0() { return cBasicBasic_typeParserRuleCall_0; }
	}

	public class Function_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cArgAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cArgArgumentParserRuleCall_1_0_1_0 = (RuleCall)cArgAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cArgAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cArgArgumentParserRuleCall_1_0_2_1_0 = (RuleCall)cArgAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Keyword cReturnsKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Assignment cOutAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cOutType_expressionParserRuleCall_1_0_4_1_0 = (RuleCall)cOutAssignment_1_0_4_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cFtypeAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cFtypeUnnamedFunctionTypeParserRuleCall_1_1_1_0_0 = (RuleCall)cFtypeAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cTyperefAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final CrossReference cTyperefType_declarationCrossReference_1_1_1_1_0 = (CrossReference)cTyperefAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cTyperefType_declarationIDTerminalRuleCall_1_1_1_1_0_1 = (RuleCall)cTyperefType_declarationCrossReference_1_1_1_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cClosureAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cClosureMCSClosureParserRuleCall_3_0_0 = (RuleCall)cClosureAssignment_3_0.eContents().get(0);
		private final Assignment cExp_bodyAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cExp_bodyXExpressionParserRuleCall_3_1_0 = (RuleCall)cExp_bodyAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////				 block_body = XBlockExpression ) ';' 						
		//function_declaration:
		//	name=ID ("(" arg+=argument ("," arg+=argument)* ")" ("returns" out=type_expression)? | ":" (ftype=UnnamedFunctionType
		//	| typeref=[type_declaration])) ":=" (closure=MCSClosure | exp_body=XExpression) // |
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("(" arg+=argument ("," arg+=argument)* ")" ("returns" out=type_expression)? | ":" (ftype=UnnamedFunctionType |
		//typeref=[type_declaration])) ":=" (closure=MCSClosure | exp_body=XExpression) // |
		//";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"(" arg+=argument ("," arg+=argument)* ")" ("returns" out=type_expression)? | ":" (ftype=UnnamedFunctionType |
		//typeref=[type_declaration])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" arg+=argument ("," arg+=argument)* ")" ("returns" out=type_expression)?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//arg+=argument
		public Assignment getArgAssignment_1_0_1() { return cArgAssignment_1_0_1; }

		//argument
		public RuleCall getArgArgumentParserRuleCall_1_0_1_0() { return cArgArgumentParserRuleCall_1_0_1_0; }

		//("," arg+=argument)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }

		//arg+=argument
		public Assignment getArgAssignment_1_0_2_1() { return cArgAssignment_1_0_2_1; }

		//argument
		public RuleCall getArgArgumentParserRuleCall_1_0_2_1_0() { return cArgArgumentParserRuleCall_1_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }

		//("returns" out=type_expression)?
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//"returns"
		public Keyword getReturnsKeyword_1_0_4_0() { return cReturnsKeyword_1_0_4_0; }

		//out=type_expression
		public Assignment getOutAssignment_1_0_4_1() { return cOutAssignment_1_0_4_1; }

		//type_expression
		public RuleCall getOutType_expressionParserRuleCall_1_0_4_1_0() { return cOutType_expressionParserRuleCall_1_0_4_1_0; }

		//":" (ftype=UnnamedFunctionType | typeref=[type_declaration])
		public Group getGroup_1_1() { return cGroup_1_1; }

		//":"
		public Keyword getColonKeyword_1_1_0() { return cColonKeyword_1_1_0; }

		//ftype=UnnamedFunctionType | typeref=[type_declaration]
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//ftype=UnnamedFunctionType
		public Assignment getFtypeAssignment_1_1_1_0() { return cFtypeAssignment_1_1_1_0; }

		//UnnamedFunctionType
		public RuleCall getFtypeUnnamedFunctionTypeParserRuleCall_1_1_1_0_0() { return cFtypeUnnamedFunctionTypeParserRuleCall_1_1_1_0_0; }

		//typeref=[type_declaration]
		public Assignment getTyperefAssignment_1_1_1_1() { return cTyperefAssignment_1_1_1_1; }

		//[type_declaration]
		public CrossReference getTyperefType_declarationCrossReference_1_1_1_1_0() { return cTyperefType_declarationCrossReference_1_1_1_1_0; }

		//ID
		public RuleCall getTyperefType_declarationIDTerminalRuleCall_1_1_1_1_0_1() { return cTyperefType_declarationIDTerminalRuleCall_1_1_1_1_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//closure=MCSClosure | exp_body=XExpression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//closure=MCSClosure
		public Assignment getClosureAssignment_3_0() { return cClosureAssignment_3_0; }

		//MCSClosure
		public RuleCall getClosureMCSClosureParserRuleCall_3_0_0() { return cClosureMCSClosureParserRuleCall_3_0_0; }

		//exp_body=XExpression
		public Assignment getExp_bodyAssignment_3_1() { return cExp_bodyAssignment_3_1; }

		//XExpression
		public RuleCall getExp_bodyXExpressionParserRuleCall_3_1_0() { return cExp_bodyXExpressionParserRuleCall_3_1_0; }

		//// |
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArg_typeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArg_typeType_expressionParserRuleCall_2_1_0 = (RuleCall)cArg_typeAssignment_2_1.eContents().get(0);
		
		//argument:
		//	{argument} name=ID (":" arg_type=type_expression)?;
		@Override public ParserRule getRule() { return rule; }

		//{argument} name=ID (":" arg_type=type_expression)?
		public Group getGroup() { return cGroup; }

		//{argument}
		public Action getArgumentAction_0() { return cArgumentAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(":" arg_type=type_expression)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//arg_type=type_expression
		public Assignment getArg_typeAssignment_2_1() { return cArg_typeAssignment_2_1; }

		//type_expression
		public RuleCall getArg_typeType_expressionParserRuleCall_2_1_0() { return cArg_typeType_expressionParserRuleCall_2_1_0; }
	}

	public class MCSClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cMCSClosureAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersArgumentParserRuleCall_1_0_0_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_1_0_0_0.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cGroup_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersArgumentParserRuleCall_1_0_0_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitSyntaxAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cExplicitSyntaxVerticalLineKeyword_1_0_1_0 = (Keyword)cExplicitSyntaxAssignment_1_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionInClosureParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MCSClosure returns XExpression:
		//	=> ({MCSClosure} "[") => ((declaredFormalParameters+=argument ("," declaredFormalParameters+=argument)*)?
		//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
		@Override public ParserRule getRule() { return rule; }

		//=> ({MCSClosure} "[") => ((declaredFormalParameters+=argument ("," declaredFormalParameters+=argument)*)?
		//explicitSyntax?="|")? expression=XExpressionInClosure "]"
		public Group getGroup() { return cGroup; }

		//=> ({MCSClosure} "[")
		public Group getGroup_0() { return cGroup_0; }

		//{MCSClosure} "["
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{MCSClosure}
		public Action getMCSClosureAction_0_0_0() { return cMCSClosureAction_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0_1() { return cLeftSquareBracketKeyword_0_0_1; }

		//=> ((declaredFormalParameters+=argument ("," declaredFormalParameters+=argument)*)? explicitSyntax?="|")?
		public Group getGroup_1() { return cGroup_1; }

		//(declaredFormalParameters+=argument ("," declaredFormalParameters+=argument)*)? explicitSyntax?="|"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//(declaredFormalParameters+=argument ("," declaredFormalParameters+=argument)*)?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//declaredFormalParameters+=argument
		public Assignment getDeclaredFormalParametersAssignment_1_0_0_0() { return cDeclaredFormalParametersAssignment_1_0_0_0; }

		//argument
		public RuleCall getDeclaredFormalParametersArgumentParserRuleCall_1_0_0_0_0() { return cDeclaredFormalParametersArgumentParserRuleCall_1_0_0_0_0; }

		//("," declaredFormalParameters+=argument)*
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_0_1_0() { return cCommaKeyword_1_0_0_1_0; }

		//declaredFormalParameters+=argument
		public Assignment getDeclaredFormalParametersAssignment_1_0_0_1_1() { return cDeclaredFormalParametersAssignment_1_0_0_1_1; }

		//argument
		public RuleCall getDeclaredFormalParametersArgumentParserRuleCall_1_0_0_1_1_0() { return cDeclaredFormalParametersArgumentParserRuleCall_1_0_0_1_1_0; }

		//explicitSyntax?="|"
		public Assignment getExplicitSyntaxAssignment_1_0_1() { return cExplicitSyntaxAssignment_1_0_1; }

		//"|"
		public Keyword getExplicitSyntaxVerticalLineKeyword_1_0_1_0() { return cExplicitSyntaxVerticalLineKeyword_1_0_1_0; }

		//expression=XExpressionInClosure
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpressionInClosure
		public RuleCall getExpressionXExpressionInClosureParserRuleCall_2_0() { return cExpressionXExpressionInClosureParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class Basic_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "basic_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBoolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBoolUnnamedBooleanTypeParserRuleCall_0_0 = (RuleCall)cBoolAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringUnnamedStringTypeParserRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		private final Assignment cEnumerAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEnumerUnnamedEnumerationTypeParserRuleCall_2_0 = (RuleCall)cEnumerAssignment_2.eContents().get(0);
		private final Assignment cUnitsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cUnitsUnnamedUnitsTypeParserRuleCall_3_0 = (RuleCall)cUnitsAssignment_3.eContents().get(0);
		private final Assignment cIntegerAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIntegerUnnamedIntegerTypeParserRuleCall_4_0 = (RuleCall)cIntegerAssignment_4.eContents().get(0);
		private final Assignment cRealAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cRealUnnamedRealTypeParserRuleCall_5_0 = (RuleCall)cRealAssignment_5.eContents().get(0);
		private final Assignment cRangeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cRangeUnnamedRangeTypeParserRuleCall_6_0 = (RuleCall)cRangeAssignment_6.eContents().get(0);
		private final Assignment cClassAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cClassUnnamedClassifierTypeParserRuleCall_7_0 = (RuleCall)cClassAssignment_7.eContents().get(0);
		private final Assignment cRefAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cRefUnnamedReferenceTypeParserRuleCall_8_0 = (RuleCall)cRefAssignment_8.eContents().get(0);
		private final Assignment cFuncAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cFuncUnnamedFunctionTypeParserRuleCall_9_0 = (RuleCall)cFuncAssignment_9.eContents().get(0);
		private final Assignment cTypenameAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final CrossReference cTypenameType_declarationCrossReference_10_0 = (CrossReference)cTypenameAssignment_10.eContents().get(0);
		private final RuleCall cTypenameType_declarationIDTerminalRuleCall_10_0_1 = (RuleCall)cTypenameType_declarationCrossReference_10_0.eContents().get(1);
		
		//basic_type:
		//	bool=UnnamedBooleanType | string=UnnamedStringType | enumer=UnnamedEnumerationType | units=UnnamedUnitsType |
		//	integer=UnnamedIntegerType | real=UnnamedRealType | range=UnnamedRangeType | class=UnnamedClassifierType |
		//	ref=UnnamedReferenceType | func=UnnamedFunctionType | typename=[type_declaration];
		@Override public ParserRule getRule() { return rule; }

		//bool=UnnamedBooleanType | string=UnnamedStringType | enumer=UnnamedEnumerationType | units=UnnamedUnitsType |
		//integer=UnnamedIntegerType | real=UnnamedRealType | range=UnnamedRangeType | class=UnnamedClassifierType |
		//ref=UnnamedReferenceType | func=UnnamedFunctionType | typename=[type_declaration]
		public Alternatives getAlternatives() { return cAlternatives; }

		//bool=UnnamedBooleanType
		public Assignment getBoolAssignment_0() { return cBoolAssignment_0; }

		//UnnamedBooleanType
		public RuleCall getBoolUnnamedBooleanTypeParserRuleCall_0_0() { return cBoolUnnamedBooleanTypeParserRuleCall_0_0; }

		//string=UnnamedStringType
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }

		//UnnamedStringType
		public RuleCall getStringUnnamedStringTypeParserRuleCall_1_0() { return cStringUnnamedStringTypeParserRuleCall_1_0; }

		//enumer=UnnamedEnumerationType
		public Assignment getEnumerAssignment_2() { return cEnumerAssignment_2; }

		//UnnamedEnumerationType
		public RuleCall getEnumerUnnamedEnumerationTypeParserRuleCall_2_0() { return cEnumerUnnamedEnumerationTypeParserRuleCall_2_0; }

		//units=UnnamedUnitsType
		public Assignment getUnitsAssignment_3() { return cUnitsAssignment_3; }

		//UnnamedUnitsType
		public RuleCall getUnitsUnnamedUnitsTypeParserRuleCall_3_0() { return cUnitsUnnamedUnitsTypeParserRuleCall_3_0; }

		//integer=UnnamedIntegerType
		public Assignment getIntegerAssignment_4() { return cIntegerAssignment_4; }

		//UnnamedIntegerType
		public RuleCall getIntegerUnnamedIntegerTypeParserRuleCall_4_0() { return cIntegerUnnamedIntegerTypeParserRuleCall_4_0; }

		//real=UnnamedRealType
		public Assignment getRealAssignment_5() { return cRealAssignment_5; }

		//UnnamedRealType
		public RuleCall getRealUnnamedRealTypeParserRuleCall_5_0() { return cRealUnnamedRealTypeParserRuleCall_5_0; }

		//range=UnnamedRangeType
		public Assignment getRangeAssignment_6() { return cRangeAssignment_6; }

		//UnnamedRangeType
		public RuleCall getRangeUnnamedRangeTypeParserRuleCall_6_0() { return cRangeUnnamedRangeTypeParserRuleCall_6_0; }

		//class=UnnamedClassifierType
		public Assignment getClassAssignment_7() { return cClassAssignment_7; }

		//UnnamedClassifierType
		public RuleCall getClassUnnamedClassifierTypeParserRuleCall_7_0() { return cClassUnnamedClassifierTypeParserRuleCall_7_0; }

		//ref=UnnamedReferenceType
		public Assignment getRefAssignment_8() { return cRefAssignment_8; }

		//UnnamedReferenceType
		public RuleCall getRefUnnamedReferenceTypeParserRuleCall_8_0() { return cRefUnnamedReferenceTypeParserRuleCall_8_0; }

		//func=UnnamedFunctionType
		public Assignment getFuncAssignment_9() { return cFuncAssignment_9; }

		//UnnamedFunctionType
		public RuleCall getFuncUnnamedFunctionTypeParserRuleCall_9_0() { return cFuncUnnamedFunctionTypeParserRuleCall_9_0; }

		//typename=[type_declaration]
		public Assignment getTypenameAssignment_10() { return cTypenameAssignment_10; }

		//[type_declaration]
		public CrossReference getTypenameType_declarationCrossReference_10_0() { return cTypenameType_declarationCrossReference_10_0; }

		//ID
		public RuleCall getTypenameType_declarationIDTerminalRuleCall_10_0_1() { return cTypenameType_declarationIDTerminalRuleCall_10_0_1; }
	}

	public class UnnamedBooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedBooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAadlbooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnnamedBooleanType returns aadl2::AadlBoolean:
		//	{aadl2::AadlBoolean} "aadlboolean";
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlBoolean} "aadlboolean"
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlBoolean}
		public Action getAadlBooleanAction_0() { return cAadlBooleanAction_0; }

		//"aadlboolean"
		public Keyword getAadlbooleanKeyword_1() { return cAadlbooleanKeyword_1; }
	}

	public class UnnamedStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAadlstringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UnnamedStringType returns aadl2::AadlString:
		//	{aadl2::AadlString} "aadlstring";
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlString} "aadlstring"
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlString}
		public Action getAadlStringAction_0() { return cAadlStringAction_0; }

		//"aadlstring"
		public Keyword getAadlstringKeyword_1() { return cAadlstringKeyword_1; }
	}

	public class UnnamedEnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedEnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedLiteralEnumerationLiteralParserRuleCall_2_0 = (RuleCall)cOwnedLiteralAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0 = (RuleCall)cOwnedLiteralAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnnamedEnumerationType returns aadl2::EnumerationType:
		//	"enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")"
		public Group getGroup() { return cGroup; }

		//"enumeration"
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ownedLiteral+=EnumerationLiteral
		public Assignment getOwnedLiteralAssignment_2() { return cOwnedLiteralAssignment_2; }

		//EnumerationLiteral
		public RuleCall getOwnedLiteralEnumerationLiteralParserRuleCall_2_0() { return cOwnedLiteralEnumerationLiteralParserRuleCall_2_0; }

		//("," ownedLiteral+=EnumerationLiteral)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ownedLiteral+=EnumerationLiteral
		public Assignment getOwnedLiteralAssignment_3_1() { return cOwnedLiteralAssignment_3_1; }

		//EnumerationLiteral
		public RuleCall getOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0() { return cOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteral returns aadl2::EnumerationLiteral:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class UnnamedUnitsTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedUnitsType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedLiteralUnitLiteralParserRuleCall_2_0 = (RuleCall)cOwnedLiteralAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0 = (RuleCall)cOwnedLiteralAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnnamedUnitsType returns aadl2::UnitsType:
		//	"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")"
		public Group getGroup() { return cGroup; }

		//"units"
		public Keyword getUnitsKeyword_0() { return cUnitsKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ownedLiteral+=UnitLiteral
		public Assignment getOwnedLiteralAssignment_2() { return cOwnedLiteralAssignment_2; }

		//UnitLiteral
		public RuleCall getOwnedLiteralUnitLiteralParserRuleCall_2_0() { return cOwnedLiteralUnitLiteralParserRuleCall_2_0; }

		//("," ownedLiteral+=UnitLiteralConversion)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ownedLiteral+=UnitLiteralConversion
		public Assignment getOwnedLiteralAssignment_3_1() { return cOwnedLiteralAssignment_3_1; }

		//UnitLiteralConversion
		public RuleCall getOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0() { return cOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class UnitLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UnitLiteral returns aadl2::UnitLiteral:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class UnitLiteralConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitLiteralConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBaseUnitUnitLiteralCrossReference_2_0 = (CrossReference)cBaseUnitAssignment_2.eContents().get(0);
		private final RuleCall cBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1 = (RuleCall)cBaseUnitUnitLiteralCrossReference_2_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFactorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFactorNumberValueParserRuleCall_4_0 = (RuleCall)cFactorAssignment_4.eContents().get(0);
		
		//UnitLiteralConversion returns aadl2::UnitLiteral:
		//	name=ID "=>" baseUnit=[aadl2::UnitLiteral] "*" factor=NumberValue;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=>" baseUnit=[aadl2::UnitLiteral] "*" factor=NumberValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//baseUnit=[aadl2::UnitLiteral]
		public Assignment getBaseUnitAssignment_2() { return cBaseUnitAssignment_2; }

		//[aadl2::UnitLiteral]
		public CrossReference getBaseUnitUnitLiteralCrossReference_2_0() { return cBaseUnitUnitLiteralCrossReference_2_0; }

		//ID
		public RuleCall getBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1() { return cBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }

		//factor=NumberValue
		public Assignment getFactorAssignment_4() { return cFactorAssignment_4; }

		//NumberValue
		public RuleCall getFactorNumberValueParserRuleCall_4_0() { return cFactorNumberValueParserRuleCall_4_0; }
	}

	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberValue returns aadl2::NumberValue:
		//	RealLit | => IntegerLit;
		@Override public ParserRule getRule() { return rule; }

		//RealLit | => IntegerLit
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealLit
		public RuleCall getRealLitParserRuleCall_0() { return cRealLitParserRuleCall_0; }

		//=> IntegerLit
		public RuleCall getIntegerLitParserRuleCall_1() { return cIntegerLitParserRuleCall_1; }
	}

	public class RealLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedRealParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealLit returns aadl2::RealLiteral:
		//	value=SignedReal;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedReal
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SignedReal
		public RuleCall getValueSignedRealParserRuleCall_0() { return cValueSignedRealParserRuleCall_0; }
	}

	public class IntegerLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLit returns aadl2::IntegerLiteral:
		//	value=SignedInt;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedInt
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0() { return cValueSignedIntParserRuleCall_0; }
	}

	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInt returns aadl2::Integer:
		//	("+" | "-")? //INTEGER_LIT 
		//	Number;
		@Override public ParserRule getRule() { return rule; }

		//("+" | "-")? //INTEGER_LIT 
		//Number
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		////INTEGER_LIT 
		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }
	}

	public class SignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedReal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedReal returns aadl2::Real:
		//	("+" | "-")? //REAL_LIT 
		//	Number;
		@Override public ParserRule getRule() { return rule; }

		//("+" | "-")? //REAL_LIT 
		//Number
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		////REAL_LIT 
		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }
	}

	public class UnnamedIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAadlintegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeIntegerRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedUnitsTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0 = (RuleCall)cOwnedUnitsTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cUnitsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cReferencedUnitsTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0 = (CrossReference)cReferencedUnitsTypeAssignment_3_1_1.eContents().get(0);
		private final RuleCall cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1 = (RuleCall)cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0.eContents().get(1);
		
		//UnnamedIntegerType returns aadl2::AadlInteger:
		//	{aadl2::AadlInteger} "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlInteger} "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlInteger}
		public Action getAadlIntegerAction_0() { return cAadlIntegerAction_0; }

		//"aadlinteger"
		public Keyword getAadlintegerKeyword_1() { return cAadlintegerKeyword_1; }

		//range=IntegerRange?
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//IntegerRange
		public RuleCall getRangeIntegerRangeParserRuleCall_2_0() { return cRangeIntegerRangeParserRuleCall_2_0; }

		//(ownedUnitsType=UnnamedUnitsType | "units" referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedUnitsType=UnnamedUnitsType
		public Assignment getOwnedUnitsTypeAssignment_3_0() { return cOwnedUnitsTypeAssignment_3_0; }

		//UnnamedUnitsType
		public RuleCall getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0() { return cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0; }

		//"units" referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"units"
		public Keyword getUnitsKeyword_3_1_0() { return cUnitsKeyword_3_1_0; }

		//referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Assignment getReferencedUnitsTypeAssignment_3_1_1() { return cReferencedUnitsTypeAssignment_3_1_1; }

		//[aadl2::UnitsType|QPREF]
		public CrossReference getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0() { return cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0; }

		//QPREF
		public RuleCall getReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1() { return cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1; }
	}

	public class IntegerRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLowerBoundAlternatives_0_0 = (Alternatives)cLowerBoundAssignment_0.eContents().get(0);
		private final RuleCall cLowerBoundIntegerTermParserRuleCall_0_0_0 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(0);
		private final RuleCall cLowerBoundSignedConstantParserRuleCall_0_0_1 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(1);
		private final RuleCall cLowerBoundConstantValueParserRuleCall_0_0_2 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cUpperBoundAlternatives_2_0 = (Alternatives)cUpperBoundAssignment_2.eContents().get(0);
		private final RuleCall cUpperBoundIntegerTermParserRuleCall_2_0_0 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(0);
		private final RuleCall cUpperBoundSignedConstantParserRuleCall_2_0_1 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(1);
		private final RuleCall cUpperBoundConstantValueParserRuleCall_2_0_2 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(2);
		
		//IntegerRange returns aadl2::NumericRange:
		//	lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant |
		//	ConstantValue);
		@Override public ParserRule getRule() { return rule; }

		//lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Group getGroup() { return cGroup; }

		//lowerBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }

		//IntegerTerm | SignedConstant | ConstantValue
		public Alternatives getLowerBoundAlternatives_0_0() { return cLowerBoundAlternatives_0_0; }

		//IntegerTerm
		public RuleCall getLowerBoundIntegerTermParserRuleCall_0_0_0() { return cLowerBoundIntegerTermParserRuleCall_0_0_0; }

		//SignedConstant
		public RuleCall getLowerBoundSignedConstantParserRuleCall_0_0_1() { return cLowerBoundSignedConstantParserRuleCall_0_0_1; }

		//ConstantValue
		public RuleCall getLowerBoundConstantValueParserRuleCall_0_0_2() { return cLowerBoundConstantValueParserRuleCall_0_0_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upperBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }

		//IntegerTerm | SignedConstant | ConstantValue
		public Alternatives getUpperBoundAlternatives_2_0() { return cUpperBoundAlternatives_2_0; }

		//IntegerTerm
		public RuleCall getUpperBoundIntegerTermParserRuleCall_2_0_0() { return cUpperBoundIntegerTermParserRuleCall_2_0_0; }

		//SignedConstant
		public RuleCall getUpperBoundSignedConstantParserRuleCall_2_0_1() { return cUpperBoundSignedConstantParserRuleCall_2_0_1; }

		//ConstantValue
		public RuleCall getUpperBoundConstantValueParserRuleCall_2_0_2() { return cUpperBoundConstantValueParserRuleCall_2_0_2; }
	}

	public class IntegerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSignedIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//IntegerTerm returns aadl2::IntegerLiteral:
		//	value=SignedInt unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedInt unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=SignedInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0_0() { return cValueSignedIntParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class SignedConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignedConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpPlusMinusParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cOwnedPropertyExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedPropertyExpressionConstantValueParserRuleCall_1_0 = (RuleCall)cOwnedPropertyExpressionAssignment_1.eContents().get(0);
		
		//SignedConstant returns aadl2::Operation:
		//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
		@Override public ParserRule getRule() { return rule; }

		//op=PlusMinus ownedPropertyExpression+=ConstantValue
		public Group getGroup() { return cGroup; }

		//op=PlusMinus
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//PlusMinus
		public RuleCall getOpPlusMinusParserRuleCall_0_0() { return cOpPlusMinusParserRuleCall_0_0; }

		//ownedPropertyExpression+=ConstantValue
		public Assignment getOwnedPropertyExpressionAssignment_1() { return cOwnedPropertyExpressionAssignment_1; }

		//ConstantValue
		public RuleCall getOwnedPropertyExpressionConstantValueParserRuleCall_1_0() { return cOwnedPropertyExpressionConstantValueParserRuleCall_1_0; }
	}

	public class PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusMinus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PlusMinus returns aadl2::OperationKind:
		//	"+" | "-";
		@Override public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantValue");
		private final Assignment cNamedValueAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNamedValuePropertyConstantCrossReference_0 = (CrossReference)cNamedValueAssignment.eContents().get(0);
		private final RuleCall cNamedValuePropertyConstantQPREFParserRuleCall_0_1 = (RuleCall)cNamedValuePropertyConstantCrossReference_0.eContents().get(1);
		
		//ConstantValue returns aadl2::NamedValue:
		//	namedValue=[aadl2::PropertyConstant|QPREF];
		@Override public ParserRule getRule() { return rule; }

		//namedValue=[aadl2::PropertyConstant|QPREF]
		public Assignment getNamedValueAssignment() { return cNamedValueAssignment; }

		//[aadl2::PropertyConstant|QPREF]
		public CrossReference getNamedValuePropertyConstantCrossReference_0() { return cNamedValuePropertyConstantCrossReference_0; }

		//QPREF
		public RuleCall getNamedValuePropertyConstantQPREFParserRuleCall_0_1() { return cNamedValuePropertyConstantQPREFParserRuleCall_0_1; }
	}

	public class UnnamedRealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedRealType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlRealAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAadlrealKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeRealRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedUnitsTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0 = (RuleCall)cOwnedUnitsTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cUnitsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cReferencedUnitsTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0 = (CrossReference)cReferencedUnitsTypeAssignment_3_1_1.eContents().get(0);
		private final RuleCall cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1 = (RuleCall)cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0.eContents().get(1);
		
		//UnnamedRealType returns aadl2::AadlReal:
		//	{aadl2::AadlReal} "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlReal} "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlReal}
		public Action getAadlRealAction_0() { return cAadlRealAction_0; }

		//"aadlreal"
		public Keyword getAadlrealKeyword_1() { return cAadlrealKeyword_1; }

		//range=RealRange?
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//RealRange
		public RuleCall getRangeRealRangeParserRuleCall_2_0() { return cRangeRealRangeParserRuleCall_2_0; }

		//(ownedUnitsType=UnnamedUnitsType | "units" referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedUnitsType=UnnamedUnitsType
		public Assignment getOwnedUnitsTypeAssignment_3_0() { return cOwnedUnitsTypeAssignment_3_0; }

		//UnnamedUnitsType
		public RuleCall getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0() { return cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0; }

		//"units" referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"units"
		public Keyword getUnitsKeyword_3_1_0() { return cUnitsKeyword_3_1_0; }

		//referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Assignment getReferencedUnitsTypeAssignment_3_1_1() { return cReferencedUnitsTypeAssignment_3_1_1; }

		//[aadl2::UnitsType|QPREF]
		public CrossReference getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0() { return cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0; }

		//QPREF
		public RuleCall getReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1() { return cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1; }
	}

	public class RealRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLowerBoundAlternatives_0_0 = (Alternatives)cLowerBoundAssignment_0.eContents().get(0);
		private final RuleCall cLowerBoundRealTermParserRuleCall_0_0_0 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(0);
		private final RuleCall cLowerBoundSignedConstantParserRuleCall_0_0_1 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(1);
		private final RuleCall cLowerBoundConstantValueParserRuleCall_0_0_2 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cUpperBoundAlternatives_2_0 = (Alternatives)cUpperBoundAssignment_2.eContents().get(0);
		private final RuleCall cUpperBoundRealTermParserRuleCall_2_0_0 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(0);
		private final RuleCall cUpperBoundSignedConstantParserRuleCall_2_0_1 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(1);
		private final RuleCall cUpperBoundConstantValueParserRuleCall_2_0_2 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(2);
		
		//RealRange returns aadl2::NumericRange:
		//	lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue);
		@Override public ParserRule getRule() { return rule; }

		//lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue)
		public Group getGroup() { return cGroup; }

		//lowerBound=(RealTerm | SignedConstant | ConstantValue)
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }

		//RealTerm | SignedConstant | ConstantValue
		public Alternatives getLowerBoundAlternatives_0_0() { return cLowerBoundAlternatives_0_0; }

		//RealTerm
		public RuleCall getLowerBoundRealTermParserRuleCall_0_0_0() { return cLowerBoundRealTermParserRuleCall_0_0_0; }

		//SignedConstant
		public RuleCall getLowerBoundSignedConstantParserRuleCall_0_0_1() { return cLowerBoundSignedConstantParserRuleCall_0_0_1; }

		//ConstantValue
		public RuleCall getLowerBoundConstantValueParserRuleCall_0_0_2() { return cLowerBoundConstantValueParserRuleCall_0_0_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upperBound=(RealTerm | SignedConstant | ConstantValue)
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }

		//RealTerm | SignedConstant | ConstantValue
		public Alternatives getUpperBoundAlternatives_2_0() { return cUpperBoundAlternatives_2_0; }

		//RealTerm
		public RuleCall getUpperBoundRealTermParserRuleCall_2_0_0() { return cUpperBoundRealTermParserRuleCall_2_0_0; }

		//SignedConstant
		public RuleCall getUpperBoundSignedConstantParserRuleCall_2_0_1() { return cUpperBoundSignedConstantParserRuleCall_2_0_1; }

		//ConstantValue
		public RuleCall getUpperBoundConstantValueParserRuleCall_2_0_2() { return cUpperBoundConstantValueParserRuleCall_2_0_2; }
	}

	public class RealTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueSignedRealParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//RealTerm returns aadl2::RealLiteral:
		//	value=SignedReal unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedReal unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=SignedReal
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//SignedReal
		public RuleCall getValueSignedRealParserRuleCall_0_0() { return cValueSignedRealParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnnamedRangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedRangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRangeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedNumberTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Alternatives cOwnedNumberTypeAlternatives_3_0_0 = (Alternatives)cOwnedNumberTypeAssignment_3_0.eContents().get(0);
		private final RuleCall cOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_3_0_0_0 = (RuleCall)cOwnedNumberTypeAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cOwnedNumberTypeUnnamedRealTypeParserRuleCall_3_0_0_1 = (RuleCall)cOwnedNumberTypeAlternatives_3_0_0.eContents().get(1);
		private final Assignment cNumberTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cNumberTypeNumberTypeCrossReference_3_1_0 = (CrossReference)cNumberTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cNumberTypeNumberTypeQPREFParserRuleCall_3_1_0_1 = (RuleCall)cNumberTypeNumberTypeCrossReference_3_1_0.eContents().get(1);
		
		//UnnamedRangeType returns aadl2::RangeType:
		//	{aadl2::RangeType} "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
		//	numberType=[aadl2::NumberType|QPREF]);
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::RangeType} "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
		//numberType=[aadl2::NumberType|QPREF])
		public Group getGroup() { return cGroup; }

		//{aadl2::RangeType}
		public Action getRangeTypeAction_0() { return cRangeTypeAction_0; }

		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }

		//"of"
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }

		//ownedNumberType=(UnnamedIntegerType | UnnamedRealType) | numberType=[aadl2::NumberType|QPREF]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedNumberType=(UnnamedIntegerType | UnnamedRealType)
		public Assignment getOwnedNumberTypeAssignment_3_0() { return cOwnedNumberTypeAssignment_3_0; }

		//UnnamedIntegerType | UnnamedRealType
		public Alternatives getOwnedNumberTypeAlternatives_3_0_0() { return cOwnedNumberTypeAlternatives_3_0_0; }

		//UnnamedIntegerType
		public RuleCall getOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_3_0_0_0() { return cOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_3_0_0_0; }

		//UnnamedRealType
		public RuleCall getOwnedNumberTypeUnnamedRealTypeParserRuleCall_3_0_0_1() { return cOwnedNumberTypeUnnamedRealTypeParserRuleCall_3_0_0_1; }

		//numberType=[aadl2::NumberType|QPREF]
		public Assignment getNumberTypeAssignment_3_1() { return cNumberTypeAssignment_3_1; }

		//[aadl2::NumberType|QPREF]
		public CrossReference getNumberTypeNumberTypeCrossReference_3_1_0() { return cNumberTypeNumberTypeCrossReference_3_1_0; }

		//QPREF
		public RuleCall getNumberTypeNumberTypeQPREFParserRuleCall_3_1_0_1() { return cNumberTypeNumberTypeQPREFParserRuleCall_3_1_0_1; }
	}

	public class UnnamedClassifierTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedClassifierType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassifierTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassifierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClassifierReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClassifierReferenceQMReferenceParserRuleCall_2_1_0 = (RuleCall)cClassifierReferenceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cClassifierReferenceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cClassifierReferenceQMReferenceParserRuleCall_2_2_1_0 = (RuleCall)cClassifierReferenceAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//UnnamedClassifierType returns aadl2::ClassifierType:
		//	{aadl2::ClassifierType} "classifier" ("(" classifierReference+=QMReference ("," classifierReference+=QMReference)*
		//	")")?;
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::ClassifierType} "classifier" ("(" classifierReference+=QMReference ("," classifierReference+=QMReference)* ")")?
		public Group getGroup() { return cGroup; }

		//{aadl2::ClassifierType}
		public Action getClassifierTypeAction_0() { return cClassifierTypeAction_0; }

		//"classifier"
		public Keyword getClassifierKeyword_1() { return cClassifierKeyword_1; }

		//("(" classifierReference+=QMReference ("," classifierReference+=QMReference)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//classifierReference+=QMReference
		public Assignment getClassifierReferenceAssignment_2_1() { return cClassifierReferenceAssignment_2_1; }

		//QMReference
		public RuleCall getClassifierReferenceQMReferenceParserRuleCall_2_1_0() { return cClassifierReferenceQMReferenceParserRuleCall_2_1_0; }

		//("," classifierReference+=QMReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//classifierReference+=QMReference
		public Assignment getClassifierReferenceAssignment_2_2_1() { return cClassifierReferenceAssignment_2_2_1; }

		//QMReference
		public RuleCall getClassifierReferenceQMReferenceParserRuleCall_2_2_1_0() { return cClassifierReferenceQMReferenceParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class UnnamedReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedReferenceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReferenceTypeAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamedElementReferenceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamedElementReferenceQMReferenceParserRuleCall_2_1_0 = (RuleCall)cNamedElementReferenceAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cNamedElementReferenceAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNamedElementReferenceQMReferenceParserRuleCall_2_2_1_0 = (RuleCall)cNamedElementReferenceAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//UnnamedReferenceType returns aadl2::ReferenceType:
		//	"reference" {aadl2::ReferenceType} ("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)*
		//	")")?;
		@Override public ParserRule getRule() { return rule; }

		//"reference" {aadl2::ReferenceType} ("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)*
		//")")?
		public Group getGroup() { return cGroup; }

		//"reference"
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }

		//{aadl2::ReferenceType}
		public Action getReferenceTypeAction_1() { return cReferenceTypeAction_1; }

		//("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//namedElementReference+=QMReference
		public Assignment getNamedElementReferenceAssignment_2_1() { return cNamedElementReferenceAssignment_2_1; }

		//QMReference
		public RuleCall getNamedElementReferenceQMReferenceParserRuleCall_2_1_0() { return cNamedElementReferenceQMReferenceParserRuleCall_2_1_0; }

		//("," namedElementReference+=QMReference)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//namedElementReference+=QMReference
		public Assignment getNamedElementReferenceAssignment_2_2_1() { return cNamedElementReferenceAssignment_2_2_1; }

		//QMReference
		public RuleCall getNamedElementReferenceQMReferenceParserRuleCall_2_2_1_0() { return cNamedElementReferenceQMReferenceParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class QMReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QMReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAnnexNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnexNameIDTerminalRuleCall_0_1_0 = (RuleCall)cAnnexNameAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cMetaclassNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMetaclassNameIDTerminalRuleCall_1_0 = (RuleCall)cMetaclassNameAssignment_1.eContents().get(0);
		
		//QMReference returns aadl2::MetaclassReference:
		//	("{" annexName=ID "}" "*" "*")? metaclassName+=ID+;
		@Override public ParserRule getRule() { return rule; }

		//("{" annexName=ID "}" "*" "*")? metaclassName+=ID+
		public Group getGroup() { return cGroup; }

		//("{" annexName=ID "}" "*" "*")?
		public Group getGroup_0() { return cGroup_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }

		//annexName=ID
		public Assignment getAnnexNameAssignment_0_1() { return cAnnexNameAssignment_0_1; }

		//ID
		public RuleCall getAnnexNameIDTerminalRuleCall_0_1_0() { return cAnnexNameIDTerminalRuleCall_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }

		//"*"
		public Keyword getAsteriskKeyword_0_3() { return cAsteriskKeyword_0_3; }

		//"*"
		public Keyword getAsteriskKeyword_0_4() { return cAsteriskKeyword_0_4; }

		//metaclassName+=ID+
		public Assignment getMetaclassNameAssignment_1() { return cMetaclassNameAssignment_1; }

		//ID
		public RuleCall getMetaclassNameIDTerminalRuleCall_1_0() { return cMetaclassNameIDTerminalRuleCall_1_0; }
	}

	public class QCReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QCReference");
		private final Assignment cClassifierAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cClassifierComponentClassifierCrossReference_0 = (CrossReference)cClassifierAssignment.eContents().get(0);
		private final RuleCall cClassifierComponentClassifierFQCREFParserRuleCall_0_1 = (RuleCall)cClassifierComponentClassifierCrossReference_0.eContents().get(1);
		
		//QCReference returns aadl2::ClassifierValue:
		//	classifier=[aadl2::ComponentClassifier|FQCREF];
		@Override public ParserRule getRule() { return rule; }

		//classifier=[aadl2::ComponentClassifier|FQCREF]
		public Assignment getClassifierAssignment() { return cClassifierAssignment; }

		//[aadl2::ComponentClassifier|FQCREF]
		public CrossReference getClassifierComponentClassifierCrossReference_0() { return cClassifierComponentClassifierCrossReference_0; }

		//FQCREF
		public RuleCall getClassifierComponentClassifierFQCREFParserRuleCall_0_1() { return cClassifierComponentClassifierFQCREFParserRuleCall_0_1; }
	}

	public class UnnamedFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParmAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParmType_expressionParserRuleCall_1_0 = (RuleCall)cParmAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParmAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParmType_expressionParserRuleCall_2_1_0 = (RuleCall)cParmAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOutspecAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cOutspecReturnsKeyword_4_0_0 = (Keyword)cOutspecAssignment_4_0.eContents().get(0);
		private final Assignment cResultAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cResultType_expressionParserRuleCall_4_1_0 = (RuleCall)cResultAssignment_4_1.eContents().get(0);
		
		//UnnamedFunctionType:
		//	"(" parm+=type_expression? ("," parm+=type_expression)+ ")" (outspec?="returns" result=type_expression)?;
		@Override public ParserRule getRule() { return rule; }

		//"(" parm+=type_expression? ("," parm+=type_expression)+ ")" (outspec?="returns" result=type_expression)?
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//parm+=type_expression?
		public Assignment getParmAssignment_1() { return cParmAssignment_1; }

		//type_expression
		public RuleCall getParmType_expressionParserRuleCall_1_0() { return cParmType_expressionParserRuleCall_1_0; }

		//("," parm+=type_expression)+
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parm+=type_expression
		public Assignment getParmAssignment_2_1() { return cParmAssignment_2_1; }

		//type_expression
		public RuleCall getParmType_expressionParserRuleCall_2_1_0() { return cParmType_expressionParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(outspec?="returns" result=type_expression)?
		public Group getGroup_4() { return cGroup_4; }

		//outspec?="returns"
		public Assignment getOutspecAssignment_4_0() { return cOutspecAssignment_4_0; }

		//"returns"
		public Keyword getOutspecReturnsKeyword_4_0_0() { return cOutspecReturnsKeyword_4_0_0; }

		//result=type_expression
		public Assignment getResultAssignment_4_1() { return cResultAssignment_4_1; }

		//type_expression
		public RuleCall getResultType_expressionParserRuleCall_4_1_0() { return cResultType_expressionParserRuleCall_4_1_0; }
	}

	public class FQCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//// fully qualified classifier name (always includes package name
		//FQCREF:
		//	(ID "::")+ ID ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//(ID "::")+ ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")+
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_expression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//constant_expression:
		//	expression;
		@Override public ParserRule getRule() { return rule; }

		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class QCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//QCREF:
		//	(ID "::")* ID ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//(ID "::")* ID ("." ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("." ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class QPREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QPREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QPREF:
		//	ID ("::" ID)?;
		@Override public ParserRule getRule() { return rule; }

		//ID ("::" ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("::" ID)?
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final MCSGrammarRootElements pMCSGrammarRoot;
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final MCSAnnexLibraryElements pMCSAnnexLibrary;
	private final MCSViewpointElements pMCSViewpoint;
	private final Enforcement_policyElements pEnforcement_policy;
	private final PackageScriptElements pPackageScript;
	private final AppliesToClauseElements pAppliesToClause;
	private final ClassifierCategoryElements pClassifierCategory;
	private final FeatureGroupClassifierReferenceElements pFeatureGroupClassifierReference;
	private final ViewpointReferenceElements pViewpointReference;
	private final ConstraintsBlockElements pConstraintsBlock;
	private final Labelled_check_statementElements pLabelled_check_statement;
	private final Check_statementElements pCheck_statement;
	private final Block_label_idElements pBlock_label_id;
	private final Check_label_idElements pCheck_label_id;
	private final Check_theoremElements pCheck_theorem;
	private final ModeSpecElements pModeSpec;
	private final ModeNameElements pModeName;
	private final Check_assertionElements pCheck_assertion;
	private final Root_elementElements pRoot_element;
	private final Element_referenceElements pElement_reference;
	private final PackageEnforceElements pPackageEnforce;
	private final ExpressionElements pExpression;
	private final Assertion_expressionElements pAssertion_expression;
	private final String_expressionElements pString_expression;
	private final MCSAnnexSubclauseElements pMCSAnnexSubclause;
	private final ClassifierEnforceElements pClassifierEnforce;
	private final ClassifierScriptElements pClassifierScript;
	private final Theorem_declarationElements pTheorem_declaration;
	private final In_modes_listElements pIn_modes_list;
	private final Local_declarationElements pLocal_declaration;
	private final Theorem_statementElements pTheorem_statement;
	private final Type_declarationElements pType_declaration;
	private final Type_expressionElements pType_expression;
	private final Function_declarationElements pFunction_declaration;
	private final ArgumentElements pArgument;
	private final MCSClosureElements pMCSClosure;
	private final Basic_typeElements pBasic_type;
	private final UnnamedBooleanTypeElements pUnnamedBooleanType;
	private final UnnamedStringTypeElements pUnnamedStringType;
	private final UnnamedEnumerationTypeElements pUnnamedEnumerationType;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final UnnamedUnitsTypeElements pUnnamedUnitsType;
	private final UnitLiteralElements pUnitLiteral;
	private final UnitLiteralConversionElements pUnitLiteralConversion;
	private final NumberValueElements pNumberValue;
	private final RealLitElements pRealLit;
	private final IntegerLitElements pIntegerLit;
	private final SignedIntElements pSignedInt;
	private final SignedRealElements pSignedReal;
	private final UnnamedIntegerTypeElements pUnnamedIntegerType;
	private final IntegerRangeElements pIntegerRange;
	private final IntegerTermElements pIntegerTerm;
	private final SignedConstantElements pSignedConstant;
	private final PlusMinusElements pPlusMinus;
	private final ConstantValueElements pConstantValue;
	private final UnnamedRealTypeElements pUnnamedRealType;
	private final RealRangeElements pRealRange;
	private final RealTermElements pRealTerm;
	private final UnnamedRangeTypeElements pUnnamedRangeType;
	private final UnnamedClassifierTypeElements pUnnamedClassifierType;
	private final UnnamedReferenceTypeElements pUnnamedReferenceType;
	private final QMReferenceElements pQMReference;
	private final QCReferenceElements pQCReference;
	private final UnnamedFunctionTypeElements pUnnamedFunctionType;
	private final FQCREFElements pFQCREF;
	private final Constant_expressionElements pConstant_expression;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tID;
	private final QCREFElements pQCREF;
	private final QPREFElements pQPREF;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public MCSGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pMCSGrammarRoot = new MCSGrammarRootElements();
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pMCSAnnexLibrary = new MCSAnnexLibraryElements();
		this.pMCSViewpoint = new MCSViewpointElements();
		this.pEnforcement_policy = new Enforcement_policyElements();
		this.pPackageScript = new PackageScriptElements();
		this.pAppliesToClause = new AppliesToClauseElements();
		this.pClassifierCategory = new ClassifierCategoryElements();
		this.pFeatureGroupClassifierReference = new FeatureGroupClassifierReferenceElements();
		this.pViewpointReference = new ViewpointReferenceElements();
		this.pConstraintsBlock = new ConstraintsBlockElements();
		this.pLabelled_check_statement = new Labelled_check_statementElements();
		this.pCheck_statement = new Check_statementElements();
		this.pBlock_label_id = new Block_label_idElements();
		this.pCheck_label_id = new Check_label_idElements();
		this.pCheck_theorem = new Check_theoremElements();
		this.pModeSpec = new ModeSpecElements();
		this.pModeName = new ModeNameElements();
		this.pCheck_assertion = new Check_assertionElements();
		this.pRoot_element = new Root_elementElements();
		this.pElement_reference = new Element_referenceElements();
		this.pPackageEnforce = new PackageEnforceElements();
		this.pExpression = new ExpressionElements();
		this.pAssertion_expression = new Assertion_expressionElements();
		this.pString_expression = new String_expressionElements();
		this.pMCSAnnexSubclause = new MCSAnnexSubclauseElements();
		this.pClassifierEnforce = new ClassifierEnforceElements();
		this.pClassifierScript = new ClassifierScriptElements();
		this.pTheorem_declaration = new Theorem_declarationElements();
		this.pIn_modes_list = new In_modes_listElements();
		this.pLocal_declaration = new Local_declarationElements();
		this.pTheorem_statement = new Theorem_statementElements();
		this.pType_declaration = new Type_declarationElements();
		this.pType_expression = new Type_expressionElements();
		this.pFunction_declaration = new Function_declarationElements();
		this.pArgument = new ArgumentElements();
		this.pMCSClosure = new MCSClosureElements();
		this.pBasic_type = new Basic_typeElements();
		this.pUnnamedBooleanType = new UnnamedBooleanTypeElements();
		this.pUnnamedStringType = new UnnamedStringTypeElements();
		this.pUnnamedEnumerationType = new UnnamedEnumerationTypeElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.pUnnamedUnitsType = new UnnamedUnitsTypeElements();
		this.pUnitLiteral = new UnitLiteralElements();
		this.pUnitLiteralConversion = new UnitLiteralConversionElements();
		this.pNumberValue = new NumberValueElements();
		this.pRealLit = new RealLitElements();
		this.pIntegerLit = new IntegerLitElements();
		this.pSignedInt = new SignedIntElements();
		this.pSignedReal = new SignedRealElements();
		this.pUnnamedIntegerType = new UnnamedIntegerTypeElements();
		this.pIntegerRange = new IntegerRangeElements();
		this.pIntegerTerm = new IntegerTermElements();
		this.pSignedConstant = new SignedConstantElements();
		this.pPlusMinus = new PlusMinusElements();
		this.pConstantValue = new ConstantValueElements();
		this.pUnnamedRealType = new UnnamedRealTypeElements();
		this.pRealRange = new RealRangeElements();
		this.pRealTerm = new RealTermElements();
		this.pUnnamedRangeType = new UnnamedRangeTypeElements();
		this.pUnnamedClassifierType = new UnnamedClassifierTypeElements();
		this.pUnnamedReferenceType = new UnnamedReferenceTypeElements();
		this.pQMReference = new QMReferenceElements();
		this.pQCReference = new QCReferenceElements();
		this.pUnnamedFunctionType = new UnnamedFunctionTypeElements();
		this.pFQCREF = new FQCREFElements();
		this.pConstant_expression = new Constant_expressionElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.pQCREF = new QCREFElements();
		this.pQPREF = new QPREFElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.xtext.aadl2.mcs.MCS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//MCSGrammarRoot:
	//	lib=MCSAnnexLibrary | "sub" subclause=MCSAnnexSubclause;
	public MCSGrammarRootElements getMCSGrammarRootAccess() {
		return pMCSGrammarRoot;
	}
	
	public ParserRule getMCSGrammarRootRule() {
		return getMCSGrammarRootAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary:
	//	MCSAnnexLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	MCSAnnexSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//MCSAnnexLibrary:
	//	{MCSAnnexLibrary} ("types" types+=type_declaration+)? ("functions" functions+=function_declaration+)? ("theorems"
	//	theorems+=theorem_declaration+)? (viewpoints+=MCSViewpoint viewpoints+=MCSViewpoint*)?
	//	(enforceclauses+=PackageEnforce enforceclauses+=PackageEnforce*)?;
	public MCSAnnexLibraryElements getMCSAnnexLibraryAccess() {
		return pMCSAnnexLibrary;
	}
	
	public ParserRule getMCSAnnexLibraryRule() {
		return getMCSAnnexLibraryAccess().getRule();
	}

	//MCSViewpoint:
	//	"viewpoint" name=ID policy=Enforcement_policy pscript=PackageScript?;
	public MCSViewpointElements getMCSViewpointAccess() {
		return pMCSViewpoint;
	}
	
	public ParserRule getMCSViewpointRule() {
		return getMCSViewpointAccess().getRule();
	}

	//Enforcement_policy:
	//	(pack?="package" | class?="classifier") "contract";
	public Enforcement_policyElements getEnforcement_policyAccess() {
		return pEnforcement_policy;
	}
	
	public ParserRule getEnforcement_policyRule() {
		return getEnforcement_policyAccess().getRule();
	}

	//PackageScript:
	//	"script" (applies+=AppliesToClause c_block+=ConstraintsBlock+)* "endscript" ref=ViewpointReference ";";
	public PackageScriptElements getPackageScriptAccess() {
		return pPackageScript;
	}
	
	public ParserRule getPackageScriptRule() {
		return getPackageScriptAccess().getRule();
	}

	//AppliesToClause:
	//	"applies" "to" (all?="all" //					ref_to_c = ComponentClassifierReference //|
	//	//					ref_to_f = FeatureGroupClassifierReference				
	//	| category= //|
	//	ClassifierCategory);
	public AppliesToClauseElements getAppliesToClauseAccess() {
		return pAppliesToClause;
	}
	
	public ParserRule getAppliesToClauseRule() {
		return getAppliesToClauseAccess().getRule();
	}

	//ClassifierCategory:
	//	{ClassifierCategory} (component="ComponentCategory" ct=[aadl2::ComponentType|QCREF]? (impl?="implementation"
	//	ci=[aadl2::ComponentImplementation|QCREF]?)? | feat_g?="feature group" ref_to_f=FeatureGroupClassifierReference?);
	public ClassifierCategoryElements getClassifierCategoryAccess() {
		return pClassifierCategory;
	}
	
	public ParserRule getClassifierCategoryRule() {
		return getClassifierCategoryAccess().getRule();
	}

	////ComponentClassifierReference : 
	////	(ct = [aadl2::ComponentType|QCREF]   | 
	////    ci = [aadl2::ComponentImplementation|QCREF] 
	////	)
	////;
	//FeatureGroupClassifierReference:
	//	fg=[aadl2::FeatureGroupType|QCREF];
	public FeatureGroupClassifierReferenceElements getFeatureGroupClassifierReferenceAccess() {
		return pFeatureGroupClassifierReference;
	}
	
	public ParserRule getFeatureGroupClassifierReferenceRule() {
		return getFeatureGroupClassifierReferenceAccess().getRule();
	}

	//ViewpointReference:
	//	policy=[Enforcement_policy]? vp_ref=[MCSViewpoint];
	public ViewpointReferenceElements getViewpointReferenceAccess() {
		return pViewpointReference;
	}
	
	public ParserRule getViewpointReferenceRule() {
		return getViewpointReferenceAccess().getRule();
	}

	//ConstraintsBlock:
	//	(b_label=block_label_id ":")? "{" cs+=labelled_check_statement+ "}";
	public ConstraintsBlockElements getConstraintsBlockAccess() {
		return pConstraintsBlock;
	}
	
	public ParserRule getConstraintsBlockRule() {
		return getConstraintsBlockAccess().getRule();
	}

	//labelled_check_statement:
	//	(c_label=check_label_id ":")? cs=check_statement;
	public Labelled_check_statementElements getLabelled_check_statementAccess() {
		return pLabelled_check_statement;
	}
	
	public ParserRule getLabelled_check_statementRule() {
		return getLabelled_check_statementAccess().getRule();
	}

	//check_statement:
	//	check_theorem | check_assertion;
	public Check_statementElements getCheck_statementAccess() {
		return pCheck_statement;
	}
	
	public ParserRule getCheck_statementRule() {
		return getCheck_statementAccess().getRule();
	}

	//block_label_id:
	//	name=ID;
	public Block_label_idElements getBlock_label_idAccess() {
		return pBlock_label_id;
	}
	
	public ParserRule getBlock_label_idRule() {
		return getBlock_label_idAccess().getRule();
	}

	//check_label_id:
	//	name=ID;
	public Check_label_idElements getCheck_label_idAccess() {
		return pCheck_label_id;
	}
	
	public ParserRule getCheck_label_idRule() {
		return getCheck_label_idAccess().getRule();
	}

	//check_theorem:
	//	"check" "theorem" theo=[theorem_declaration] ("(" root=root_element ")")? inmode=ModeSpec? ("fail"
	//	str=string_expression)? ";";
	public Check_theoremElements getCheck_theoremAccess() {
		return pCheck_theorem;
	}
	
	public ParserRule getCheck_theoremRule() {
		return getCheck_theoremAccess().getRule();
	}

	//ModeSpec:
	//	"in" "mode" mode=ModeName;
	public ModeSpecElements getModeSpecAccess() {
		return pModeSpec;
	}
	
	public ParserRule getModeSpecRule() {
		return getModeSpecAccess().getRule();
	}

	//ModeName:
	//	name= //temporary
	//	ID;
	public ModeNameElements getModeNameAccess() {
		return pModeName;
	}
	
	public ParserRule getModeNameRule() {
		return getModeNameAccess().getRule();
	}

	//check_assertion:
	//	"check" root=root_element? inmode=ModeSpec? "(" expr=assertion_expression ")" ("fail" str=string_expression)? ";";
	public Check_assertionElements getCheck_assertionAccess() {
		return pCheck_assertion;
	}
	
	public ParserRule getCheck_assertionRule() {
		return getCheck_assertionAccess().getRule();
	}

	//root_element:
	//	element_reference;
	public Root_elementElements getRoot_elementAccess() {
		return pRoot_element;
	}
	
	public ParserRule getRoot_elementRule() {
		return getRoot_elementAccess().getRule();
	}

	////temporary
	//element_reference:
	//	name=ID;
	public Element_referenceElements getElement_referenceAccess() {
		return pElement_reference;
	}
	
	public ParserRule getElement_referenceRule() {
		return getElement_referenceAccess().getRule();
	}

	//PackageEnforce:
	//	"enforce" viewpoint=[MCSViewpoint] //temporary
	//	";";
	public PackageEnforceElements getPackageEnforceAccess() {
		return pPackageEnforce;
	}
	
	public ParserRule getPackageEnforceRule() {
		return getPackageEnforceAccess().getRule();
	}

	//expression:
	//	name=XExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//assertion_expression:
	//	expr=expression;
	public Assertion_expressionElements getAssertion_expressionAccess() {
		return pAssertion_expression;
	}
	
	public ParserRule getAssertion_expressionRule() {
		return getAssertion_expressionAccess().getRule();
	}

	//string_expression:
	//	expr=expression;
	public String_expressionElements getString_expressionAccess() {
		return pString_expression;
	}
	
	public ParserRule getString_expressionRule() {
		return getString_expressionAccess().getRule();
	}

	////temporary
	//MCSAnnexSubclause:
	//	{MCSAnnexSubclause} ("theorems" theorems+=theorem_declaration+) (enforceclauses+=ClassifierEnforce
	//	enforceclauses+=ClassifierEnforce*)?;
	public MCSAnnexSubclauseElements getMCSAnnexSubclauseAccess() {
		return pMCSAnnexSubclause;
	}
	
	public ParserRule getMCSAnnexSubclauseRule() {
		return getMCSAnnexSubclauseAccess().getRule();
	}

	//ClassifierEnforce:
	//	"enforce" viewpoint=[MCSViewpoint] script=ClassifierScript ";";
	public ClassifierEnforceElements getClassifierEnforceAccess() {
		return pClassifierEnforce;
	}
	
	public ParserRule getClassifierEnforceRule() {
		return getClassifierEnforceAccess().getRule();
	}

	//ClassifierScript:
	//	"script" c_block+=ConstraintsBlock* "endscript" ref=ViewpointReference ";";
	public ClassifierScriptElements getClassifierScriptAccess() {
		return pClassifierScript;
	}
	
	public ParserRule getClassifierScriptRule() {
		return getClassifierScriptAccess().getRule();
	}

	//theorem_declaration:
	//	"theorem" name=ID ml?=in_modes_list? locals+=local_declaration* statements+=theorem_statement* "end"
	//	endname=[theorem_declaration] ";";
	public Theorem_declarationElements getTheorem_declarationAccess() {
		return pTheorem_declaration;
	}
	
	public ParserRule getTheorem_declarationRule() {
		return getTheorem_declarationAccess().getRule();
	}

	//in_modes_list:
	//	"in" "modes" "(" modes+=ID ("," modes+=ID)* ")";
	public In_modes_listElements getIn_modes_listAccess() {
		return pIn_modes_list;
	}
	
	public ParserRule getIn_modes_listRule() {
		return getIn_modes_listAccess().getRule();
	}

	//local_declaration:
	//	const?="const"? name=ID type=type_expression? ":=" left_expr=constant_expression ";";
	public Local_declarationElements getLocal_declarationAccess() {
		return pLocal_declaration;
	}
	
	public ParserRule getLocal_declarationRule() {
		return getLocal_declarationAccess().getRule();
	}

	//theorem_statement:
	//	statement=check_statement;
	public Theorem_statementElements getTheorem_statementAccess() {
		return pTheorem_statement;
	}
	
	public ParserRule getTheorem_statementRule() {
		return getTheorem_statementAccess().getRule();
	}

	//type_declaration:
	//	name=ID ":" "type" (type=type_expression | "mapped" "to" javatype=[types::JvmType|QualifiedName]) ";";
	public Type_declarationElements getType_declarationAccess() {
		return pType_declaration;
	}
	
	public ParserRule getType_declarationRule() {
		return getType_declarationAccess().getRule();
	}

	////temporary
	//type_expression:
	//	basic=basic_type;
	public Type_expressionElements getType_expressionAccess() {
		return pType_expression;
	}
	
	public ParserRule getType_expressionRule() {
		return getType_expressionAccess().getRule();
	}

	////				 block_body = XBlockExpression ) ';' 						
	//function_declaration:
	//	name=ID ("(" arg+=argument ("," arg+=argument)* ")" ("returns" out=type_expression)? | ":" (ftype=UnnamedFunctionType
	//	| typeref=[type_declaration])) ":=" (closure=MCSClosure | exp_body=XExpression) // |
	//	";";
	public Function_declarationElements getFunction_declarationAccess() {
		return pFunction_declaration;
	}
	
	public ParserRule getFunction_declarationRule() {
		return getFunction_declarationAccess().getRule();
	}

	//argument:
	//	{argument} name=ID (":" arg_type=type_expression)?;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//MCSClosure returns XExpression:
	//	=> ({MCSClosure} "[") => ((declaredFormalParameters+=argument ("," declaredFormalParameters+=argument)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public MCSClosureElements getMCSClosureAccess() {
		return pMCSClosure;
	}
	
	public ParserRule getMCSClosureRule() {
		return getMCSClosureAccess().getRule();
	}

	//basic_type:
	//	bool=UnnamedBooleanType | string=UnnamedStringType | enumer=UnnamedEnumerationType | units=UnnamedUnitsType |
	//	integer=UnnamedIntegerType | real=UnnamedRealType | range=UnnamedRangeType | class=UnnamedClassifierType |
	//	ref=UnnamedReferenceType | func=UnnamedFunctionType | typename=[type_declaration];
	public Basic_typeElements getBasic_typeAccess() {
		return pBasic_type;
	}
	
	public ParserRule getBasic_typeRule() {
		return getBasic_typeAccess().getRule();
	}

	//UnnamedBooleanType returns aadl2::AadlBoolean:
	//	{aadl2::AadlBoolean} "aadlboolean";
	public UnnamedBooleanTypeElements getUnnamedBooleanTypeAccess() {
		return pUnnamedBooleanType;
	}
	
	public ParserRule getUnnamedBooleanTypeRule() {
		return getUnnamedBooleanTypeAccess().getRule();
	}

	//UnnamedStringType returns aadl2::AadlString:
	//	{aadl2::AadlString} "aadlstring";
	public UnnamedStringTypeElements getUnnamedStringTypeAccess() {
		return pUnnamedStringType;
	}
	
	public ParserRule getUnnamedStringTypeRule() {
		return getUnnamedStringTypeAccess().getRule();
	}

	//UnnamedEnumerationType returns aadl2::EnumerationType:
	//	"enumeration" "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
	public UnnamedEnumerationTypeElements getUnnamedEnumerationTypeAccess() {
		return pUnnamedEnumerationType;
	}
	
	public ParserRule getUnnamedEnumerationTypeRule() {
		return getUnnamedEnumerationTypeAccess().getRule();
	}

	//EnumerationLiteral returns aadl2::EnumerationLiteral:
	//	name=ID;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	//UnnamedUnitsType returns aadl2::UnitsType:
	//	"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
	public UnnamedUnitsTypeElements getUnnamedUnitsTypeAccess() {
		return pUnnamedUnitsType;
	}
	
	public ParserRule getUnnamedUnitsTypeRule() {
		return getUnnamedUnitsTypeAccess().getRule();
	}

	//UnitLiteral returns aadl2::UnitLiteral:
	//	name=ID;
	public UnitLiteralElements getUnitLiteralAccess() {
		return pUnitLiteral;
	}
	
	public ParserRule getUnitLiteralRule() {
		return getUnitLiteralAccess().getRule();
	}

	//UnitLiteralConversion returns aadl2::UnitLiteral:
	//	name=ID "=>" baseUnit=[aadl2::UnitLiteral] "*" factor=NumberValue;
	public UnitLiteralConversionElements getUnitLiteralConversionAccess() {
		return pUnitLiteralConversion;
	}
	
	public ParserRule getUnitLiteralConversionRule() {
		return getUnitLiteralConversionAccess().getRule();
	}

	//NumberValue returns aadl2::NumberValue:
	//	RealLit | => IntegerLit;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//RealLit returns aadl2::RealLiteral:
	//	value=SignedReal;
	public RealLitElements getRealLitAccess() {
		return pRealLit;
	}
	
	public ParserRule getRealLitRule() {
		return getRealLitAccess().getRule();
	}

	//IntegerLit returns aadl2::IntegerLiteral:
	//	value=SignedInt;
	public IntegerLitElements getIntegerLitAccess() {
		return pIntegerLit;
	}
	
	public ParserRule getIntegerLitRule() {
		return getIntegerLitAccess().getRule();
	}

	//SignedInt returns aadl2::Integer:
	//	("+" | "-")? //INTEGER_LIT 
	//	Number;
	public SignedIntElements getSignedIntAccess() {
		return pSignedInt;
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedReal returns aadl2::Real:
	//	("+" | "-")? //REAL_LIT 
	//	Number;
	public SignedRealElements getSignedRealAccess() {
		return pSignedReal;
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//UnnamedIntegerType returns aadl2::AadlInteger:
	//	{aadl2::AadlInteger} "aadlinteger" range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public UnnamedIntegerTypeElements getUnnamedIntegerTypeAccess() {
		return pUnnamedIntegerType;
	}
	
	public ParserRule getUnnamedIntegerTypeRule() {
		return getUnnamedIntegerTypeAccess().getRule();
	}

	//IntegerRange returns aadl2::NumericRange:
	//	lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant |
	//	ConstantValue);
	public IntegerRangeElements getIntegerRangeAccess() {
		return pIntegerRange;
	}
	
	public ParserRule getIntegerRangeRule() {
		return getIntegerRangeAccess().getRule();
	}

	//IntegerTerm returns aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public IntegerTermElements getIntegerTermAccess() {
		return pIntegerTerm;
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedConstant returns aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public SignedConstantElements getSignedConstantAccess() {
		return pSignedConstant;
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//PlusMinus returns aadl2::OperationKind:
	//	"+" | "-";
	public PlusMinusElements getPlusMinusAccess() {
		return pPlusMinus;
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//ConstantValue returns aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//UnnamedRealType returns aadl2::AadlReal:
	//	{aadl2::AadlReal} "aadlreal" range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public UnnamedRealTypeElements getUnnamedRealTypeAccess() {
		return pUnnamedRealType;
	}
	
	public ParserRule getUnnamedRealTypeRule() {
		return getUnnamedRealTypeAccess().getRule();
	}

	//RealRange returns aadl2::NumericRange:
	//	lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue);
	public RealRangeElements getRealRangeAccess() {
		return pRealRange;
	}
	
	public ParserRule getRealRangeRule() {
		return getRealRangeAccess().getRule();
	}

	//RealTerm returns aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public RealTermElements getRealTermAccess() {
		return pRealTerm;
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//UnnamedRangeType returns aadl2::RangeType:
	//	{aadl2::RangeType} "range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) |
	//	numberType=[aadl2::NumberType|QPREF]);
	public UnnamedRangeTypeElements getUnnamedRangeTypeAccess() {
		return pUnnamedRangeType;
	}
	
	public ParserRule getUnnamedRangeTypeRule() {
		return getUnnamedRangeTypeAccess().getRule();
	}

	//UnnamedClassifierType returns aadl2::ClassifierType:
	//	{aadl2::ClassifierType} "classifier" ("(" classifierReference+=QMReference ("," classifierReference+=QMReference)*
	//	")")?;
	public UnnamedClassifierTypeElements getUnnamedClassifierTypeAccess() {
		return pUnnamedClassifierType;
	}
	
	public ParserRule getUnnamedClassifierTypeRule() {
		return getUnnamedClassifierTypeAccess().getRule();
	}

	//UnnamedReferenceType returns aadl2::ReferenceType:
	//	"reference" {aadl2::ReferenceType} ("(" namedElementReference+=QMReference ("," namedElementReference+=QMReference)*
	//	")")?;
	public UnnamedReferenceTypeElements getUnnamedReferenceTypeAccess() {
		return pUnnamedReferenceType;
	}
	
	public ParserRule getUnnamedReferenceTypeRule() {
		return getUnnamedReferenceTypeAccess().getRule();
	}

	//QMReference returns aadl2::MetaclassReference:
	//	("{" annexName=ID "}" "*" "*")? metaclassName+=ID+;
	public QMReferenceElements getQMReferenceAccess() {
		return pQMReference;
	}
	
	public ParserRule getQMReferenceRule() {
		return getQMReferenceAccess().getRule();
	}

	//QCReference returns aadl2::ClassifierValue:
	//	classifier=[aadl2::ComponentClassifier|FQCREF];
	public QCReferenceElements getQCReferenceAccess() {
		return pQCReference;
	}
	
	public ParserRule getQCReferenceRule() {
		return getQCReferenceAccess().getRule();
	}

	//UnnamedFunctionType:
	//	"(" parm+=type_expression? ("," parm+=type_expression)+ ")" (outspec?="returns" result=type_expression)?;
	public UnnamedFunctionTypeElements getUnnamedFunctionTypeAccess() {
		return pUnnamedFunctionType;
	}
	
	public ParserRule getUnnamedFunctionTypeRule() {
		return getUnnamedFunctionTypeAccess().getRule();
	}

	//// fully qualified classifier name (always includes package name
	//FQCREF:
	//	(ID "::")+ ID ("." ID)?;
	public FQCREFElements getFQCREFAccess() {
		return pFQCREF;
	}
	
	public ParserRule getFQCREFRule() {
		return getFQCREFAccess().getRule();
	}

	//constant_expression:
	//	expression;
	public Constant_expressionElements getConstant_expressionAccess() {
		return pConstant_expression;
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	/// * 
	//
	//INTVALUE returns aadl2::Integer:
	//	INTEGER_LIT //NUMERAL 	
	//;
	//
	//
	//terminal fragment
	//EXPONENT  :  ('e'|'E') ('+'|'-')? ( DIGIT )+  ;
	//
	//terminal fragment
	//INT_EXPONENT :  ('e'|'E') ('+')? ( DIGIT )+ ;
	//
	//
	//terminal REAL_LIT : 	
	//	(DIGIT)+('_' (DIGIT)+)* ( '.' (DIGIT)+('_' (DIGIT)+)* ( EXPONENT )?)
	//  ;
	//
	//terminal INTEGER_LIT : 
	//		(DIGIT)+('_' (DIGIT)+)*
	//		(( '#' BASED_INTEGER  '#' ( INT_EXPONENT )? )
	//			| (INT_EXPONENT)?
	//		)
	//  ;
	//
	//terminal fragment
	//DIGIT     :  ( '0'..'9' ) ;
	//
	//terminal fragment
	//EXTENDED_DIGIT     :  ( '0'..'9' | 'a'..'f' | 'A'..'F') ;
	//
	//terminal fragment
	//BASED_INTEGER      :  ( EXTENDED_DIGIT ) ( ('_')? EXTENDED_DIGIT )* ;
	// * / terminal ID:
	//	("a".."z" | "A".."Z") ("_"? ("a".."z" | "A".."Z" | "0".."9"))*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//QCREF:
	//	(ID "::")* ID ("." ID)?;
	public QCREFElements getQCREFAccess() {
		return pQCREF;
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//QPREF:
	//	ID ("::" ID)?;
	public QPREFElements getQPREFAccess() {
		return pQPREF;
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
