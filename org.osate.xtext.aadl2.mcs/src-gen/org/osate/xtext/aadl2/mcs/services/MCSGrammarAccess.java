/*
 * generated by Xtext
 */
package org.osate.xtext.aadl2.mcs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class MCSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MCSGrammarRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSGrammarRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAnnexKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLibAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLibMCSAnnexLibraryParserRuleCall_0_1_0 = (RuleCall)cLibAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMcsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFileAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFileMCSFileParserRuleCall_1_1_0 = (RuleCall)cFileAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSubclauseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubclauseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubclauseMCSAnnexSubclauseParserRuleCall_2_1_0 = (RuleCall)cSubclauseAssignment_2_1.eContents().get(0);
		
		////import "http://www.eclipse.org/xtext/xbase/Xbase"
		//MCSGrammarRoot:
		//	"annex" lib=MCSAnnexLibrary | "mcs" file=MCSFile | "subclause" subclause=MCSAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//"annex" lib=MCSAnnexLibrary | "mcs" file=MCSFile | "subclause" subclause=MCSAnnexSubclause
		public Alternatives getAlternatives() { return cAlternatives; }

		//"annex" lib=MCSAnnexLibrary
		public Group getGroup_0() { return cGroup_0; }

		//"annex"
		public Keyword getAnnexKeyword_0_0() { return cAnnexKeyword_0_0; }

		//lib=MCSAnnexLibrary
		public Assignment getLibAssignment_0_1() { return cLibAssignment_0_1; }

		//MCSAnnexLibrary
		public RuleCall getLibMCSAnnexLibraryParserRuleCall_0_1_0() { return cLibMCSAnnexLibraryParserRuleCall_0_1_0; }

		//"mcs" file=MCSFile
		public Group getGroup_1() { return cGroup_1; }

		//"mcs"
		public Keyword getMcsKeyword_1_0() { return cMcsKeyword_1_0; }

		//file=MCSFile
		public Assignment getFileAssignment_1_1() { return cFileAssignment_1_1; }

		//MCSFile
		public RuleCall getFileMCSFileParserRuleCall_1_1_0() { return cFileMCSFileParserRuleCall_1_1_0; }

		//"subclause" subclause=MCSAnnexSubclause
		public Group getGroup_2() { return cGroup_2; }

		//"subclause"
		public Keyword getSubclauseKeyword_2_0() { return cSubclauseKeyword_2_0; }

		//subclause=MCSAnnexSubclause
		public Assignment getSubclauseAssignment_2_1() { return cSubclauseAssignment_2_1; }

		//MCSAnnexSubclause
		public RuleCall getSubclauseMCSAnnexSubclauseParserRuleCall_2_1_0() { return cSubclauseMCSAnnexSubclauseParserRuleCall_2_1_0; }
	}

	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexLibrary");
		private final RuleCall cMCSAnnexLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//	MCSAnnexLibrary;
		@Override public ParserRule getRule() { return rule; }

		//MCSAnnexLibrary
		public RuleCall getMCSAnnexLibraryParserRuleCall() { return cMCSAnnexLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cMCSAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//	MCSAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//MCSAnnexSubclause
		public RuleCall getMCSAnnexSubclauseParserRuleCall() { return cMCSAnnexSubclauseParserRuleCall; }
	}

	public class MCSAnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSAnnexLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSAnnexLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTypesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypesType_declarationParserRuleCall_1_1_0 = (RuleCall)cTypesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConstantsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConstantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstantsConstant_declarationParserRuleCall_2_1_0 = (RuleCall)cConstantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunctionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionsFunction_declarationParserRuleCall_3_1_0 = (RuleCall)cFunctionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTheoremsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTheoremsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTheoremsTheorem_declarationParserRuleCall_4_1_0 = (RuleCall)cTheoremsAssignment_4_1.eContents().get(0);
		
		//MCSAnnexLibrary:
		//	{MCSAnnexLibrary} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
		//	functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+)?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSAnnexLibrary} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
		//functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+)?
		public Group getGroup() { return cGroup; }

		//{MCSAnnexLibrary}
		public Action getMCSAnnexLibraryAction_0() { return cMCSAnnexLibraryAction_0; }

		//("types" types+=Type_declaration+)?
		public Group getGroup_1() { return cGroup_1; }

		//"types"
		public Keyword getTypesKeyword_1_0() { return cTypesKeyword_1_0; }

		//types+=Type_declaration+
		public Assignment getTypesAssignment_1_1() { return cTypesAssignment_1_1; }

		//Type_declaration
		public RuleCall getTypesType_declarationParserRuleCall_1_1_0() { return cTypesType_declarationParserRuleCall_1_1_0; }

		//("constants" constants+=Constant_declaration+)?
		public Group getGroup_2() { return cGroup_2; }

		//"constants"
		public Keyword getConstantsKeyword_2_0() { return cConstantsKeyword_2_0; }

		//constants+=Constant_declaration+
		public Assignment getConstantsAssignment_2_1() { return cConstantsAssignment_2_1; }

		//Constant_declaration
		public RuleCall getConstantsConstant_declarationParserRuleCall_2_1_0() { return cConstantsConstant_declarationParserRuleCall_2_1_0; }

		//("functions" functions+=Function_declaration+)?
		public Group getGroup_3() { return cGroup_3; }

		//"functions"
		public Keyword getFunctionsKeyword_3_0() { return cFunctionsKeyword_3_0; }

		//functions+=Function_declaration+
		public Assignment getFunctionsAssignment_3_1() { return cFunctionsAssignment_3_1; }

		//Function_declaration
		public RuleCall getFunctionsFunction_declarationParserRuleCall_3_1_0() { return cFunctionsFunction_declarationParserRuleCall_3_1_0; }

		//("theorems" theorems+=Theorem_declaration+)?
		public Group getGroup_4() { return cGroup_4; }

		//"theorems"
		public Keyword getTheoremsKeyword_4_0() { return cTheoremsKeyword_4_0; }

		//theorems+=Theorem_declaration+
		public Assignment getTheoremsAssignment_4_1() { return cTheoremsAssignment_4_1; }

		//Theorem_declaration
		public RuleCall getTheoremsTheorem_declarationParserRuleCall_4_1_0() { return cTheoremsTheorem_declarationParserRuleCall_4_1_0; }
	}

	public class MCSFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSFileAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cImportedUnitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cImportedUnitModelUnitCrossReference_1_1_0 = (CrossReference)cImportedUnitAssignment_1_1.eContents().get(0);
		private final RuleCall cImportedUnitModelUnitIDTerminalRuleCall_1_1_0_1 = (RuleCall)cImportedUnitModelUnitCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cImportedUnitAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cImportedUnitModelUnitCrossReference_1_2_1_0 = (CrossReference)cImportedUnitAssignment_1_2_1.eContents().get(0);
		private final RuleCall cImportedUnitModelUnitIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cImportedUnitModelUnitCrossReference_1_2_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImportKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFilesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFilesFile_nameParserRuleCall_2_1_0 = (RuleCall)cFilesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFilesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFilesFile_nameParserRuleCall_2_2_1_0 = (RuleCall)cFilesAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesType_declarationParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstantsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConstantsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstantsConstant_declarationParserRuleCall_4_1_0 = (RuleCall)cConstantsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFunctionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFunctionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFunctionsFunction_declarationParserRuleCall_5_1_0 = (RuleCall)cFunctionsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTheoremsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTheoremsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTheoremsTheorem_declarationParserRuleCall_6_1_0 = (RuleCall)cTheoremsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cConstraintsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCallsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCallsTheorem_callParserRuleCall_7_1_0 = (RuleCall)cCallsAssignment_7_1.eContents().get(0);
		
		//MCSFile:
		//	{MCSFile} ("with" importedUnit+=[aadl2::ModelUnit] ("," importedUnit+=[aadl2::ModelUnit])*)+ ("import"
		//	files+=File_name ("," files+=File_name)*)* ("types" types+=Type_declaration+)? ("constants"
		//	constants+=Constant_declaration+)? ("functions" functions+=Function_declaration+)? ("theorems"
		//	theorems+=Theorem_declaration+)? ("constraints" calls+=Theorem_call+)?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSFile} ("with" importedUnit+=[aadl2::ModelUnit] ("," importedUnit+=[aadl2::ModelUnit])*)+ ("import" files+=File_name
		//("," files+=File_name)*)* ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)?
		//("functions" functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+)? ("constraints"
		//calls+=Theorem_call+)?
		public Group getGroup() { return cGroup; }

		//{MCSFile}
		public Action getMCSFileAction_0() { return cMCSFileAction_0; }

		//("with" importedUnit+=[aadl2::ModelUnit] ("," importedUnit+=[aadl2::ModelUnit])*)+
		public Group getGroup_1() { return cGroup_1; }

		//"with"
		public Keyword getWithKeyword_1_0() { return cWithKeyword_1_0; }

		//importedUnit+=[aadl2::ModelUnit]
		public Assignment getImportedUnitAssignment_1_1() { return cImportedUnitAssignment_1_1; }

		//[aadl2::ModelUnit]
		public CrossReference getImportedUnitModelUnitCrossReference_1_1_0() { return cImportedUnitModelUnitCrossReference_1_1_0; }

		//ID
		public RuleCall getImportedUnitModelUnitIDTerminalRuleCall_1_1_0_1() { return cImportedUnitModelUnitIDTerminalRuleCall_1_1_0_1; }

		//("," importedUnit+=[aadl2::ModelUnit])*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//importedUnit+=[aadl2::ModelUnit]
		public Assignment getImportedUnitAssignment_1_2_1() { return cImportedUnitAssignment_1_2_1; }

		//[aadl2::ModelUnit]
		public CrossReference getImportedUnitModelUnitCrossReference_1_2_1_0() { return cImportedUnitModelUnitCrossReference_1_2_1_0; }

		//ID
		public RuleCall getImportedUnitModelUnitIDTerminalRuleCall_1_2_1_0_1() { return cImportedUnitModelUnitIDTerminalRuleCall_1_2_1_0_1; }

		//("import" files+=File_name ("," files+=File_name)*)*
		public Group getGroup_2() { return cGroup_2; }

		//"import"
		public Keyword getImportKeyword_2_0() { return cImportKeyword_2_0; }

		//files+=File_name
		public Assignment getFilesAssignment_2_1() { return cFilesAssignment_2_1; }

		//File_name
		public RuleCall getFilesFile_nameParserRuleCall_2_1_0() { return cFilesFile_nameParserRuleCall_2_1_0; }

		//("," files+=File_name)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//files+=File_name
		public Assignment getFilesAssignment_2_2_1() { return cFilesAssignment_2_2_1; }

		//File_name
		public RuleCall getFilesFile_nameParserRuleCall_2_2_1_0() { return cFilesFile_nameParserRuleCall_2_2_1_0; }

		//("types" types+=Type_declaration+)?
		public Group getGroup_3() { return cGroup_3; }

		//"types"
		public Keyword getTypesKeyword_3_0() { return cTypesKeyword_3_0; }

		//types+=Type_declaration+
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }

		//Type_declaration
		public RuleCall getTypesType_declarationParserRuleCall_3_1_0() { return cTypesType_declarationParserRuleCall_3_1_0; }

		//("constants" constants+=Constant_declaration+)?
		public Group getGroup_4() { return cGroup_4; }

		//"constants"
		public Keyword getConstantsKeyword_4_0() { return cConstantsKeyword_4_0; }

		//constants+=Constant_declaration+
		public Assignment getConstantsAssignment_4_1() { return cConstantsAssignment_4_1; }

		//Constant_declaration
		public RuleCall getConstantsConstant_declarationParserRuleCall_4_1_0() { return cConstantsConstant_declarationParserRuleCall_4_1_0; }

		//("functions" functions+=Function_declaration+)?
		public Group getGroup_5() { return cGroup_5; }

		//"functions"
		public Keyword getFunctionsKeyword_5_0() { return cFunctionsKeyword_5_0; }

		//functions+=Function_declaration+
		public Assignment getFunctionsAssignment_5_1() { return cFunctionsAssignment_5_1; }

		//Function_declaration
		public RuleCall getFunctionsFunction_declarationParserRuleCall_5_1_0() { return cFunctionsFunction_declarationParserRuleCall_5_1_0; }

		//("theorems" theorems+=Theorem_declaration+)?
		public Group getGroup_6() { return cGroup_6; }

		//"theorems"
		public Keyword getTheoremsKeyword_6_0() { return cTheoremsKeyword_6_0; }

		//theorems+=Theorem_declaration+
		public Assignment getTheoremsAssignment_6_1() { return cTheoremsAssignment_6_1; }

		//Theorem_declaration
		public RuleCall getTheoremsTheorem_declarationParserRuleCall_6_1_0() { return cTheoremsTheorem_declarationParserRuleCall_6_1_0; }

		//("constraints" calls+=Theorem_call+)?
		public Group getGroup_7() { return cGroup_7; }

		//"constraints"
		public Keyword getConstraintsKeyword_7_0() { return cConstraintsKeyword_7_0; }

		//calls+=Theorem_call+
		public Assignment getCallsAssignment_7_1() { return cCallsAssignment_7_1; }

		//Theorem_call
		public RuleCall getCallsTheorem_callParserRuleCall_7_1_0() { return cCallsTheorem_callParserRuleCall_7_1_0; }
	}

	public class MCSAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSAnnexSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallsTheorem_callParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		
		//MCSAnnexSubclause:
		//	{MCSAnnexSubclause} calls+=Theorem_call?;
		@Override public ParserRule getRule() { return rule; }

		//{MCSAnnexSubclause} calls+=Theorem_call?
		public Group getGroup() { return cGroup; }

		//{MCSAnnexSubclause}
		public Action getMCSAnnexSubclauseAction_0() { return cMCSAnnexSubclauseAction_0; }

		//calls+=Theorem_call?
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }

		//Theorem_call
		public RuleCall getCallsTheorem_callParserRuleCall_1_0() { return cCallsTheorem_callParserRuleCall_1_0; }
	}

	public class File_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File_name");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//File_name:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class Type_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeType_expressionParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Type_declaration:
		//	"type" name=ID "=" type=Type_expression ";";
		@Override public ParserRule getRule() { return rule; }

		//"type" name=ID "=" type=Type_expression ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//type=Type_expression
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_3_0() { return cTypeType_expressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Constant_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstMcsTypedNameParserRuleCall_1_0 = (RuleCall)cConstAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeft_exprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeft_exprExprParserRuleCall_3_0 = (RuleCall)cLeft_exprAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constant_declaration:
		//	"const"? const=McsTypedName "=" left_expr=Expr ";";
		@Override public ParserRule getRule() { return rule; }

		//"const"? const=McsTypedName "=" left_expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"const"?
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//const=McsTypedName
		public Assignment getConstAssignment_1() { return cConstAssignment_1; }

		//McsTypedName
		public RuleCall getConstMcsTypedNameParserRuleCall_1_0() { return cConstMcsTypedNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//left_expr=Expr
		public Assignment getLeft_exprAssignment_3() { return cLeft_exprAssignment_3; }

		//Expr
		public RuleCall getLeft_exprExprParserRuleCall_3_0() { return cLeft_exprExprParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Function_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsParameterParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsParameterParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyFunctionBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Function_declaration returns Function:
		//	name=ID => "(" (args+=Parameter ("," args+=Parameter)*)? ")" body=FunctionBody;
		@Override public ParserRule getRule() { return rule; }

		//name=ID => "(" (args+=Parameter ("," args+=Parameter)*)? ")" body=FunctionBody
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Parameter ("," args+=Parameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Parameter
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_2_0_0() { return cArgsParameterParserRuleCall_2_0_0; }

		//("," args+=Parameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Parameter
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_2_1_1_0() { return cArgsParameterParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=FunctionBody
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//FunctionBody
		public RuleCall getBodyFunctionBodyParserRuleCall_4_0() { return cBodyFunctionBodyParserRuleCall_4_0; }
	}

	public class Theorem_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Theorem_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cT_rootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cT_rootTheorem_rootParserRuleCall_1_0 = (RuleCall)cT_rootAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsParameterParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsParameterParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyTheoremBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//Theorem_declaration returns Theorem:
		//	name=ID t_root?=Theorem_root? => "(" (args+=Parameter ("," args+=Parameter)*)? ")" body=TheoremBody;
		@Override public ParserRule getRule() { return rule; }

		//name=ID t_root?=Theorem_root? => "(" (args+=Parameter ("," args+=Parameter)*)? ")" body=TheoremBody
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//t_root?=Theorem_root?
		public Assignment getT_rootAssignment_1() { return cT_rootAssignment_1; }

		//Theorem_root
		public RuleCall getT_rootTheorem_rootParserRuleCall_1_0() { return cT_rootTheorem_rootParserRuleCall_1_0; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Parameter ("," args+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Parameter
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_3_0_0() { return cArgsParameterParserRuleCall_3_0_0; }

		//("," args+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Parameter
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_3_1_1_0() { return cArgsParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=TheoremBody
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//TheoremBody
		public RuleCall getBodyTheoremBodyParserRuleCall_5_0() { return cBodyTheoremBodyParserRuleCall_5_0; }
	}

	public class Theorem_rootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Theorem_root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cNilrootAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Keyword cNilrootNilKeyword_3_0_0 = (Keyword)cNilrootAssignment_3_0.eContents().get(0);
		private final Assignment cClassifierAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cClassifierClassifiersParserRuleCall_3_1_0 = (RuleCall)cClassifierAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Theorem_root:
		//	"<" "root" ":" (nilroot?="nil" | classifier=Classifiers) ">";
		@Override public ParserRule getRule() { return rule; }

		//"<" "root" ":" (nilroot?="nil" | classifier=Classifiers) ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"root"
		public Keyword getRootKeyword_1() { return cRootKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//nilroot?="nil" | classifier=Classifiers
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//nilroot?="nil"
		public Assignment getNilrootAssignment_3_0() { return cNilrootAssignment_3_0; }

		//"nil"
		public Keyword getNilrootNilKeyword_3_0_0() { return cNilrootNilKeyword_3_0_0; }

		//classifier=Classifiers
		public Assignment getClassifierAssignment_3_1() { return cClassifierAssignment_3_1; }

		//Classifiers
		public RuleCall getClassifierClassifiersParserRuleCall_3_1_0() { return cClassifierClassifiersParserRuleCall_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeType_expressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		
		//FunctionBody:
		//	{FunctionBody} ":" type=Type_expression "=" expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//{FunctionBody} ":" type=Type_expression "=" expr=Expr
		public Group getGroup() { return cGroup; }

		//{FunctionBody}
		public Action getFunctionBodyAction_0() { return cFunctionBodyAction_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=Type_expression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_2_0() { return cTypeType_expressionParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expr=Expr
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_4_0() { return cExprExprParserRuleCall_4_0; }
	}

	public class TheoremBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TheoremBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheoremBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringParameterizedStringParserRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprExprParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		
		//TheoremBody:
		//	{TheoremBody} "<=" string+=ParameterizedString+ expr=Expr;
		@Override public ParserRule getRule() { return rule; }

		//{TheoremBody} "<=" string+=ParameterizedString+ expr=Expr
		public Group getGroup() { return cGroup; }

		//{TheoremBody}
		public Action getTheoremBodyAction_0() { return cTheoremBodyAction_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//string+=ParameterizedString+
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//ParameterizedString
		public RuleCall getStringParameterizedStringParserRuleCall_2_0() { return cStringParameterizedStringParserRuleCall_2_0; }

		//expr=Expr
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//Expr
		public RuleCall getExprExprParserRuleCall_3_0() { return cExprExprParserRuleCall_3_0; }
	}

	public class ParameterizedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterizedString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClaimAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClaimTextParmParserRuleCall_1_0 = (RuleCall)cClaimAssignment_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParameterizedString:
		//	"**" claim+=TextParm+ "**";
		@Override public ParserRule getRule() { return rule; }

		//"**" claim+=TextParm+ "**"
		public Group getGroup() { return cGroup; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_0() { return cAsteriskAsteriskKeyword_0; }

		//claim+=TextParm+
		public Assignment getClaimAssignment_1() { return cClaimAssignment_1; }

		//TextParm
		public RuleCall getClaimTextParmParserRuleCall_1_0() { return cClaimTextParmParserRuleCall_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_2() { return cAsteriskAsteriskKeyword_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final RuleCall cMcsTypedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Arg types are used for functions, claims, and quantifiers
		//Parameter:
		//	McsTypedName;
		@Override public ParserRule getRule() { return rule; }

		//McsTypedName
		public RuleCall getMcsTypedNameParserRuleCall() { return cMcsTypedNameParserRuleCall; }
	}

	public class TextParmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextParm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cClaimStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cStrAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStrStringTermParserRuleCall_0_1_0 = (RuleCall)cStrAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cClaimArgAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTextargAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTextargMCSNameExprParserRuleCall_1_1_0 = (RuleCall)cTextargAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPercentSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cUnitAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_2_1_0 = (CrossReference)cUnitAssignment_1_2_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_2_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_2_1_0.eContents().get(1);
		
		//TextParm:
		//	{ClaimString} str=StringTerm | {ClaimArg} textarg=MCSNameExpr ("%" unit=[aadl2::UnitLiteral])?;
		@Override public ParserRule getRule() { return rule; }

		//{ClaimString} str=StringTerm | {ClaimArg} textarg=MCSNameExpr ("%" unit=[aadl2::UnitLiteral])?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ClaimString} str=StringTerm
		public Group getGroup_0() { return cGroup_0; }

		//{ClaimString}
		public Action getClaimStringAction_0_0() { return cClaimStringAction_0_0; }

		//str=StringTerm
		public Assignment getStrAssignment_0_1() { return cStrAssignment_0_1; }

		//StringTerm
		public RuleCall getStrStringTermParserRuleCall_0_1_0() { return cStrStringTermParserRuleCall_0_1_0; }

		//{ClaimArg} textarg=MCSNameExpr ("%" unit=[aadl2::UnitLiteral])?
		public Group getGroup_1() { return cGroup_1; }

		//{ClaimArg}
		public Action getClaimArgAction_1_0() { return cClaimArgAction_1_0; }

		//textarg=MCSNameExpr
		public Assignment getTextargAssignment_1_1() { return cTextargAssignment_1_1; }

		//MCSNameExpr
		public RuleCall getTextargMCSNameExprParserRuleCall_1_1_0() { return cTextargMCSNameExprParserRuleCall_1_1_0; }

		//("%" unit=[aadl2::UnitLiteral])?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"%"
		public Keyword getPercentSignKeyword_1_2_0() { return cPercentSignKeyword_1_2_0; }

		//unit=[aadl2::UnitLiteral]
		public Assignment getUnitAssignment_1_2_1() { return cUnitAssignment_1_2_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_2_1_0() { return cUnitUnitLiteralCrossReference_1_2_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_2_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_2_1_0_1; }
	}

	public class McsTypedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "McsTypedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeType_expressionParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cInKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_1_1_0 = (RuleCall)cExprAssignment_1_1_1.eContents().get(0);
		
		//McsTypedName:
		//	name=ID (":" type=Type_expression | "in" expr=Expr);
		@Override public ParserRule getRule() { return rule; }

		//name=ID (":" type=Type_expression | "in" expr=Expr)
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":" type=Type_expression | "in" expr=Expr
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//":" type=Type_expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//":"
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }

		//type=Type_expression
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_1_0_1_0() { return cTypeType_expressionParserRuleCall_1_0_1_0; }

		//"in" expr=Expr
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"in"
		public Keyword getInKeyword_1_1_0() { return cInKeyword_1_1_0; }

		//expr=Expr
		public Assignment getExprAssignment_1_1_1() { return cExprAssignment_1_1_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_1_1_0() { return cExprExprParserRuleCall_1_1_1_0; }
	}

	public class Theorem_callElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Theorem_call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCheckKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cProveKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTnameTheoremCrossReference_1_0 = (CrossReference)cTnameAssignment_1.eContents().get(0);
		private final RuleCall cTnameTheoremIDTerminalRuleCall_1_0_1 = (RuleCall)cTnameTheoremCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword cNilKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Assignment cCrootAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cCrootClassifier_literalParserRuleCall_2_1_1_0 = (RuleCall)cCrootAssignment_2_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cActargAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cActargExprParserRuleCall_4_0_0 = (RuleCall)cActargAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cActargAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cActargExprParserRuleCall_4_1_1_0 = (RuleCall)cActargAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Theorem_call returns TheoremCall:
		//	("check" | "prove") tname=[Theorem] ("<" ("nil" | croot=Classifier_literal) ">")? "(" (actarg+=Expr (","
		//	actarg+=Expr)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//("check" | "prove") tname=[Theorem] ("<" ("nil" | croot=Classifier_literal) ">")? "(" (actarg+=Expr (","
		//actarg+=Expr)*)? ")"
		public Group getGroup() { return cGroup; }

		//"check" | "prove"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"check"
		public Keyword getCheckKeyword_0_0() { return cCheckKeyword_0_0; }

		//"prove"
		public Keyword getProveKeyword_0_1() { return cProveKeyword_0_1; }

		//tname=[Theorem]
		public Assignment getTnameAssignment_1() { return cTnameAssignment_1; }

		//[Theorem]
		public CrossReference getTnameTheoremCrossReference_1_0() { return cTnameTheoremCrossReference_1_0; }

		//ID
		public RuleCall getTnameTheoremIDTerminalRuleCall_1_0_1() { return cTnameTheoremIDTerminalRuleCall_1_0_1; }

		//("<" ("nil" | croot=Classifier_literal) ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//"nil" | croot=Classifier_literal
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"nil"
		public Keyword getNilKeyword_2_1_0() { return cNilKeyword_2_1_0; }

		//croot=Classifier_literal
		public Assignment getCrootAssignment_2_1_1() { return cCrootAssignment_2_1_1; }

		//Classifier_literal
		public RuleCall getCrootClassifier_literalParserRuleCall_2_1_1_0() { return cCrootClassifier_literalParserRuleCall_2_1_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(actarg+=Expr ("," actarg+=Expr)*)?
		public Group getGroup_4() { return cGroup_4; }

		//actarg+=Expr
		public Assignment getActargAssignment_4_0() { return cActargAssignment_4_0; }

		//Expr
		public RuleCall getActargExprParserRuleCall_4_0_0() { return cActargExprParserRuleCall_4_0_0; }

		//("," actarg+=Expr)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//actarg+=Expr
		public Assignment getActargAssignment_4_1_1() { return cActargAssignment_4_1_1; }

		//Expr
		public RuleCall getActargExprParserRuleCall_4_1_1_0() { return cActargExprParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class Classifier_literalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classifier_literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cClasslitAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cClasslitComponentClassifierCrossReference_0_0 = (CrossReference)cClasslitAssignment_0.eContents().get(0);
		private final RuleCall cClasslitComponentClassifierFQCREFParserRuleCall_0_0_1 = (RuleCall)cClasslitComponentClassifierCrossReference_0_0.eContents().get(1);
		private final Assignment cNamerefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNamerefMcs_name_refParserRuleCall_1_0 = (RuleCall)cNamerefAssignment_1.eContents().get(0);
		
		//Classifier_literal:
		//	-> classlit=[aadl2::ComponentClassifier|FQCREF] | nameref=Mcs_name_ref;
		@Override public ParserRule getRule() { return rule; }

		//-> classlit=[aadl2::ComponentClassifier|FQCREF] | nameref=Mcs_name_ref
		public Alternatives getAlternatives() { return cAlternatives; }

		//-> classlit=[aadl2::ComponentClassifier|FQCREF]
		public Assignment getClasslitAssignment_0() { return cClasslitAssignment_0; }

		//[aadl2::ComponentClassifier|FQCREF]
		public CrossReference getClasslitComponentClassifierCrossReference_0_0() { return cClasslitComponentClassifierCrossReference_0_0; }

		//FQCREF
		public RuleCall getClasslitComponentClassifierFQCREFParserRuleCall_0_0_1() { return cClasslitComponentClassifierFQCREFParserRuleCall_0_0_1; }

		//nameref=Mcs_name_ref
		public Assignment getNamerefAssignment_1() { return cNamerefAssignment_1; }

		//Mcs_name_ref
		public RuleCall getNamerefMcs_name_refParserRuleCall_1_0() { return cNamerefMcs_name_refParserRuleCall_1_0; }
	}

	public class RealTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueUnsignedRealParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//RealTerm returns aadl2::RealLiteral:
		//	value=UnsignedReal unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=UnsignedReal unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=UnsignedReal
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//UnsignedReal
		public RuleCall getValueUnsignedRealParserRuleCall_0_0() { return cValueUnsignedRealParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnsignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsignedReal");
		private final RuleCall cREAL_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedReal returns aadl2::Real:
		//	REAL_LIT;
		@Override public ParserRule getRule() { return rule; }

		//REAL_LIT
		public RuleCall getREAL_LITTerminalRuleCall() { return cREAL_LITTerminalRuleCall; }
	}

	public class IntegerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueUnsignedIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//IntegerTerm returns aadl2::IntegerLiteral:
		//	value=UnsignedInt unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=UnsignedInt unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=UnsignedInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//UnsignedInt
		public RuleCall getValueUnsignedIntParserRuleCall_0_0() { return cValueUnsignedIntParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnsignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnsignedInt");
		private final RuleCall cINTEGER_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedInt returns aadl2::Integer:
		//	INTEGER_LIT;
		@Override public ParserRule getRule() { return rule; }

		//INTEGER_LIT
		public RuleCall getINTEGER_LITTerminalRuleCall() { return cINTEGER_LITTerminalRuleCall; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLowerBoundAlternatives_0_0 = (Alternatives)cLowerBoundAssignment_0.eContents().get(0);
		private final RuleCall cLowerBoundIntegerTermParserRuleCall_0_0_0 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(0);
		private final RuleCall cLowerBoundRealTermParserRuleCall_0_0_1 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cUpperBoundAlternatives_2_0 = (Alternatives)cUpperBoundAssignment_2.eContents().get(0);
		private final RuleCall cUpperBoundIntegerTermParserRuleCall_2_0_0 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(0);
		private final RuleCall cUpperBoundRealTermParserRuleCall_2_0_1 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(1);
		
		//Range:
		//	lowerBound=(IntegerTerm | RealTerm) ".." upperBound=(IntegerTerm | RealTerm);
		@Override public ParserRule getRule() { return rule; }

		//lowerBound=(IntegerTerm | RealTerm) ".." upperBound=(IntegerTerm | RealTerm)
		public Group getGroup() { return cGroup; }

		//lowerBound=(IntegerTerm | RealTerm)
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }

		//IntegerTerm | RealTerm
		public Alternatives getLowerBoundAlternatives_0_0() { return cLowerBoundAlternatives_0_0; }

		//IntegerTerm
		public RuleCall getLowerBoundIntegerTermParserRuleCall_0_0_0() { return cLowerBoundIntegerTermParserRuleCall_0_0_0; }

		//RealTerm
		public RuleCall getLowerBoundRealTermParserRuleCall_0_0_1() { return cLowerBoundRealTermParserRuleCall_0_0_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upperBound=(IntegerTerm | RealTerm)
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }

		//IntegerTerm | RealTerm
		public Alternatives getUpperBoundAlternatives_2_0() { return cUpperBoundAlternatives_2_0; }

		//IntegerTerm
		public RuleCall getUpperBoundIntegerTermParserRuleCall_2_0_0() { return cUpperBoundIntegerTermParserRuleCall_2_0_0; }

		//RealTerm
		public RuleCall getUpperBoundRealTermParserRuleCall_2_0_1() { return cUpperBoundRealTermParserRuleCall_2_0_1; }
	}

	public class RefTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRootAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cRootRootKeyword_2_0_0 = (Keyword)cRootAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSubAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubNestedDotIDParserRuleCall_3_0 = (RuleCall)cSubAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RefTerm:
		//	"reference" "(" (root?="root" ".")? sub= //ContainmentPath
		//	NestedDotID ")";
		@Override public ParserRule getRule() { return rule; }

		//"reference" "(" (root?="root" ".")? sub= //ContainmentPath
		//NestedDotID ")"
		public Group getGroup() { return cGroup; }

		//"reference"
		public Keyword getReferenceKeyword_0() { return cReferenceKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(root?="root" ".")?
		public Group getGroup_2() { return cGroup_2; }

		//root?="root"
		public Assignment getRootAssignment_2_0() { return cRootAssignment_2_0; }

		//"root"
		public Keyword getRootRootKeyword_2_0_0() { return cRootRootKeyword_2_0_0; }

		//"."
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//sub= //ContainmentPath
		//NestedDotID
		public Assignment getSubAssignment_3() { return cSubAssignment_3; }

		////ContainmentPath
		//NestedDotID
		public RuleCall getSubNestedDotIDParserRuleCall_3_0() { return cSubNestedDotIDParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class NestedDotIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedDotID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBaseNamedElementCrossReference_0_0 = (CrossReference)cBaseAssignment_0.eContents().get(0);
		private final RuleCall cBaseNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cBaseNamedElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubNestedDotIDParserRuleCall_1_1_0 = (RuleCall)cSubAssignment_1_1.eContents().get(0);
		
		//NestedDotID:
		//	base=[aadl2::NamedElement] ("." sub=NestedDotID)?;
		@Override public ParserRule getRule() { return rule; }

		//base=[aadl2::NamedElement] ("." sub=NestedDotID)?
		public Group getGroup() { return cGroup; }

		//base=[aadl2::NamedElement]
		public Assignment getBaseAssignment_0() { return cBaseAssignment_0; }

		//[aadl2::NamedElement]
		public CrossReference getBaseNamedElementCrossReference_0_0() { return cBaseNamedElementCrossReference_0_0; }

		//ID
		public RuleCall getBaseNamedElementIDTerminalRuleCall_0_0_1() { return cBaseNamedElementIDTerminalRuleCall_0_0_1; }

		//("." sub=NestedDotID)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//sub=NestedDotID
		public Assignment getSubAssignment_1_1() { return cSubAssignment_1_1; }

		//NestedDotID
		public RuleCall getSubNestedDotIDParserRuleCall_1_1_0() { return cSubNestedDotIDParserRuleCall_1_1_0; }
	}

	public class Mcs_name_refElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mcs_name_ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefMcsTypedNameCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefMcsTypedNameIDTerminalRuleCall_0_0_1 = (RuleCall)cRefMcsTypedNameCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cChainAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cChainMethodChainParserRuleCall_1_0_0 = (RuleCall)cChainAssignment_1_0.eContents().get(0);
		
		//Mcs_name_ref:
		//	ref=[McsTypedName] -> (chain=MethodChain)?;
		@Override public ParserRule getRule() { return rule; }

		//ref=[McsTypedName] -> (chain=MethodChain)?
		public Group getGroup() { return cGroup; }

		//ref=[McsTypedName]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[McsTypedName]
		public CrossReference getRefMcsTypedNameCrossReference_0_0() { return cRefMcsTypedNameCrossReference_0_0; }

		//ID
		public RuleCall getRefMcsTypedNameIDTerminalRuleCall_0_0_1() { return cRefMcsTypedNameIDTerminalRuleCall_0_0_1; }

		//-> (chain=MethodChain)?
		public Group getGroup_1() { return cGroup_1; }

		//chain=MethodChain
		public Assignment getChainAssignment_1_0() { return cChainAssignment_1_0; }

		//MethodChain
		public RuleCall getChainMethodChainParserRuleCall_1_0_0() { return cChainMethodChainParserRuleCall_1_0_0; }
	}

	public class MethodChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodChainAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cBuiltinAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cBuiltinBuiltInFnCallParserRuleCall_1_0_1_0_0 = (RuleCall)cBuiltinAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cMethodAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final RuleCall cMethodFnCallParserRuleCall_1_0_1_1_0 = (RuleCall)cMethodAssignment_1_0_1_1.eContents().get(0);
		
		//MethodChain:
		//	{MethodChain} -> ("." (builtin+=BuiltInFnCall | method+=FnCall))*;
		@Override public ParserRule getRule() { return rule; }

		//{MethodChain} -> ("." (builtin+=BuiltInFnCall | method+=FnCall))*
		public Group getGroup() { return cGroup; }

		//{MethodChain}
		public Action getMethodChainAction_0() { return cMethodChainAction_0; }

		//-> ("." (builtin+=BuiltInFnCall | method+=FnCall))*
		public Group getGroup_1() { return cGroup_1; }

		//"." (builtin+=BuiltInFnCall | method+=FnCall)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }

		//builtin+=BuiltInFnCall | method+=FnCall
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//builtin+=BuiltInFnCall
		public Assignment getBuiltinAssignment_1_0_1_0() { return cBuiltinAssignment_1_0_1_0; }

		//BuiltInFnCall
		public RuleCall getBuiltinBuiltInFnCallParserRuleCall_1_0_1_0_0() { return cBuiltinBuiltInFnCallParserRuleCall_1_0_1_0_0; }

		//method+=FnCall
		public Assignment getMethodAssignment_1_0_1_1() { return cMethodAssignment_1_0_1_1; }

		//FnCall
		public RuleCall getMethodFnCallParserRuleCall_1_0_1_1_0() { return cMethodFnCallParserRuleCall_1_0_1_1_0; }
	}

	public class BuiltInFnCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFnCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFnBuiltInFnParserRuleCall_0_0 = (RuleCall)cFnAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cLessThanSignKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cNewtypeAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cNewtypeType_expressionParserRuleCall_4_0_1_0 = (RuleCall)cNewtypeAssignment_4_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		
		//BuiltInFnCall:
		//	fn=BuiltInFn "(" (args+=Expr ("," args+=Expr)*)? ")" => ("<" newtype=Type_expression ">")?;
		@Override public ParserRule getRule() { return rule; }

		//fn=BuiltInFn "(" (args+=Expr ("," args+=Expr)*)? ")" => ("<" newtype=Type_expression ">")?
		public Group getGroup() { return cGroup; }

		//fn=BuiltInFn
		public Assignment getFnAssignment_0() { return cFnAssignment_0; }

		//BuiltInFn
		public RuleCall getFnBuiltInFnParserRuleCall_0_0() { return cFnBuiltInFnParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Expr
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_2_0_0() { return cArgsExprParserRuleCall_2_0_0; }

		//("," args+=Expr)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_2_1_1_0() { return cArgsExprParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//=> ("<" newtype=Type_expression ">")?
		public Group getGroup_4() { return cGroup_4; }

		//"<" newtype=Type_expression ">"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"<"
		public Keyword getLessThanSignKeyword_4_0_0() { return cLessThanSignKeyword_4_0_0; }

		//newtype=Type_expression
		public Assignment getNewtypeAssignment_4_0_1() { return cNewtypeAssignment_4_0_1; }

		//Type_expression
		public RuleCall getNewtypeType_expressionParserRuleCall_4_0_1_0() { return cNewtypeType_expressionParserRuleCall_4_0_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_0_2() { return cGreaterThanSignKeyword_4_0_2; }
	}

	public class FnCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FnCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFnFunctionCrossReference_0_0 = (CrossReference)cFnAssignment_0.eContents().get(0);
		private final RuleCall cFnFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFnFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExprParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExprParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cLessThanSignKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cNewtypeAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cNewtypeType_expressionParserRuleCall_4_0_1_0 = (RuleCall)cNewtypeAssignment_4_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		
		//FnCall:
		//	fn=[Function] "(" (args+=Expr ("," args+=Expr)*)? ")" => ("<" newtype=Type_expression ">")?;
		@Override public ParserRule getRule() { return rule; }

		//fn=[Function] "(" (args+=Expr ("," args+=Expr)*)? ")" => ("<" newtype=Type_expression ">")?
		public Group getGroup() { return cGroup; }

		//fn=[Function]
		public Assignment getFnAssignment_0() { return cFnAssignment_0; }

		//[Function]
		public CrossReference getFnFunctionCrossReference_0_0() { return cFnFunctionCrossReference_0_0; }

		//ID
		public RuleCall getFnFunctionIDTerminalRuleCall_0_0_1() { return cFnFunctionIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=Expr ("," args+=Expr)*)?
		public Group getGroup_2() { return cGroup_2; }

		//args+=Expr
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_2_0_0() { return cArgsExprParserRuleCall_2_0_0; }

		//("," args+=Expr)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//args+=Expr
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }

		//Expr
		public RuleCall getArgsExprParserRuleCall_2_1_1_0() { return cArgsExprParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//=> ("<" newtype=Type_expression ">")?
		public Group getGroup_4() { return cGroup_4; }

		//"<" newtype=Type_expression ">"
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"<"
		public Keyword getLessThanSignKeyword_4_0_0() { return cLessThanSignKeyword_4_0_0; }

		//newtype=Type_expression
		public Assignment getNewtypeAssignment_4_0_1() { return cNewtypeAssignment_4_0_1; }

		//Type_expression
		public RuleCall getNewtypeType_expressionParserRuleCall_4_0_1_0() { return cNewtypeType_expressionParserRuleCall_4_0_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_0_2() { return cGreaterThanSignKeyword_4_0_2; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cFailExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	FailExpr;
		@Override public ParserRule getRule() { return rule; }

		//FailExpr
		public RuleCall getFailExprParserRuleCall() { return cFailExprParserRuleCall; }
	}

	public class FailExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FailExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpFailKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightParameterizedStringParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//FailExpr returns Expr:
		//	ImpliesExpr (=> ({BinaryExpr.left=current} op="fail") right=ParameterizedString)?;
		@Override public ParserRule getRule() { return rule; }

		//ImpliesExpr (=> ({BinaryExpr.left=current} op="fail") right=ParameterizedString)?
		public Group getGroup() { return cGroup; }

		//ImpliesExpr
		public RuleCall getImpliesExprParserRuleCall_0() { return cImpliesExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="fail") right=ParameterizedString)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="fail")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="fail"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="fail"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"fail"
		public Keyword getOpFailKeyword_1_0_0_1_0() { return cOpFailKeyword_1_0_0_1_0; }

		//right=ParameterizedString
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ParameterizedString
		public RuleCall getRightParameterizedStringParserRuleCall_1_1_0() { return cRightParameterizedStringParserRuleCall_1_1_0; }
	}

	public class ImpliesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImpliesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightImpliesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//ImpliesExpr returns Expr:
		//	OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?;
		@Override public ParserRule getRule() { return rule; }

		//OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?
		public Group getGroup() { return cGroup; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_0() { return cOrExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="=>")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="=>"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="=>"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"=>"
		public Keyword getOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0() { return cOpEqualsSignGreaterThanSignKeyword_1_0_0_1_0; }

		//right=ImpliesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//ImpliesExpr
		public RuleCall getRightImpliesExprParserRuleCall_1_1_0() { return cRightImpliesExprParserRuleCall_1_1_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpOrKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpr returns Expr:
		//	AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op="or") right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op="or")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op="or"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="or"
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"or"
		public Keyword getOpOrKeyword_1_0_0_1_0() { return cOpOrKeyword_1_0_0_1_0; }

		//right=AndExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_1_0() { return cRightAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInstanceOfExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cOpAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cOpAndKeyword_1_0_0_1_0_0 = (Keyword)cOpAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final Keyword cOpAndthenKeyword_1_0_0_1_1_0 = (Keyword)cOpAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightInstanceOfExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpr returns Expr:
		//	InstanceOfExpr (=> ({BinaryExpr.left=current} (op="and" | op="andthen")) right=InstanceOfExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//InstanceOfExpr (=> ({BinaryExpr.left=current} (op="and" | op="andthen")) right=InstanceOfExpr)*
		public Group getGroup() { return cGroup; }

		//InstanceOfExpr
		public RuleCall getInstanceOfExprParserRuleCall_0() { return cInstanceOfExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} (op="and" | op="andthen")) right=InstanceOfExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} (op="and" | op="andthen"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} (op="and" | op="andthen")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op="and" | op="andthen"
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//op="and"
		public Assignment getOpAssignment_1_0_0_1_0() { return cOpAssignment_1_0_0_1_0; }

		//"and"
		public Keyword getOpAndKeyword_1_0_0_1_0_0() { return cOpAndKeyword_1_0_0_1_0_0; }

		//op="andthen"
		public Assignment getOpAssignment_1_0_0_1_1() { return cOpAssignment_1_0_0_1_1; }

		//"andthen"
		public Keyword getOpAndthenKeyword_1_0_0_1_1_0() { return cOpAndthenKeyword_1_0_0_1_1_0; }

		//right=InstanceOfExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//InstanceOfExpr
		public RuleCall getRightInstanceOfExprParserRuleCall_1_1_0() { return cRightInstanceOfExprParserRuleCall_1_1_0; }
	}

	public class InstanceOfExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceOfExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cInstanceOfExprExprAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeType_expressionParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//InstanceOfExpr returns Expr:
		//	RelationalExpr (=> ({InstanceOfExpr.expr=current} "instanceof") type=Type_expression)?;
		@Override public ParserRule getRule() { return rule; }

		//RelationalExpr (=> ({InstanceOfExpr.expr=current} "instanceof") type=Type_expression)?
		public Group getGroup() { return cGroup; }

		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }

		//(=> ({InstanceOfExpr.expr=current} "instanceof") type=Type_expression)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({InstanceOfExpr.expr=current} "instanceof")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{InstanceOfExpr.expr=current} "instanceof"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{InstanceOfExpr.expr=current}
		public Action getInstanceOfExprExprAction_1_0_0_0() { return cInstanceOfExprExprAction_1_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_0_1() { return cInstanceofKeyword_1_0_0_1; }

		//type=Type_expression
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_1_1_0() { return cTypeType_expressionParserRuleCall_1_1_0; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//RelationalOp:
		//	"<" | "<=" | ">" | ">=" | "=" | "<>";
		@Override public ParserRule getRule() { return rule; }

		//"<" | "<=" | ">" | ">=" | "=" | "<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1() { return cLessThanSignEqualsSignKeyword_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_5() { return cLessThanSignGreaterThanSignKeyword_5; }
	}

	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPlusExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpr returns Expr:
		//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?;
		@Override public ParserRule getRule() { return rule; }

		//PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup() { return cGroup; }

		//PlusExpr
		public RuleCall getPlusExprParserRuleCall_0() { return cPlusExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=RelationalOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=RelationalOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0_0_1_0() { return cOpRelationalOpParserRuleCall_1_0_0_1_0; }

		//right=PlusExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PlusExpr
		public RuleCall getRightPlusExprParserRuleCall_1_1_0() { return cRightPlusExprParserRuleCall_1_1_0; }
	}

	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTimesExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightTimesExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusExpr returns Expr:
		//	TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*
		public Group getGroup() { return cGroup; }

		//TimesExpr
		public RuleCall getTimesExprParserRuleCall_0() { return cTimesExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("+" | "-"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("+" | "-")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_0_0_1_0_0() { return cOpPlusSignKeyword_1_0_0_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=TimesExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//TimesExpr
		public RuleCall getRightTimesExprParserRuleCall_1_1_0() { return cRightTimesExprParserRuleCall_1_1_0; }
	}

	public class TimesExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimesExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_0_1_0 = (Alternatives)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1_0_1 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_0_0_1_0_2 = (Keyword)cOpAlternatives_1_0_0_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//TimesExpr returns Expr:
		//	PrefixExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "%")) right=PrefixExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//PrefixExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "%")) right=PrefixExpr)*
		public Group getGroup() { return cGroup; }

		//PrefixExpr
		public RuleCall getPrefixExprParserRuleCall_0() { return cPrefixExprParserRuleCall_0; }

		//(=> ({BinaryExpr.left=current} op=("*" | "/" | "%")) right=PrefixExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({BinaryExpr.left=current} op=("*" | "/" | "%"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{BinaryExpr.left=current} op=("*" | "/" | "%")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }

		//op=("*" | "/" | "%")
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }

		//"*" | "/" | "%"
		public Alternatives getOpAlternatives_1_0_0_1_0() { return cOpAlternatives_1_0_0_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_0_1_0_0() { return cOpAsteriskKeyword_1_0_0_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_0_1_0_1() { return cOpSolidusKeyword_1_0_0_1_0_1; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_0_0_1_0_2() { return cOpPercentSignKeyword_1_0_0_1_0_2; }

		//right=PrefixExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrefixExpr
		public RuleCall getRightPrefixExprParserRuleCall_1_1_0() { return cRightPrefixExprParserRuleCall_1_1_0; }
	}

	public class PrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_0 = (Alternatives)cOpAssignment_0_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1_0_0 = (Keyword)cOpAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_0_1_0_1 = (Keyword)cOpAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cPostCastExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrefixExpr returns Expr:
		//	{UnaryExpr} op=("-" | "not") expr=PrefixExpr //|   {PreCastExpr} '(' type=Type_expression ')' expr=PrefixExpr
		//	| PostCastExpr;
		@Override public ParserRule getRule() { return rule; }

		//{UnaryExpr} op=("-" | "not") expr=PrefixExpr //|   {PreCastExpr} '(' type=Type_expression ')' expr=PrefixExpr
		//| PostCastExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpr} op=("-" | "not") expr=PrefixExpr
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }

		//op=("-" | "not")
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//"-" | "not"
		public Alternatives getOpAlternatives_0_1_0() { return cOpAlternatives_0_1_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_0_1_0_0() { return cOpHyphenMinusKeyword_0_1_0_0; }

		//"not"
		public Keyword getOpNotKeyword_0_1_0_1() { return cOpNotKeyword_0_1_0_1; }

		//expr=PrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_0_2_0() { return cExprPrefixExprParserRuleCall_0_2_0; }

		//PostCastExpr
		public RuleCall getPostCastExprParserRuleCall_1() { return cPostCastExprParserRuleCall_1; }
	}

	public class PostCastExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostCastExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostCastExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpression_termParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cNewtypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNewtypeType_expressionParserRuleCall_2_0_1_0 = (RuleCall)cNewtypeAssignment_2_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cChainAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cChainMethodChainParserRuleCall_3_0_0 = (RuleCall)cChainAssignment_3_0.eContents().get(0);
		
		//PostCastExpr:
		//	{PostCastExpr} expr=Expression_term -> ("<" newtype=Type_expression ">")? -> (chain=MethodChain)?;
		@Override public ParserRule getRule() { return rule; }

		//{PostCastExpr} expr=Expression_term -> ("<" newtype=Type_expression ">")? -> (chain=MethodChain)?
		public Group getGroup() { return cGroup; }

		//{PostCastExpr}
		public Action getPostCastExprAction_0() { return cPostCastExprAction_0; }

		//expr=Expression_term
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression_term
		public RuleCall getExprExpression_termParserRuleCall_1_0() { return cExprExpression_termParserRuleCall_1_0; }

		//-> ("<" newtype=Type_expression ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<" newtype=Type_expression ">"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0_0() { return cLessThanSignKeyword_2_0_0; }

		//newtype=Type_expression
		public Assignment getNewtypeAssignment_2_0_1() { return cNewtypeAssignment_2_0_1; }

		//Type_expression
		public RuleCall getNewtypeType_expressionParserRuleCall_2_0_1_0() { return cNewtypeType_expressionParserRuleCall_2_0_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_0_2() { return cGreaterThanSignKeyword_2_0_2; }

		//-> (chain=MethodChain)?
		public Group getGroup_3() { return cGroup_3; }

		//chain=MethodChain
		public Assignment getChainAssignment_3_0() { return cChainAssignment_3_0; }

		//MethodChain
		public RuleCall getChainMethodChainParserRuleCall_3_0_0() { return cChainMethodChainParserRuleCall_3_0_0; }
	}

	public class MCSNameExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MCSNameExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMCSNameExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRootAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cRootRootKeyword_1_0_0 = (Keyword)cRootAssignment_1_0.eContents().get(0);
		private final Assignment cIrootAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIrootIrootKeyword_1_1_0 = (Keyword)cIrootAssignment_1_1.eContents().get(0);
		private final Assignment cNilAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cNilNilKeyword_1_2_0 = (Keyword)cNilAssignment_1_2.eContents().get(0);
		private final Assignment cEmptyAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cEmptyEmptyKeyword_1_3_0 = (Keyword)cEmptyAssignment_1_3.eContents().get(0);
		private final Assignment cAllmodesAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final Keyword cAllmodesAllmodesKeyword_1_4_0 = (Keyword)cAllmodesAssignment_1_4.eContents().get(0);
		private final Assignment cTypednamerefAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cTypednamerefMcs_name_refParserRuleCall_1_5_0 = (RuleCall)cTypednamerefAssignment_1_5.eContents().get(0);
		
		//MCSNameExpr:
		//	{MCSNameExpr} (root?="root" | iroot?="iroot" | nil?="nil" | empty?="empty" | allmodes?="allmodes" | =>
		//	typednameref=Mcs_name_ref);
		@Override public ParserRule getRule() { return rule; }

		//{MCSNameExpr} (root?="root" | iroot?="iroot" | nil?="nil" | empty?="empty" | allmodes?="allmodes" | =>
		//typednameref=Mcs_name_ref)
		public Group getGroup() { return cGroup; }

		//{MCSNameExpr}
		public Action getMCSNameExprAction_0() { return cMCSNameExprAction_0; }

		//root?="root" | iroot?="iroot" | nil?="nil" | empty?="empty" | allmodes?="allmodes" | => typednameref=Mcs_name_ref
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//root?="root"
		public Assignment getRootAssignment_1_0() { return cRootAssignment_1_0; }

		//"root"
		public Keyword getRootRootKeyword_1_0_0() { return cRootRootKeyword_1_0_0; }

		//iroot?="iroot"
		public Assignment getIrootAssignment_1_1() { return cIrootAssignment_1_1; }

		//"iroot"
		public Keyword getIrootIrootKeyword_1_1_0() { return cIrootIrootKeyword_1_1_0; }

		//nil?="nil"
		public Assignment getNilAssignment_1_2() { return cNilAssignment_1_2; }

		//"nil"
		public Keyword getNilNilKeyword_1_2_0() { return cNilNilKeyword_1_2_0; }

		//empty?="empty"
		public Assignment getEmptyAssignment_1_3() { return cEmptyAssignment_1_3; }

		//"empty"
		public Keyword getEmptyEmptyKeyword_1_3_0() { return cEmptyEmptyKeyword_1_3_0; }

		//allmodes?="allmodes"
		public Assignment getAllmodesAssignment_1_4() { return cAllmodesAssignment_1_4; }

		//"allmodes"
		public Keyword getAllmodesAllmodesKeyword_1_4_0() { return cAllmodesAllmodesKeyword_1_4_0; }

		//=> typednameref=Mcs_name_ref
		public Assignment getTypednamerefAssignment_1_5() { return cTypednamerefAssignment_1_5; }

		//Mcs_name_ref
		public RuleCall getTypednamerefMcs_name_refParserRuleCall_1_5_0() { return cTypednamerefMcs_name_refParserRuleCall_1_5_0; }
	}

	public class Expression_termElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMCSNameExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPkgExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPackageKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPackageAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cPackageAadlPackageCrossReference_1_3_0 = (CrossReference)cPackageAssignment_1_3.eContents().get(0);
		private final RuleCall cPackageAadlPackageIDTerminalRuleCall_1_3_0_1 = (RuleCall)cPackageAadlPackageCrossReference_1_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCompExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cClassifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cClassifierComponentClassifierTermParserRuleCall_2_1_0 = (RuleCall)cClassifierAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRefExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cReferenceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReferenceRefTermParserRuleCall_3_1_0 = (RuleCall)cReferenceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cThisExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cThisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cFullStopKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSubAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSubNestedDotIDParserRuleCall_4_2_1_0 = (RuleCall)cSubAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIntExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValIntegerTermParserRuleCall_5_1_0 = (RuleCall)cValAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cRealExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValRealTermParserRuleCall_6_1_0 = (RuleCall)cValAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cBoolExprAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValBooleanLiteralParserRuleCall_7_1_0 = (RuleCall)cValAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cStringExprAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cValAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValStringTermParserRuleCall_8_1_0 = (RuleCall)cValAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cRangeAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cValAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cValRangeParserRuleCall_9_1_0 = (RuleCall)cValAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cIfThenElseExprAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cIfKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cCondAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cCondExprParserRuleCall_10_2_0 = (RuleCall)cCondAssignment_10_2.eContents().get(0);
		private final Keyword cThenKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Assignment cThenAssignment_10_4 = (Assignment)cGroup_10.eContents().get(4);
		private final RuleCall cThenExprParserRuleCall_10_4_0 = (RuleCall)cThenAssignment_10_4.eContents().get(0);
		private final Keyword cElseKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		private final Assignment cElseAssignment_10_6 = (Assignment)cGroup_10.eContents().get(6);
		private final RuleCall cElseExprParserRuleCall_10_6_0 = (RuleCall)cElseAssignment_10_6.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cQuantifiedExprAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cQuantAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final Alternatives cQuantAlternatives_11_1_0 = (Alternatives)cQuantAssignment_11_1.eContents().get(0);
		private final Keyword cQuantForallKeyword_11_1_0_0 = (Keyword)cQuantAlternatives_11_1_0.eContents().get(0);
		private final Keyword cQuantForeachKeyword_11_1_0_1 = (Keyword)cQuantAlternatives_11_1_0.eContents().get(1);
		private final Keyword cQuantExistsKeyword_11_1_0_2 = (Keyword)cQuantAlternatives_11_1_0.eContents().get(2);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_11_2_0 = (Keyword)cGroup_11_2.eContents().get(0);
		private final Assignment cArgsAssignment_11_2_1 = (Assignment)cGroup_11_2.eContents().get(1);
		private final RuleCall cArgsParameterParserRuleCall_11_2_1_0 = (RuleCall)cArgsAssignment_11_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_2_2 = (Keyword)cGroup_11_2.eContents().get(2);
		private final Keyword cFullStopKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Assignment cExprAssignment_11_4 = (Assignment)cGroup_11.eContents().get(4);
		private final RuleCall cExprExprParserRuleCall_11_4_0 = (RuleCall)cExprAssignment_11_4.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cBuiltInFnCallExprAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Assignment cBuiltinAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cBuiltinBuiltInFnCallParserRuleCall_12_1_0 = (RuleCall)cBuiltinAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cFnCallExprAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Assignment cFnAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cFnFnCallParserRuleCall_13_1_0 = (RuleCall)cFnAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cTheoremCallExprAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Assignment cFnAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cFnTheorem_callParserRuleCall_14_1_0 = (RuleCall)cFnAssignment_14_1.eContents().get(0);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cFilterSetAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Assignment cListAssignment_15_1 = (Assignment)cGroup_15.eContents().get(1);
		private final Keyword cListListKeyword_15_1_0 = (Keyword)cListAssignment_15_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cExpAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cExpExprParserRuleCall_15_3_0 = (RuleCall)cExpAssignment_15_3.eContents().get(0);
		private final Alternatives cAlternatives_15_4 = (Alternatives)cGroup_15.eContents().get(4);
		private final Group cGroup_15_4_0 = (Group)cAlternatives_15_4.eContents().get(0);
		private final Action cFilterMapExprMapAction_15_4_0_0 = (Action)cGroup_15_4_0.eContents().get(0);
		private final Keyword cForKeyword_15_4_0_1 = (Keyword)cGroup_15_4_0.eContents().get(1);
		private final Group cGroup_15_4_0_2 = (Group)cGroup_15_4_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_15_4_0_2_0 = (Keyword)cGroup_15_4_0_2.eContents().get(0);
		private final Assignment cArgsAssignment_15_4_0_2_1 = (Assignment)cGroup_15_4_0_2.eContents().get(1);
		private final RuleCall cArgsParameterParserRuleCall_15_4_0_2_1_0 = (RuleCall)cArgsAssignment_15_4_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_4_0_2_2 = (Keyword)cGroup_15_4_0_2.eContents().get(2);
		private final Group cGroup_15_4_0_3 = (Group)cGroup_15_4_0.eContents().get(3);
		private final Keyword cVerticalLineKeyword_15_4_0_3_0 = (Keyword)cGroup_15_4_0_3.eContents().get(0);
		private final Assignment cFilterAssignment_15_4_0_3_1 = (Assignment)cGroup_15_4_0_3.eContents().get(1);
		private final RuleCall cFilterExprParserRuleCall_15_4_0_3_1_0 = (RuleCall)cFilterAssignment_15_4_0_3_1.eContents().get(0);
		private final Group cGroup_15_4_1 = (Group)cAlternatives_15_4.eContents().get(1);
		private final Action cSetExprExprsAction_15_4_1_0 = (Action)cGroup_15_4_1.eContents().get(0);
		private final Group cGroup_15_4_1_1 = (Group)cGroup_15_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_15_4_1_1_0 = (Keyword)cGroup_15_4_1_1.eContents().get(0);
		private final Assignment cExprsAssignment_15_4_1_1_1 = (Assignment)cGroup_15_4_1_1.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_15_4_1_1_1_0 = (RuleCall)cExprsAssignment_15_4_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_15_5 = (Keyword)cGroup_15.eContents().get(5);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cMappingExprAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cExpr1Assignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cExpr1ExprParserRuleCall_16_2_0 = (RuleCall)cExpr1Assignment_16_2.eContents().get(0);
		private final Keyword cCommaKeyword_16_3 = (Keyword)cGroup_16.eContents().get(3);
		private final Assignment cExpr2Assignment_16_4 = (Assignment)cGroup_16.eContents().get(4);
		private final RuleCall cExpr2ExprParserRuleCall_16_4_0 = (RuleCall)cExpr2Assignment_16_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_16_5 = (Keyword)cGroup_16.eContents().get(5);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cEmptySetExprAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_17_2 = (Keyword)cGroup_17.eContents().get(2);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Action cLetExprAction_18_0 = (Action)cGroup_18.eContents().get(0);
		private final Keyword cLetKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Assignment cLocalAssignment_18_2 = (Assignment)cGroup_18.eContents().get(2);
		private final RuleCall cLocalMcsTypedNameParserRuleCall_18_2_0 = (RuleCall)cLocalAssignment_18_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_18_3 = (Keyword)cGroup_18.eContents().get(3);
		private final Assignment cExpr1Assignment_18_4 = (Assignment)cGroup_18.eContents().get(4);
		private final RuleCall cExpr1ExprParserRuleCall_18_4_0 = (RuleCall)cExpr1Assignment_18_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_18_5 = (Keyword)cGroup_18.eContents().get(5);
		private final Assignment cExpr2Assignment_18_6 = (Assignment)cGroup_18.eContents().get(6);
		private final RuleCall cExpr2ExprParserRuleCall_18_6_0 = (RuleCall)cExpr2Assignment_18_6.eContents().get(0);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Keyword cLeftParenthesisKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final RuleCall cExprParserRuleCall_19_1 = (RuleCall)cGroup_19.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_19_2 = (Keyword)cGroup_19.eContents().get(2);
		
		//Expression_term returns Expr:
		//	MCSNameExpr | {PkgExpr} "package" "(" package=[aadl2::AadlPackage] ")" | {CompExpr} classifier= // rules identical to
		//	ComponentClassifierTerm | {RefExpr} reference= // Properties.xtext expressions
		//	RefTerm | {ThisExpr} "this" ("." sub=NestedDotID)? // from Properties grammar
		//	| {IntExpr} val=IntegerTerm | {RealExpr} val=RealTerm | {BoolExpr} val=BooleanLiteral | {StringExpr} val=StringTerm |
		//	{Range} val= // Int and Real Range from AADL.xtext
		//	Range | {IfThenElseExpr} "if" cond=Expr "then" then=Expr "else" else=Expr | {QuantifiedExpr} quant=("forall" |
		//	"foreach" | "exists") ("(" / *|Domain* / args+=Parameter ")")+ "." expr=Expr | {BuiltInFnCallExpr}
		//	builtin=BuiltInFnCall | {FnCallExpr} fn=FnCall | {TheoremCallExpr} fn=Theorem_call | {FilterSet} list?="list"? "{"
		//	exp=Expr ({FilterMapExpr.map=current} "for" ("(" / *|Domain* / args+=Parameter ")")+ ("|" filter=Expr)? |
		//	{SetExpr.exprs+=current} ("," exprs+=Expr)*) "}" | {MappingExpr} "[" expr1=Expr "," expr2=Expr "]" | {EmptySetExpr}
		//	"{" "}" | {LetExpr} "let" local=McsTypedName "=" expr1=Expr ";" expr2=Expr | "(" Expr ")";
		@Override public ParserRule getRule() { return rule; }

		//MCSNameExpr | {PkgExpr} "package" "(" package=[aadl2::AadlPackage] ")" | {CompExpr} classifier= // rules identical to
		//ComponentClassifierTerm | {RefExpr} reference= // Properties.xtext expressions
		//RefTerm | {ThisExpr} "this" ("." sub=NestedDotID)? // from Properties grammar
		//| {IntExpr} val=IntegerTerm | {RealExpr} val=RealTerm | {BoolExpr} val=BooleanLiteral | {StringExpr} val=StringTerm |
		//{Range} val= // Int and Real Range from AADL.xtext
		//Range | {IfThenElseExpr} "if" cond=Expr "then" then=Expr "else" else=Expr | {QuantifiedExpr} quant=("forall" | "foreach"
		//| "exists") ("(" / *|Domain* / args+=Parameter ")")+ "." expr=Expr | {BuiltInFnCallExpr} builtin=BuiltInFnCall |
		//{FnCallExpr} fn=FnCall | {TheoremCallExpr} fn=Theorem_call | {FilterSet} list?="list"? "{" exp=Expr
		//({FilterMapExpr.map=current} "for" ("(" / *|Domain* / args+=Parameter ")")+ ("|" filter=Expr)? |
		//{SetExpr.exprs+=current} ("," exprs+=Expr)*) "}" | {MappingExpr} "[" expr1=Expr "," expr2=Expr "]" | {EmptySetExpr}
		//"{" "}" | {LetExpr} "let" local=McsTypedName "=" expr1=Expr ";" expr2=Expr | "(" Expr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MCSNameExpr
		public RuleCall getMCSNameExprParserRuleCall_0() { return cMCSNameExprParserRuleCall_0; }

		//{PkgExpr} "package" "(" package=[aadl2::AadlPackage] ")"
		public Group getGroup_1() { return cGroup_1; }

		//{PkgExpr}
		public Action getPkgExprAction_1_0() { return cPkgExprAction_1_0; }

		//"package"
		public Keyword getPackageKeyword_1_1() { return cPackageKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//package=[aadl2::AadlPackage]
		public Assignment getPackageAssignment_1_3() { return cPackageAssignment_1_3; }

		//[aadl2::AadlPackage]
		public CrossReference getPackageAadlPackageCrossReference_1_3_0() { return cPackageAadlPackageCrossReference_1_3_0; }

		//ID
		public RuleCall getPackageAadlPackageIDTerminalRuleCall_1_3_0_1() { return cPackageAadlPackageIDTerminalRuleCall_1_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//{CompExpr} classifier= // rules identical to
		//ComponentClassifierTerm
		public Group getGroup_2() { return cGroup_2; }

		//{CompExpr}
		public Action getCompExprAction_2_0() { return cCompExprAction_2_0; }

		//classifier= // rules identical to
		//ComponentClassifierTerm
		public Assignment getClassifierAssignment_2_1() { return cClassifierAssignment_2_1; }

		//// rules identical to
		//ComponentClassifierTerm
		public RuleCall getClassifierComponentClassifierTermParserRuleCall_2_1_0() { return cClassifierComponentClassifierTermParserRuleCall_2_1_0; }

		//{RefExpr} reference= // Properties.xtext expressions
		//RefTerm
		public Group getGroup_3() { return cGroup_3; }

		//{RefExpr}
		public Action getRefExprAction_3_0() { return cRefExprAction_3_0; }

		//reference= // Properties.xtext expressions
		//RefTerm
		public Assignment getReferenceAssignment_3_1() { return cReferenceAssignment_3_1; }

		//// Properties.xtext expressions
		//RefTerm
		public RuleCall getReferenceRefTermParserRuleCall_3_1_0() { return cReferenceRefTermParserRuleCall_3_1_0; }

		//{ThisExpr} "this" ("." sub=NestedDotID)? // from Properties grammar
		public Group getGroup_4() { return cGroup_4; }

		//{ThisExpr}
		public Action getThisExprAction_4_0() { return cThisExprAction_4_0; }

		//"this"
		public Keyword getThisKeyword_4_1() { return cThisKeyword_4_1; }

		//("." sub=NestedDotID)?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"."
		public Keyword getFullStopKeyword_4_2_0() { return cFullStopKeyword_4_2_0; }

		//sub=NestedDotID
		public Assignment getSubAssignment_4_2_1() { return cSubAssignment_4_2_1; }

		//NestedDotID
		public RuleCall getSubNestedDotIDParserRuleCall_4_2_1_0() { return cSubNestedDotIDParserRuleCall_4_2_1_0; }

		//{IntExpr} val=IntegerTerm
		public Group getGroup_5() { return cGroup_5; }

		//{IntExpr}
		public Action getIntExprAction_5_0() { return cIntExprAction_5_0; }

		//val=IntegerTerm
		public Assignment getValAssignment_5_1() { return cValAssignment_5_1; }

		//IntegerTerm
		public RuleCall getValIntegerTermParserRuleCall_5_1_0() { return cValIntegerTermParserRuleCall_5_1_0; }

		//{RealExpr} val=RealTerm
		public Group getGroup_6() { return cGroup_6; }

		//{RealExpr}
		public Action getRealExprAction_6_0() { return cRealExprAction_6_0; }

		//val=RealTerm
		public Assignment getValAssignment_6_1() { return cValAssignment_6_1; }

		//RealTerm
		public RuleCall getValRealTermParserRuleCall_6_1_0() { return cValRealTermParserRuleCall_6_1_0; }

		//{BoolExpr} val=BooleanLiteral
		public Group getGroup_7() { return cGroup_7; }

		//{BoolExpr}
		public Action getBoolExprAction_7_0() { return cBoolExprAction_7_0; }

		//val=BooleanLiteral
		public Assignment getValAssignment_7_1() { return cValAssignment_7_1; }

		//BooleanLiteral
		public RuleCall getValBooleanLiteralParserRuleCall_7_1_0() { return cValBooleanLiteralParserRuleCall_7_1_0; }

		//{StringExpr} val=StringTerm
		public Group getGroup_8() { return cGroup_8; }

		//{StringExpr}
		public Action getStringExprAction_8_0() { return cStringExprAction_8_0; }

		//val=StringTerm
		public Assignment getValAssignment_8_1() { return cValAssignment_8_1; }

		//StringTerm
		public RuleCall getValStringTermParserRuleCall_8_1_0() { return cValStringTermParserRuleCall_8_1_0; }

		//{Range} val= // Int and Real Range from AADL.xtext
		//Range
		public Group getGroup_9() { return cGroup_9; }

		//{Range}
		public Action getRangeAction_9_0() { return cRangeAction_9_0; }

		//val= // Int and Real Range from AADL.xtext
		//Range
		public Assignment getValAssignment_9_1() { return cValAssignment_9_1; }

		//// Int and Real Range from AADL.xtext
		//Range
		public RuleCall getValRangeParserRuleCall_9_1_0() { return cValRangeParserRuleCall_9_1_0; }

		//{IfThenElseExpr} "if" cond=Expr "then" then=Expr "else" else=Expr
		public Group getGroup_10() { return cGroup_10; }

		//{IfThenElseExpr}
		public Action getIfThenElseExprAction_10_0() { return cIfThenElseExprAction_10_0; }

		//"if"
		public Keyword getIfKeyword_10_1() { return cIfKeyword_10_1; }

		//cond=Expr
		public Assignment getCondAssignment_10_2() { return cCondAssignment_10_2; }

		//Expr
		public RuleCall getCondExprParserRuleCall_10_2_0() { return cCondExprParserRuleCall_10_2_0; }

		//"then"
		public Keyword getThenKeyword_10_3() { return cThenKeyword_10_3; }

		//then=Expr
		public Assignment getThenAssignment_10_4() { return cThenAssignment_10_4; }

		//Expr
		public RuleCall getThenExprParserRuleCall_10_4_0() { return cThenExprParserRuleCall_10_4_0; }

		//"else"
		public Keyword getElseKeyword_10_5() { return cElseKeyword_10_5; }

		//else=Expr
		public Assignment getElseAssignment_10_6() { return cElseAssignment_10_6; }

		//Expr
		public RuleCall getElseExprParserRuleCall_10_6_0() { return cElseExprParserRuleCall_10_6_0; }

		//{QuantifiedExpr} quant=("forall" | "foreach" | "exists") ("(" / *|Domain* / args+=Parameter ")")+ "." expr=Expr
		public Group getGroup_11() { return cGroup_11; }

		//{QuantifiedExpr}
		public Action getQuantifiedExprAction_11_0() { return cQuantifiedExprAction_11_0; }

		//quant=("forall" | "foreach" | "exists")
		public Assignment getQuantAssignment_11_1() { return cQuantAssignment_11_1; }

		//"forall" | "foreach" | "exists"
		public Alternatives getQuantAlternatives_11_1_0() { return cQuantAlternatives_11_1_0; }

		//"forall"
		public Keyword getQuantForallKeyword_11_1_0_0() { return cQuantForallKeyword_11_1_0_0; }

		//"foreach"
		public Keyword getQuantForeachKeyword_11_1_0_1() { return cQuantForeachKeyword_11_1_0_1; }

		//"exists"
		public Keyword getQuantExistsKeyword_11_1_0_2() { return cQuantExistsKeyword_11_1_0_2; }

		//("(" / *|Domain* / args+=Parameter ")")+
		public Group getGroup_11_2() { return cGroup_11_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_11_2_0() { return cLeftParenthesisKeyword_11_2_0; }

		/// *|Domain* / args+=Parameter
		public Assignment getArgsAssignment_11_2_1() { return cArgsAssignment_11_2_1; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_11_2_1_0() { return cArgsParameterParserRuleCall_11_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_2_2() { return cRightParenthesisKeyword_11_2_2; }

		//"."
		public Keyword getFullStopKeyword_11_3() { return cFullStopKeyword_11_3; }

		//expr=Expr
		public Assignment getExprAssignment_11_4() { return cExprAssignment_11_4; }

		//Expr
		public RuleCall getExprExprParserRuleCall_11_4_0() { return cExprExprParserRuleCall_11_4_0; }

		//{BuiltInFnCallExpr} builtin=BuiltInFnCall
		public Group getGroup_12() { return cGroup_12; }

		//{BuiltInFnCallExpr}
		public Action getBuiltInFnCallExprAction_12_0() { return cBuiltInFnCallExprAction_12_0; }

		//builtin=BuiltInFnCall
		public Assignment getBuiltinAssignment_12_1() { return cBuiltinAssignment_12_1; }

		//BuiltInFnCall
		public RuleCall getBuiltinBuiltInFnCallParserRuleCall_12_1_0() { return cBuiltinBuiltInFnCallParserRuleCall_12_1_0; }

		//{FnCallExpr} fn=FnCall
		public Group getGroup_13() { return cGroup_13; }

		//{FnCallExpr}
		public Action getFnCallExprAction_13_0() { return cFnCallExprAction_13_0; }

		//fn=FnCall
		public Assignment getFnAssignment_13_1() { return cFnAssignment_13_1; }

		//FnCall
		public RuleCall getFnFnCallParserRuleCall_13_1_0() { return cFnFnCallParserRuleCall_13_1_0; }

		//{TheoremCallExpr} fn=Theorem_call
		public Group getGroup_14() { return cGroup_14; }

		//{TheoremCallExpr}
		public Action getTheoremCallExprAction_14_0() { return cTheoremCallExprAction_14_0; }

		//fn=Theorem_call
		public Assignment getFnAssignment_14_1() { return cFnAssignment_14_1; }

		//Theorem_call
		public RuleCall getFnTheorem_callParserRuleCall_14_1_0() { return cFnTheorem_callParserRuleCall_14_1_0; }

		//{FilterSet} list?="list"? "{" exp=Expr ({FilterMapExpr.map=current} "for" ("(" / *|Domain* / args+=Parameter ")")+ ("|"
		//filter=Expr)? | {SetExpr.exprs+=current} ("," exprs+=Expr)*) "}"
		public Group getGroup_15() { return cGroup_15; }

		//{FilterSet}
		public Action getFilterSetAction_15_0() { return cFilterSetAction_15_0; }

		//list?="list"?
		public Assignment getListAssignment_15_1() { return cListAssignment_15_1; }

		//"list"
		public Keyword getListListKeyword_15_1_0() { return cListListKeyword_15_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_15_2() { return cLeftCurlyBracketKeyword_15_2; }

		//exp=Expr
		public Assignment getExpAssignment_15_3() { return cExpAssignment_15_3; }

		//Expr
		public RuleCall getExpExprParserRuleCall_15_3_0() { return cExpExprParserRuleCall_15_3_0; }

		//{FilterMapExpr.map=current} "for" ("(" / *|Domain* / args+=Parameter ")")+ ("|" filter=Expr)? | {SetExpr.exprs+=current}
		//("," exprs+=Expr)*
		public Alternatives getAlternatives_15_4() { return cAlternatives_15_4; }

		//{FilterMapExpr.map=current} "for" ("(" / *|Domain* / args+=Parameter ")")+ ("|" filter=Expr)?
		public Group getGroup_15_4_0() { return cGroup_15_4_0; }

		//{FilterMapExpr.map=current}
		public Action getFilterMapExprMapAction_15_4_0_0() { return cFilterMapExprMapAction_15_4_0_0; }

		//"for"
		public Keyword getForKeyword_15_4_0_1() { return cForKeyword_15_4_0_1; }

		//("(" / *|Domain* / args+=Parameter ")")+
		public Group getGroup_15_4_0_2() { return cGroup_15_4_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_15_4_0_2_0() { return cLeftParenthesisKeyword_15_4_0_2_0; }

		/// *|Domain* / args+=Parameter
		public Assignment getArgsAssignment_15_4_0_2_1() { return cArgsAssignment_15_4_0_2_1; }

		//Parameter
		public RuleCall getArgsParameterParserRuleCall_15_4_0_2_1_0() { return cArgsParameterParserRuleCall_15_4_0_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_15_4_0_2_2() { return cRightParenthesisKeyword_15_4_0_2_2; }

		//("|" filter=Expr)?
		public Group getGroup_15_4_0_3() { return cGroup_15_4_0_3; }

		//"|"
		public Keyword getVerticalLineKeyword_15_4_0_3_0() { return cVerticalLineKeyword_15_4_0_3_0; }

		//filter=Expr
		public Assignment getFilterAssignment_15_4_0_3_1() { return cFilterAssignment_15_4_0_3_1; }

		//Expr
		public RuleCall getFilterExprParserRuleCall_15_4_0_3_1_0() { return cFilterExprParserRuleCall_15_4_0_3_1_0; }

		//{SetExpr.exprs+=current} ("," exprs+=Expr)*
		public Group getGroup_15_4_1() { return cGroup_15_4_1; }

		//{SetExpr.exprs+=current}
		public Action getSetExprExprsAction_15_4_1_0() { return cSetExprExprsAction_15_4_1_0; }

		//("," exprs+=Expr)*
		public Group getGroup_15_4_1_1() { return cGroup_15_4_1_1; }

		//","
		public Keyword getCommaKeyword_15_4_1_1_0() { return cCommaKeyword_15_4_1_1_0; }

		//exprs+=Expr
		public Assignment getExprsAssignment_15_4_1_1_1() { return cExprsAssignment_15_4_1_1_1; }

		//Expr
		public RuleCall getExprsExprParserRuleCall_15_4_1_1_1_0() { return cExprsExprParserRuleCall_15_4_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15_5() { return cRightCurlyBracketKeyword_15_5; }

		//{MappingExpr} "[" expr1=Expr "," expr2=Expr "]"
		public Group getGroup_16() { return cGroup_16; }

		//{MappingExpr}
		public Action getMappingExprAction_16_0() { return cMappingExprAction_16_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_16_1() { return cLeftSquareBracketKeyword_16_1; }

		//expr1=Expr
		public Assignment getExpr1Assignment_16_2() { return cExpr1Assignment_16_2; }

		//Expr
		public RuleCall getExpr1ExprParserRuleCall_16_2_0() { return cExpr1ExprParserRuleCall_16_2_0; }

		//","
		public Keyword getCommaKeyword_16_3() { return cCommaKeyword_16_3; }

		//expr2=Expr
		public Assignment getExpr2Assignment_16_4() { return cExpr2Assignment_16_4; }

		//Expr
		public RuleCall getExpr2ExprParserRuleCall_16_4_0() { return cExpr2ExprParserRuleCall_16_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_16_5() { return cRightSquareBracketKeyword_16_5; }

		//{EmptySetExpr} "{" "}"
		public Group getGroup_17() { return cGroup_17; }

		//{EmptySetExpr}
		public Action getEmptySetExprAction_17_0() { return cEmptySetExprAction_17_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_17_1() { return cLeftCurlyBracketKeyword_17_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17_2() { return cRightCurlyBracketKeyword_17_2; }

		//{LetExpr} "let" local=McsTypedName "=" expr1=Expr ";" expr2=Expr
		public Group getGroup_18() { return cGroup_18; }

		//{LetExpr}
		public Action getLetExprAction_18_0() { return cLetExprAction_18_0; }

		//"let"
		public Keyword getLetKeyword_18_1() { return cLetKeyword_18_1; }

		//local=McsTypedName
		public Assignment getLocalAssignment_18_2() { return cLocalAssignment_18_2; }

		//McsTypedName
		public RuleCall getLocalMcsTypedNameParserRuleCall_18_2_0() { return cLocalMcsTypedNameParserRuleCall_18_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_18_3() { return cEqualsSignKeyword_18_3; }

		//expr1=Expr
		public Assignment getExpr1Assignment_18_4() { return cExpr1Assignment_18_4; }

		//Expr
		public RuleCall getExpr1ExprParserRuleCall_18_4_0() { return cExpr1ExprParserRuleCall_18_4_0; }

		//";"
		public Keyword getSemicolonKeyword_18_5() { return cSemicolonKeyword_18_5; }

		//expr2=Expr
		public Assignment getExpr2Assignment_18_6() { return cExpr2Assignment_18_6; }

		//Expr
		public RuleCall getExpr2ExprParserRuleCall_18_6_0() { return cExpr2ExprParserRuleCall_18_6_0; }

		//"(" Expr ")"
		public Group getGroup_19() { return cGroup_19; }

		//"("
		public Keyword getLeftParenthesisKeyword_19_0() { return cLeftParenthesisKeyword_19_0; }

		//Expr
		public RuleCall getExprParserRuleCall_19_1() { return cExprParserRuleCall_19_1; }

		//")"
		public Keyword getRightParenthesisKeyword_19_2() { return cRightParenthesisKeyword_19_2; }
	}

	public class BuiltInFnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInFn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHas_rangeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloorKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCeilingKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cHas_unitsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUnit_literalKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cUpperKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLowerKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cHas_deltaKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cDeltaKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cConcatKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cEqKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cLessKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cCase_eqKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cCase_lessKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cInKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUnionKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cIntersectKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cHas_memberKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cSizeKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cSumKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cMaxKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cMinKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cGetKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cSublistKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cJoinKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cAs_setKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cKeyKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cValKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cQualified_nameKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cLocal_nameKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cPath_name_ofKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cPackage_nameKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cIs_owned_byKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cHas_parentKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cParentKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cOwnerKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cEqualKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cElement_typeKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cHas_propertyKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cNumberSignQuestionMarkKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cPropertyKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cNumberSignKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cImportsKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cClassifiersKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cHas_extendsKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cExtendsKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cCategoryKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cHas_bindingsKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cBindings_mapKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cComponent_typeKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cIs_of_typeKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cHas_inverseKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cInverseKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cContanedKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cIn_modesKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cIs_prototype_refKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cPrototypeKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cIs_c_type_instanceKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cC_typeKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cClassKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cArray_cardinalKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cModesKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		private final Keyword cModes_mapKeyword_63 = (Keyword)cAlternatives.eContents().get(63);
		private final Keyword cMode_state_machineKeyword_64 = (Keyword)cAlternatives.eContents().get(64);
		private final Keyword cMode_transitionsKeyword_65 = (Keyword)cAlternatives.eContents().get(65);
		private final Keyword cSubcomponentsKeyword_66 = (Keyword)cAlternatives.eContents().get(66);
		private final Keyword cInstancesKeyword_67 = (Keyword)cAlternatives.eContents().get(67);
		private final Keyword cFeaturesKeyword_68 = (Keyword)cAlternatives.eContents().get(68);
		private final Keyword cFlat_featuresKeyword_69 = (Keyword)cAlternatives.eContents().get(69);
		private final Keyword cConnectionsKeyword_70 = (Keyword)cAlternatives.eContents().get(70);
		private final Keyword cCall_targetKeyword_71 = (Keyword)cAlternatives.eContents().get(71);
		private final Keyword cIs_bidirectionalKeyword_72 = (Keyword)cAlternatives.eContents().get(72);
		private final Keyword cSourceKeyword_73 = (Keyword)cAlternatives.eContents().get(73);
		private final Keyword cDestinationKeyword_74 = (Keyword)cAlternatives.eContents().get(74);
		private final Keyword cIs_refinedKeyword_75 = (Keyword)cAlternatives.eContents().get(75);
		private final Keyword cIs_partialKeyword_76 = (Keyword)cAlternatives.eContents().get(76);
		private final Keyword cHas_prototype_refKeyword_77 = (Keyword)cAlternatives.eContents().get(77);
		private final Keyword cHas_classifier_typeKeyword_78 = (Keyword)cAlternatives.eContents().get(78);
		private final Keyword cClassifier_typeKeyword_79 = (Keyword)cAlternatives.eContents().get(79);
		private final Keyword cDirectionKeyword_80 = (Keyword)cAlternatives.eContents().get(80);
		private final Keyword cIs_inverseKeyword_81 = (Keyword)cAlternatives.eContents().get(81);
		private final Keyword cFeatureKeyword_82 = (Keyword)cAlternatives.eContents().get(82);
		private final Keyword cPathKeyword_83 = (Keyword)cAlternatives.eContents().get(83);
		private final Keyword cTransitive_pathKeyword_84 = (Keyword)cAlternatives.eContents().get(84);
		private final Keyword cIs_component_prototypeKeyword_85 = (Keyword)cAlternatives.eContents().get(85);
		private final Keyword cType_literalKeyword_86 = (Keyword)cAlternatives.eContents().get(86);
		private final Keyword cHas_listKeyword_87 = (Keyword)cAlternatives.eContents().get(87);
		private final Keyword cIs_feature_prototypeKeyword_88 = (Keyword)cAlternatives.eContents().get(88);
		private final Keyword cIs_fg_prototypeKeyword_89 = (Keyword)cAlternatives.eContents().get(89);
		private final Keyword cHas_classifier_referenceKeyword_90 = (Keyword)cAlternatives.eContents().get(90);
		private final Keyword cClassifier_referenceKeyword_91 = (Keyword)cAlternatives.eContents().get(91);
		private final Keyword cIs_initial_modeKeyword_92 = (Keyword)cAlternatives.eContents().get(92);
		private final Keyword cIs_required_modeKeyword_93 = (Keyword)cAlternatives.eContents().get(93);
		private final Keyword cMapped_setKeyword_94 = (Keyword)cAlternatives.eContents().get(94);
		private final Keyword cIs_namedKeyword_95 = (Keyword)cAlternatives.eContents().get(95);
		private final Keyword cTransition_nameKeyword_96 = (Keyword)cAlternatives.eContents().get(96);
		private final Keyword cTransition_triggersKeyword_97 = (Keyword)cAlternatives.eContents().get(97);
		private final Keyword cStart_mode_stateKeyword_98 = (Keyword)cAlternatives.eContents().get(98);
		private final Keyword cEnd_mode_stateKeyword_99 = (Keyword)cAlternatives.eContents().get(99);
		
		//BuiltInFn: // real primary type methods
		//	"has_range" // integer and real primary type 
		//	// range of integer, real primary type 
		//	// string primary type 
		//	// set methods
		//	// set and list methods 
		//	// list methods
		//	// mapping methods
		//	// T_Element methods
		//	// T_Package methods
		//	// T_Classifier methods
		//	// T_Classifier and I_Component methods
		//	//	C_Impl methods
		//	//	C_Feature_Group methods
		//	//	T_Instance methods
		//	//	I_Component methods
		//	// 	I_Component, I_Feature and I_Call_Sequence methods
		//	// 	I_Component and I_Call_Sequence methods
		//	//	I_Subprogram_Call methods
		//	//	I_Connection methods
		//	//	I_Feature, I_Flow_Spec I_End_To_End methods
		//	//	I_Feature methods
		//	//	I_Feature group methods
		//	//	I_Flow_Spec, I_Flow_Impl methods
		//	//	I_Flow_Impl,I_End_To_End_Flow methods
		//	//	I_End_To_End_Flow methods
		//	//	I_Prototype methods
		//	//	I_Mode methods
		//	//	I_Mode_Transition methods
		//	| "range" | "floor" | "ceiling" | "has_units" | "unit_literal" | "upper" | "lower" | "has_delta" | "delta" | "concat" |
		//	"eq" | "less" | "case_eq" | "case_less" | "in" | "union" | "intersect" | "has_member" | "size" | "sum" | "max" |
		//	"min" | "get" | "sublist" | "join" | "as_set" | "key" | "val" | "qualified_name" | "local_name" | "path_name_of" |
		//	"package_name" | "is_owned_by" | "has_parent" | "parent" | "owner" | "equal" | "element_type" | "has_property" | "#?"
		//	| "property" | "#" | "imports" | "classifiers" | "has_extends" | "extends" | "category" | "has_bindings" |
		//	"bindings_map" | "component_type" | "is_of_type" | "has_inverse" | "inverse" | "contaned" | "in_modes" |
		//	"is_prototype_ref" | "prototype" | "is_c_type_instance" | "c_type" | // duplicate names | 'has_bindings' | 'bindings_map'
		//	"class" | "array_cardinal" | "modes" | "modes_map" | "mode_state_machine" | "mode_transitions" | "subcomponents" |
		//	"instances" | "features" | "flat_features" | "connections" | "call_target" | "is_bidirectional" | "source" |
		//	"destination" | "is_refined" | "is_partial" | // % duplicate | 'prototype' | 'array_cardinal'
		//	"has_prototype_ref" | "has_classifier_type" | "classifier_type" | "direction" | // duplicate | 'has_bindings' | 'bindings_map' |	'features' | 'flat_features' 
		//	"is_inverse" | //duplicate | 'is_refined'
		//	"feature" | //duplicate for I_Flow_Impl | 'feature' 
		//	"path" | //duplicate |	'is_refined' | 'path' 
		//	"transitive_path" | "is_component_prototype" | "type_literal" | "has_list" | "is_feature_prototype" | "is_fg_prototype"
		//	| "has_classifier_reference" | "classifier_reference" | "is_initial_mode" | "is_required_mode" | "mapped_set" |
		//	"is_named" | "transition_name" | "transition_triggers" | "start_mode_state" | "end_mode_state";
		@Override public ParserRule getRule() { return rule; }

		//// real primary type methods
		//"has_range" // integer and real primary type 
		//// range of integer, real primary type 
		//// string primary type 
		//// set methods
		//// set and list methods 
		//// list methods
		//// mapping methods
		//// T_Element methods
		//// T_Package methods
		//// T_Classifier methods
		//// T_Classifier and I_Component methods
		////	C_Impl methods
		////	C_Feature_Group methods
		////	T_Instance methods
		////	I_Component methods
		//// 	I_Component, I_Feature and I_Call_Sequence methods
		//// 	I_Component and I_Call_Sequence methods
		////	I_Subprogram_Call methods
		////	I_Connection methods
		////	I_Feature, I_Flow_Spec I_End_To_End methods
		////	I_Feature methods
		////	I_Feature group methods
		////	I_Flow_Spec, I_Flow_Impl methods
		////	I_Flow_Impl,I_End_To_End_Flow methods
		////	I_End_To_End_Flow methods
		////	I_Prototype methods
		////	I_Mode methods
		////	I_Mode_Transition methods
		//| "range" | "floor" | "ceiling" | "has_units" | "unit_literal" | "upper" | "lower" | "has_delta" | "delta" | "concat" |
		//"eq" | "less" | "case_eq" | "case_less" | "in" | "union" | "intersect" | "has_member" | "size" | "sum" | "max" | "min"
		//| "get" | "sublist" | "join" | "as_set" | "key" | "val" | "qualified_name" | "local_name" | "path_name_of" |
		//"package_name" | "is_owned_by" | "has_parent" | "parent" | "owner" | "equal" | "element_type" | "has_property" | "#?"
		//| "property" | "#" | "imports" | "classifiers" | "has_extends" | "extends" | "category" | "has_bindings" |
		//"bindings_map" | "component_type" | "is_of_type" | "has_inverse" | "inverse" | "contaned" | "in_modes" |
		//"is_prototype_ref" | "prototype" | "is_c_type_instance" | "c_type" | // duplicate names | 'has_bindings' | 'bindings_map'
		//"class" | "array_cardinal" | "modes" | "modes_map" | "mode_state_machine" | "mode_transitions" | "subcomponents" |
		//"instances" | "features" | "flat_features" | "connections" | "call_target" | "is_bidirectional" | "source" |
		//"destination" | "is_refined" | "is_partial" | // % duplicate | 'prototype' | 'array_cardinal'
		//"has_prototype_ref" | "has_classifier_type" | "classifier_type" | "direction" | // duplicate | 'has_bindings' | 'bindings_map' |	'features' | 'flat_features' 
		//"is_inverse" | //duplicate | 'is_refined'
		//"feature" | //duplicate for I_Flow_Impl | 'feature' 
		//"path" | //duplicate |	'is_refined' | 'path' 
		//"transitive_path" | "is_component_prototype" | "type_literal" | "has_list" | "is_feature_prototype" | "is_fg_prototype"
		//| "has_classifier_reference" | "classifier_reference" | "is_initial_mode" | "is_required_mode" | "mapped_set" |
		//"is_named" | "transition_name" | "transition_triggers" | "start_mode_state" | "end_mode_state"
		public Alternatives getAlternatives() { return cAlternatives; }

		//// real primary type methods
		//"has_range"
		public Keyword getHas_rangeKeyword_0() { return cHas_rangeKeyword_0; }

		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }

		//"floor"
		public Keyword getFloorKeyword_2() { return cFloorKeyword_2; }

		//"ceiling"
		public Keyword getCeilingKeyword_3() { return cCeilingKeyword_3; }

		//"has_units"
		public Keyword getHas_unitsKeyword_4() { return cHas_unitsKeyword_4; }

		//"unit_literal"
		public Keyword getUnit_literalKeyword_5() { return cUnit_literalKeyword_5; }

		//"upper"
		public Keyword getUpperKeyword_6() { return cUpperKeyword_6; }

		//"lower"
		public Keyword getLowerKeyword_7() { return cLowerKeyword_7; }

		//"has_delta"
		public Keyword getHas_deltaKeyword_8() { return cHas_deltaKeyword_8; }

		//"delta"
		public Keyword getDeltaKeyword_9() { return cDeltaKeyword_9; }

		//"concat"
		public Keyword getConcatKeyword_10() { return cConcatKeyword_10; }

		//"eq"
		public Keyword getEqKeyword_11() { return cEqKeyword_11; }

		//"less"
		public Keyword getLessKeyword_12() { return cLessKeyword_12; }

		//"case_eq"
		public Keyword getCase_eqKeyword_13() { return cCase_eqKeyword_13; }

		//"case_less"
		public Keyword getCase_lessKeyword_14() { return cCase_lessKeyword_14; }

		//"in"
		public Keyword getInKeyword_15() { return cInKeyword_15; }

		//"union"
		public Keyword getUnionKeyword_16() { return cUnionKeyword_16; }

		//"intersect"
		public Keyword getIntersectKeyword_17() { return cIntersectKeyword_17; }

		//"has_member"
		public Keyword getHas_memberKeyword_18() { return cHas_memberKeyword_18; }

		//"size"
		public Keyword getSizeKeyword_19() { return cSizeKeyword_19; }

		//"sum"
		public Keyword getSumKeyword_20() { return cSumKeyword_20; }

		//"max"
		public Keyword getMaxKeyword_21() { return cMaxKeyword_21; }

		//"min"
		public Keyword getMinKeyword_22() { return cMinKeyword_22; }

		//"get"
		public Keyword getGetKeyword_23() { return cGetKeyword_23; }

		//"sublist"
		public Keyword getSublistKeyword_24() { return cSublistKeyword_24; }

		//"join"
		public Keyword getJoinKeyword_25() { return cJoinKeyword_25; }

		//"as_set"
		public Keyword getAs_setKeyword_26() { return cAs_setKeyword_26; }

		//"key"
		public Keyword getKeyKeyword_27() { return cKeyKeyword_27; }

		//"val"
		public Keyword getValKeyword_28() { return cValKeyword_28; }

		//"qualified_name"
		public Keyword getQualified_nameKeyword_29() { return cQualified_nameKeyword_29; }

		//"local_name"
		public Keyword getLocal_nameKeyword_30() { return cLocal_nameKeyword_30; }

		//"path_name_of"
		public Keyword getPath_name_ofKeyword_31() { return cPath_name_ofKeyword_31; }

		//"package_name"
		public Keyword getPackage_nameKeyword_32() { return cPackage_nameKeyword_32; }

		//"is_owned_by"
		public Keyword getIs_owned_byKeyword_33() { return cIs_owned_byKeyword_33; }

		//"has_parent"
		public Keyword getHas_parentKeyword_34() { return cHas_parentKeyword_34; }

		//"parent"
		public Keyword getParentKeyword_35() { return cParentKeyword_35; }

		//"owner"
		public Keyword getOwnerKeyword_36() { return cOwnerKeyword_36; }

		//"equal"
		public Keyword getEqualKeyword_37() { return cEqualKeyword_37; }

		//"element_type"
		public Keyword getElement_typeKeyword_38() { return cElement_typeKeyword_38; }

		//"has_property"
		public Keyword getHas_propertyKeyword_39() { return cHas_propertyKeyword_39; }

		//"#?"
		public Keyword getNumberSignQuestionMarkKeyword_40() { return cNumberSignQuestionMarkKeyword_40; }

		//"property"
		public Keyword getPropertyKeyword_41() { return cPropertyKeyword_41; }

		//"#"
		public Keyword getNumberSignKeyword_42() { return cNumberSignKeyword_42; }

		//"imports"
		public Keyword getImportsKeyword_43() { return cImportsKeyword_43; }

		//"classifiers"
		public Keyword getClassifiersKeyword_44() { return cClassifiersKeyword_44; }

		//"has_extends"
		public Keyword getHas_extendsKeyword_45() { return cHas_extendsKeyword_45; }

		//"extends"
		public Keyword getExtendsKeyword_46() { return cExtendsKeyword_46; }

		//"category"
		public Keyword getCategoryKeyword_47() { return cCategoryKeyword_47; }

		//"has_bindings"
		public Keyword getHas_bindingsKeyword_48() { return cHas_bindingsKeyword_48; }

		//"bindings_map"
		public Keyword getBindings_mapKeyword_49() { return cBindings_mapKeyword_49; }

		//"component_type"
		public Keyword getComponent_typeKeyword_50() { return cComponent_typeKeyword_50; }

		//"is_of_type"
		public Keyword getIs_of_typeKeyword_51() { return cIs_of_typeKeyword_51; }

		//"has_inverse"
		public Keyword getHas_inverseKeyword_52() { return cHas_inverseKeyword_52; }

		//"inverse"
		public Keyword getInverseKeyword_53() { return cInverseKeyword_53; }

		//"contaned"
		public Keyword getContanedKeyword_54() { return cContanedKeyword_54; }

		//"in_modes"
		public Keyword getIn_modesKeyword_55() { return cIn_modesKeyword_55; }

		//"is_prototype_ref"
		public Keyword getIs_prototype_refKeyword_56() { return cIs_prototype_refKeyword_56; }

		//"prototype"
		public Keyword getPrototypeKeyword_57() { return cPrototypeKeyword_57; }

		//"is_c_type_instance"
		public Keyword getIs_c_type_instanceKeyword_58() { return cIs_c_type_instanceKeyword_58; }

		//"c_type"
		public Keyword getC_typeKeyword_59() { return cC_typeKeyword_59; }

		//// duplicate names | 'has_bindings' | 'bindings_map'
		//"class"
		public Keyword getClassKeyword_60() { return cClassKeyword_60; }

		//"array_cardinal"
		public Keyword getArray_cardinalKeyword_61() { return cArray_cardinalKeyword_61; }

		//"modes"
		public Keyword getModesKeyword_62() { return cModesKeyword_62; }

		//"modes_map"
		public Keyword getModes_mapKeyword_63() { return cModes_mapKeyword_63; }

		//"mode_state_machine"
		public Keyword getMode_state_machineKeyword_64() { return cMode_state_machineKeyword_64; }

		//"mode_transitions"
		public Keyword getMode_transitionsKeyword_65() { return cMode_transitionsKeyword_65; }

		//"subcomponents"
		public Keyword getSubcomponentsKeyword_66() { return cSubcomponentsKeyword_66; }

		//"instances"
		public Keyword getInstancesKeyword_67() { return cInstancesKeyword_67; }

		//"features"
		public Keyword getFeaturesKeyword_68() { return cFeaturesKeyword_68; }

		//"flat_features"
		public Keyword getFlat_featuresKeyword_69() { return cFlat_featuresKeyword_69; }

		//"connections"
		public Keyword getConnectionsKeyword_70() { return cConnectionsKeyword_70; }

		//"call_target"
		public Keyword getCall_targetKeyword_71() { return cCall_targetKeyword_71; }

		//"is_bidirectional"
		public Keyword getIs_bidirectionalKeyword_72() { return cIs_bidirectionalKeyword_72; }

		//"source"
		public Keyword getSourceKeyword_73() { return cSourceKeyword_73; }

		//"destination"
		public Keyword getDestinationKeyword_74() { return cDestinationKeyword_74; }

		//"is_refined"
		public Keyword getIs_refinedKeyword_75() { return cIs_refinedKeyword_75; }

		//"is_partial"
		public Keyword getIs_partialKeyword_76() { return cIs_partialKeyword_76; }

		//// % duplicate | 'prototype' | 'array_cardinal'
		//"has_prototype_ref"
		public Keyword getHas_prototype_refKeyword_77() { return cHas_prototype_refKeyword_77; }

		//"has_classifier_type"
		public Keyword getHas_classifier_typeKeyword_78() { return cHas_classifier_typeKeyword_78; }

		//"classifier_type"
		public Keyword getClassifier_typeKeyword_79() { return cClassifier_typeKeyword_79; }

		//"direction"
		public Keyword getDirectionKeyword_80() { return cDirectionKeyword_80; }

		//// duplicate | 'has_bindings' | 'bindings_map' |	'features' | 'flat_features' 
		//"is_inverse"
		public Keyword getIs_inverseKeyword_81() { return cIs_inverseKeyword_81; }

		////duplicate | 'is_refined'
		//"feature"
		public Keyword getFeatureKeyword_82() { return cFeatureKeyword_82; }

		////duplicate for I_Flow_Impl | 'feature' 
		//"path"
		public Keyword getPathKeyword_83() { return cPathKeyword_83; }

		////duplicate |	'is_refined' | 'path' 
		//"transitive_path"
		public Keyword getTransitive_pathKeyword_84() { return cTransitive_pathKeyword_84; }

		//"is_component_prototype"
		public Keyword getIs_component_prototypeKeyword_85() { return cIs_component_prototypeKeyword_85; }

		//"type_literal"
		public Keyword getType_literalKeyword_86() { return cType_literalKeyword_86; }

		//"has_list"
		public Keyword getHas_listKeyword_87() { return cHas_listKeyword_87; }

		//"is_feature_prototype"
		public Keyword getIs_feature_prototypeKeyword_88() { return cIs_feature_prototypeKeyword_88; }

		//"is_fg_prototype"
		public Keyword getIs_fg_prototypeKeyword_89() { return cIs_fg_prototypeKeyword_89; }

		//"has_classifier_reference"
		public Keyword getHas_classifier_referenceKeyword_90() { return cHas_classifier_referenceKeyword_90; }

		//"classifier_reference"
		public Keyword getClassifier_referenceKeyword_91() { return cClassifier_referenceKeyword_91; }

		//"is_initial_mode"
		public Keyword getIs_initial_modeKeyword_92() { return cIs_initial_modeKeyword_92; }

		//"is_required_mode"
		public Keyword getIs_required_modeKeyword_93() { return cIs_required_modeKeyword_93; }

		//"mapped_set"
		public Keyword getMapped_setKeyword_94() { return cMapped_setKeyword_94; }

		//"is_named"
		public Keyword getIs_namedKeyword_95() { return cIs_namedKeyword_95; }

		//"transition_name"
		public Keyword getTransition_nameKeyword_96() { return cTransition_nameKeyword_96; }

		//"transition_triggers"
		public Keyword getTransition_triggersKeyword_97() { return cTransition_triggersKeyword_97; }

		//"start_mode_state"
		public Keyword getStart_mode_stateKeyword_98() { return cStart_mode_stateKeyword_98; }

		//"end_mode_state"
		public Keyword getEnd_mode_stateKeyword_99() { return cEnd_mode_stateKeyword_99; }
	}

	public class Type_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBasicAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBasicBasic_typeParserRuleCall_0_0 = (RuleCall)cBasicAssignment_0.eContents().get(0);
		private final Assignment cCompositeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeComposite_typeParserRuleCall_1_0 = (RuleCall)cCompositeAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cElementElement_typeParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		
		//// Type rules
		//Type_expression:
		//	basic=Basic_type | composite=Composite_type | element=Element_type;
		@Override public ParserRule getRule() { return rule; }

		//basic=Basic_type | composite=Composite_type | element=Element_type
		public Alternatives getAlternatives() { return cAlternatives; }

		//basic=Basic_type
		public Assignment getBasicAssignment_0() { return cBasicAssignment_0; }

		//Basic_type
		public RuleCall getBasicBasic_typeParserRuleCall_0_0() { return cBasicBasic_typeParserRuleCall_0_0; }

		//composite=Composite_type
		public Assignment getCompositeAssignment_1() { return cCompositeAssignment_1; }

		//Composite_type
		public RuleCall getCompositeComposite_typeParserRuleCall_1_0() { return cCompositeComposite_typeParserRuleCall_1_0; }

		//element=Element_type
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }

		//Element_type
		public RuleCall getElementElement_typeParserRuleCall_2_0() { return cElementElement_typeParserRuleCall_2_0; }
	}

	public class Basic_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Basic_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBasic_typeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPtypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cPtypeProperty_typeKeyword_1_0_0 = (Keyword)cPtypeAssignment_1_0.eContents().get(0);
		private final Assignment cPrefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cPrefProperty_refKeyword_1_1_0 = (Keyword)cPrefAssignment_1_1.eContents().get(0);
		private final Assignment cBoolAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cBoolUnnamedBooleanTypeParserRuleCall_1_2_0 = (RuleCall)cBoolAssignment_1_2.eContents().get(0);
		private final Assignment cStringAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cStringUnnamedStringTypeParserRuleCall_1_3_0 = (RuleCall)cStringAssignment_1_3.eContents().get(0);
		private final Assignment cEnumerAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cEnumerUnnamedEnumerationTypeParserRuleCall_1_4_0 = (RuleCall)cEnumerAssignment_1_4.eContents().get(0);
		private final Assignment cUnitsAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cUnitsUnnamedUnitsTypeParserRuleCall_1_5_0 = (RuleCall)cUnitsAssignment_1_5.eContents().get(0);
		private final Assignment cIntegerAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cIntegerUnnamedIntegerTypeParserRuleCall_1_6_0 = (RuleCall)cIntegerAssignment_1_6.eContents().get(0);
		private final Assignment cRealAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cRealUnnamedRealTypeParserRuleCall_1_7_0 = (RuleCall)cRealAssignment_1_7.eContents().get(0);
		private final Assignment cRangeAssignment_1_8 = (Assignment)cAlternatives_1.eContents().get(8);
		private final RuleCall cRangeUnnamedRangeTypeParserRuleCall_1_8_0 = (RuleCall)cRangeAssignment_1_8.eContents().get(0);
		private final Assignment cTypenameAssignment_1_9 = (Assignment)cAlternatives_1.eContents().get(9);
		private final CrossReference cTypenameType_declarationCrossReference_1_9_0 = (CrossReference)cTypenameAssignment_1_9.eContents().get(0);
		private final RuleCall cTypenameType_declarationIDTerminalRuleCall_1_9_0_1 = (RuleCall)cTypenameType_declarationCrossReference_1_9_0.eContents().get(1);
		
		//// basic types rules
		//Basic_type:
		//	{Basic_type} (ptype="property_type" // from core AADL, shortcuts supported
		//	| pref="property_ref" | bool=UnnamedBooleanType | string=UnnamedStringType | enumer=UnnamedEnumerationType |
		//	units=UnnamedUnitsType | integer=UnnamedIntegerType | real=UnnamedRealType | range=UnnamedRangeType | typename= // must be a user defined type
		//	[Type_declaration]);
		@Override public ParserRule getRule() { return rule; }

		//{Basic_type} (ptype="property_type" // from core AADL, shortcuts supported
		//| pref="property_ref" | bool=UnnamedBooleanType | string=UnnamedStringType | enumer=UnnamedEnumerationType |
		//units=UnnamedUnitsType | integer=UnnamedIntegerType | real=UnnamedRealType | range=UnnamedRangeType | typename= // must be a user defined type
		//[Type_declaration])
		public Group getGroup() { return cGroup; }

		//{Basic_type}
		public Action getBasic_typeAction_0() { return cBasic_typeAction_0; }

		//ptype="property_type" // from core AADL, shortcuts supported
		//| pref="property_ref" | bool=UnnamedBooleanType | string=UnnamedStringType | enumer=UnnamedEnumerationType |
		//units=UnnamedUnitsType | integer=UnnamedIntegerType | real=UnnamedRealType | range=UnnamedRangeType | typename= // must be a user defined type
		//[Type_declaration]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ptype="property_type"
		public Assignment getPtypeAssignment_1_0() { return cPtypeAssignment_1_0; }

		//"property_type"
		public Keyword getPtypeProperty_typeKeyword_1_0_0() { return cPtypeProperty_typeKeyword_1_0_0; }

		//pref="property_ref"
		public Assignment getPrefAssignment_1_1() { return cPrefAssignment_1_1; }

		//"property_ref"
		public Keyword getPrefProperty_refKeyword_1_1_0() { return cPrefProperty_refKeyword_1_1_0; }

		//bool=UnnamedBooleanType
		public Assignment getBoolAssignment_1_2() { return cBoolAssignment_1_2; }

		//UnnamedBooleanType
		public RuleCall getBoolUnnamedBooleanTypeParserRuleCall_1_2_0() { return cBoolUnnamedBooleanTypeParserRuleCall_1_2_0; }

		//string=UnnamedStringType
		public Assignment getStringAssignment_1_3() { return cStringAssignment_1_3; }

		//UnnamedStringType
		public RuleCall getStringUnnamedStringTypeParserRuleCall_1_3_0() { return cStringUnnamedStringTypeParserRuleCall_1_3_0; }

		//enumer=UnnamedEnumerationType
		public Assignment getEnumerAssignment_1_4() { return cEnumerAssignment_1_4; }

		//UnnamedEnumerationType
		public RuleCall getEnumerUnnamedEnumerationTypeParserRuleCall_1_4_0() { return cEnumerUnnamedEnumerationTypeParserRuleCall_1_4_0; }

		//units=UnnamedUnitsType
		public Assignment getUnitsAssignment_1_5() { return cUnitsAssignment_1_5; }

		//UnnamedUnitsType
		public RuleCall getUnitsUnnamedUnitsTypeParserRuleCall_1_5_0() { return cUnitsUnnamedUnitsTypeParserRuleCall_1_5_0; }

		//integer=UnnamedIntegerType
		public Assignment getIntegerAssignment_1_6() { return cIntegerAssignment_1_6; }

		//UnnamedIntegerType
		public RuleCall getIntegerUnnamedIntegerTypeParserRuleCall_1_6_0() { return cIntegerUnnamedIntegerTypeParserRuleCall_1_6_0; }

		//real=UnnamedRealType
		public Assignment getRealAssignment_1_7() { return cRealAssignment_1_7; }

		//UnnamedRealType
		public RuleCall getRealUnnamedRealTypeParserRuleCall_1_7_0() { return cRealUnnamedRealTypeParserRuleCall_1_7_0; }

		//range=UnnamedRangeType
		public Assignment getRangeAssignment_1_8() { return cRangeAssignment_1_8; }

		//UnnamedRangeType
		public RuleCall getRangeUnnamedRangeTypeParserRuleCall_1_8_0() { return cRangeUnnamedRangeTypeParserRuleCall_1_8_0; }

		//typename= // must be a user defined type
		//[Type_declaration]
		public Assignment getTypenameAssignment_1_9() { return cTypenameAssignment_1_9; }

		//// must be a user defined type
		//[Type_declaration]
		public CrossReference getTypenameType_declarationCrossReference_1_9_0() { return cTypenameType_declarationCrossReference_1_9_0; }

		//ID
		public RuleCall getTypenameType_declarationIDTerminalRuleCall_1_9_0_1() { return cTypenameType_declarationIDTerminalRuleCall_1_9_0_1; }
	}

	public class Composite_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Composite_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMapping_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSet_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cList_typeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnion_typeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// composite type rules
		//Composite_type:
		//	Mapping_type | Set_type | List_type | Union_type;
		@Override public ParserRule getRule() { return rule; }

		//Mapping_type | Set_type | List_type | Union_type
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mapping_type
		public RuleCall getMapping_typeParserRuleCall_0() { return cMapping_typeParserRuleCall_0; }

		//Set_type
		public RuleCall getSet_typeParserRuleCall_1() { return cSet_typeParserRuleCall_1; }

		//List_type
		public RuleCall getList_typeParserRuleCall_2() { return cList_typeParserRuleCall_2; }

		//Union_type
		public RuleCall getUnion_typeParserRuleCall_3() { return cUnion_typeParserRuleCall_3; }
	}

	public class Mapping_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyType_expressionParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValType_expressionParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mapping_type:
		//	"[" key=Type_expression "to" val=Type_expression "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" key=Type_expression "to" val=Type_expression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//key=Type_expression
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//Type_expression
		public RuleCall getKeyType_expressionParserRuleCall_1_0() { return cKeyType_expressionParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//val=Type_expression
		public Assignment getValAssignment_3() { return cValAssignment_3; }

		//Type_expression
		public RuleCall getValType_expressionParserRuleCall_3_0() { return cValType_expressionParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class Set_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Set_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRoot_typeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRoot_typeType_expressionParserRuleCall_0_1_0 = (RuleCall)cRoot_typeAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSetKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRoot_typeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRoot_typeType_expressionParserRuleCall_1_2_0 = (RuleCall)cRoot_typeAssignment_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Set_type:
		//	"{" root_type=Type_expression "}" | "set" "<" root_type=Type_expression ">";
		@Override public ParserRule getRule() { return rule; }

		//"{" root_type=Type_expression "}" | "set" "<" root_type=Type_expression ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"{" root_type=Type_expression "}"
		public Group getGroup_0() { return cGroup_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }

		//root_type=Type_expression
		public Assignment getRoot_typeAssignment_0_1() { return cRoot_typeAssignment_0_1; }

		//Type_expression
		public RuleCall getRoot_typeType_expressionParserRuleCall_0_1_0() { return cRoot_typeType_expressionParserRuleCall_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }

		//"set" "<" root_type=Type_expression ">"
		public Group getGroup_1() { return cGroup_1; }

		//"set"
		public Keyword getSetKeyword_1_0() { return cSetKeyword_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }

		//root_type=Type_expression
		public Assignment getRoot_typeAssignment_1_2() { return cRoot_typeAssignment_1_2; }

		//Type_expression
		public RuleCall getRoot_typeType_expressionParserRuleCall_1_2_0() { return cRoot_typeType_expressionParserRuleCall_1_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class List_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRoot_typeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRoot_typeType_expressionParserRuleCall_0_1_0 = (RuleCall)cRoot_typeAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cListKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRoot_typeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRoot_typeType_expressionParserRuleCall_1_2_0 = (RuleCall)cRoot_typeAssignment_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//List_type:
		//	"(" root_type=Type_expression ")" | "list" "<" root_type=Type_expression ">";
		@Override public ParserRule getRule() { return rule; }

		//"(" root_type=Type_expression ")" | "list" "<" root_type=Type_expression ">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" root_type=Type_expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//root_type=Type_expression
		public Assignment getRoot_typeAssignment_0_1() { return cRoot_typeAssignment_0_1; }

		//Type_expression
		public RuleCall getRoot_typeType_expressionParserRuleCall_0_1_0() { return cRoot_typeType_expressionParserRuleCall_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//"list" "<" root_type=Type_expression ">"
		public Group getGroup_1() { return cGroup_1; }

		//"list"
		public Keyword getListKeyword_1_0() { return cListKeyword_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }

		//root_type=Type_expression
		public Assignment getRoot_typeAssignment_1_2() { return cRoot_typeAssignment_1_2; }

		//Type_expression
		public RuleCall getRoot_typeType_expressionParserRuleCall_1_2_0() { return cRoot_typeType_expressionParserRuleCall_1_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class Union_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Union_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesType_expressionParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeType_expressionParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Union_type:
		//	"union" "(" types+=Type_expression ("," type+=Type_expression)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"union" "(" types+=Type_expression ("," type+=Type_expression)* ")"
		public Group getGroup() { return cGroup; }

		//"union"
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//types+=Type_expression
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//Type_expression
		public RuleCall getTypesType_expressionParserRuleCall_2_0() { return cTypesType_expressionParserRuleCall_2_0; }

		//("," type+=Type_expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//type+=Type_expression
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }

		//Type_expression
		public RuleCall getTypeType_expressionParserRuleCall_3_1_0() { return cTypeType_expressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumerationLiteral returns aadl2::EnumerationLiteral:
		//	name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class Element_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTelemAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTelemT_ElementKeyword_0_0 = (Keyword)cTelemAssignment_0.eContents().get(0);
		private final Assignment cTpackAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTpackT_PackageKeyword_1_0 = (Keyword)cTpackAssignment_1.eContents().get(0);
		private final Assignment cT_classAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cT_classClassifiersParserRuleCall_2_0 = (RuleCall)cT_classAssignment_2.eContents().get(0);
		private final Assignment cT_instAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cT_instInstancesParserRuleCall_3_0 = (RuleCall)cT_instAssignment_3.eContents().get(0);
		
		////element type rules
		//Element_type:
		//	telem?="T_Element" | tpack?="T_Package" | t_class?=Classifiers | t_inst?=Instances;
		@Override public ParserRule getRule() { return rule; }

		//telem?="T_Element" | tpack?="T_Package" | t_class?=Classifiers | t_inst?=Instances
		public Alternatives getAlternatives() { return cAlternatives; }

		//telem?="T_Element"
		public Assignment getTelemAssignment_0() { return cTelemAssignment_0; }

		//"T_Element"
		public Keyword getTelemT_ElementKeyword_0_0() { return cTelemT_ElementKeyword_0_0; }

		//tpack?="T_Package"
		public Assignment getTpackAssignment_1() { return cTpackAssignment_1; }

		//"T_Package"
		public Keyword getTpackT_PackageKeyword_1_0() { return cTpackT_PackageKeyword_1_0; }

		//t_class?=Classifiers
		public Assignment getT_classAssignment_2() { return cT_classAssignment_2; }

		//Classifiers
		public RuleCall getT_classClassifiersParserRuleCall_2_0() { return cT_classClassifiersParserRuleCall_2_0; }

		//t_inst?=Instances
		public Assignment getT_instAssignment_3() { return cT_instAssignment_3; }

		//Instances
		public RuleCall getT_instInstancesParserRuleCall_3_0() { return cT_instInstancesParserRuleCall_3_0; }
	}

	public class ClassifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Classifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_classAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_classT_ClassifierKeyword_0_0 = (Keyword)cT_classAssignment_0.eContents().get(0);
		private final Assignment cT_class_subtypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cT_class_subtypeT_classifier_subtypesParserRuleCall_1_0 = (RuleCall)cT_class_subtypeAssignment_1.eContents().get(0);
		
		//Classifiers:
		//	t_class?="T_Classifier" | t_class_subtype?=T_classifier_subtypes;
		@Override public ParserRule getRule() { return rule; }

		//t_class?="T_Classifier" | t_class_subtype?=T_classifier_subtypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_class?="T_Classifier"
		public Assignment getT_classAssignment_0() { return cT_classAssignment_0; }

		//"T_Classifier"
		public Keyword getT_classT_ClassifierKeyword_0_0() { return cT_classT_ClassifierKeyword_0_0; }

		//t_class_subtype?=T_classifier_subtypes
		public Assignment getT_class_subtypeAssignment_1() { return cT_class_subtypeAssignment_1; }

		//T_classifier_subtypes
		public RuleCall getT_class_subtypeT_classifier_subtypesParserRuleCall_1_0() { return cT_class_subtypeT_classifier_subtypesParserRuleCall_1_0; }
	}

	public class T_classifier_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "T_classifier_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_ctypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_ctypeC_TypeKeyword_0_0 = (Keyword)cT_ctypeAssignment_0.eContents().get(0);
		private final Assignment cT_cimplAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_cimplC_ImplKeyword_1_0 = (Keyword)cT_cimplAssignment_1.eContents().get(0);
		private final Assignment cT_fgclassAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_fgclassC_Feature_GroupKeyword_2_0 = (Keyword)cT_fgclassAssignment_2.eContents().get(0);
		private final Assignment cT_annexclassAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_annexclassC_AnnexKeyword_3_0 = (Keyword)cT_annexclassAssignment_3.eContents().get(0);
		
		//T_classifier_subtypes:
		//	t_ctype?="C_Type" | t_cimpl?="C_Impl" | t_fgclass?="C_Feature_Group" | t_annexclass?="C_Annex";
		@Override public ParserRule getRule() { return rule; }

		//t_ctype?="C_Type" | t_cimpl?="C_Impl" | t_fgclass?="C_Feature_Group" | t_annexclass?="C_Annex"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_ctype?="C_Type"
		public Assignment getT_ctypeAssignment_0() { return cT_ctypeAssignment_0; }

		//"C_Type"
		public Keyword getT_ctypeC_TypeKeyword_0_0() { return cT_ctypeC_TypeKeyword_0_0; }

		//t_cimpl?="C_Impl"
		public Assignment getT_cimplAssignment_1() { return cT_cimplAssignment_1; }

		//"C_Impl"
		public Keyword getT_cimplC_ImplKeyword_1_0() { return cT_cimplC_ImplKeyword_1_0; }

		//t_fgclass?="C_Feature_Group"
		public Assignment getT_fgclassAssignment_2() { return cT_fgclassAssignment_2; }

		//"C_Feature_Group"
		public Keyword getT_fgclassC_Feature_GroupKeyword_2_0() { return cT_fgclassC_Feature_GroupKeyword_2_0; }

		//t_annexclass?="C_Annex"
		public Assignment getT_annexclassAssignment_3() { return cT_annexclassAssignment_3; }

		//"C_Annex"
		public Keyword getT_annexclassC_AnnexKeyword_3_0() { return cT_annexclassC_AnnexKeyword_3_0; }
	}

	public class InstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instances");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cInstT_InstanceKeyword_0_0 = (Keyword)cInstAssignment_0.eContents().get(0);
		private final Assignment cT_inst_stAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cT_inst_stT_instance_subtypesParserRuleCall_1_0 = (RuleCall)cT_inst_stAssignment_1.eContents().get(0);
		
		//Instances:
		//	inst?="T_Instance" | t_inst_st?=t_instance_subtypes;
		@Override public ParserRule getRule() { return rule; }

		//inst?="T_Instance" | t_inst_st?=t_instance_subtypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//inst?="T_Instance"
		public Assignment getInstAssignment_0() { return cInstAssignment_0; }

		//"T_Instance"
		public Keyword getInstT_InstanceKeyword_0_0() { return cInstT_InstanceKeyword_0_0; }

		//t_inst_st?=t_instance_subtypes
		public Assignment getT_inst_stAssignment_1() { return cT_inst_stAssignment_1; }

		//t_instance_subtypes
		public RuleCall getT_inst_stT_instance_subtypesParserRuleCall_1_0() { return cT_inst_stT_instance_subtypesParserRuleCall_1_0; }
	}

	public class T_instance_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_instance_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_subc_stAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cT_subc_stT_subcomponent_subtypesParserRuleCall_0_0 = (RuleCall)cT_subc_stAssignment_0.eContents().get(0);
		private final RuleCall cT_connection_subtypesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cT_feature_subtypesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cT_flow_spec_subtypesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cT_flow_impl_subtypesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Assignment cT_sbcallAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cT_sbcallI_Subprogram_CallKeyword_5_0 = (Keyword)cT_sbcallAssignment_5.eContents().get(0);
		private final Assignment cT_callseqAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cT_callseqI_Call_SequenceKeyword_6_0 = (Keyword)cT_callseqAssignment_6.eContents().get(0);
		private final Assignment cT_eeflowAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cT_eeflowI_End_To_End_FlowKeyword_7_0 = (Keyword)cT_eeflowAssignment_7.eContents().get(0);
		private final Assignment cT_protoAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cT_protoI_PrototypeKeyword_8_0 = (Keyword)cT_protoAssignment_8.eContents().get(0);
		private final Assignment cT_modeAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cT_modeI_ModeKeyword_9_0 = (Keyword)cT_modeAssignment_9.eContents().get(0);
		private final Assignment cT_mod_transAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cT_mod_transI_Mode_TransitionKeyword_10_0 = (Keyword)cT_mod_transAssignment_10.eContents().get(0);
		private final Assignment cT_mode_trigAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cT_mode_trigI_Mode_Trigger_IdKeyword_11_0 = (Keyword)cT_mode_trigAssignment_11.eContents().get(0);
		
		//t_instance_subtypes:
		//	t_subc_st?=t_subcomponent_subtypes | t_connection_subtypes | t_feature_subtypes | t_flow_spec_subtypes |
		//	t_flow_impl_subtypes | t_sbcall?="I_Subprogram_Call" | t_callseq?="I_Call_Sequence" | t_eeflow?="I_End_To_End_Flow" |
		//	t_proto?="I_Prototype" | t_mode?="I_Mode" | t_mod_trans?="I_Mode_Transition" | t_mode_trig?="I_Mode_Trigger_Id";
		@Override public ParserRule getRule() { return rule; }

		//t_subc_st?=t_subcomponent_subtypes | t_connection_subtypes | t_feature_subtypes | t_flow_spec_subtypes |
		//t_flow_impl_subtypes | t_sbcall?="I_Subprogram_Call" | t_callseq?="I_Call_Sequence" | t_eeflow?="I_End_To_End_Flow" |
		//t_proto?="I_Prototype" | t_mode?="I_Mode" | t_mod_trans?="I_Mode_Transition" | t_mode_trig?="I_Mode_Trigger_Id"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_subc_st?=t_subcomponent_subtypes
		public Assignment getT_subc_stAssignment_0() { return cT_subc_stAssignment_0; }

		//t_subcomponent_subtypes
		public RuleCall getT_subc_stT_subcomponent_subtypesParserRuleCall_0_0() { return cT_subc_stT_subcomponent_subtypesParserRuleCall_0_0; }

		//t_connection_subtypes
		public RuleCall getT_connection_subtypesParserRuleCall_1() { return cT_connection_subtypesParserRuleCall_1; }

		//t_feature_subtypes
		public RuleCall getT_feature_subtypesParserRuleCall_2() { return cT_feature_subtypesParserRuleCall_2; }

		//t_flow_spec_subtypes
		public RuleCall getT_flow_spec_subtypesParserRuleCall_3() { return cT_flow_spec_subtypesParserRuleCall_3; }

		//t_flow_impl_subtypes
		public RuleCall getT_flow_impl_subtypesParserRuleCall_4() { return cT_flow_impl_subtypesParserRuleCall_4; }

		//t_sbcall?="I_Subprogram_Call"
		public Assignment getT_sbcallAssignment_5() { return cT_sbcallAssignment_5; }

		//"I_Subprogram_Call"
		public Keyword getT_sbcallI_Subprogram_CallKeyword_5_0() { return cT_sbcallI_Subprogram_CallKeyword_5_0; }

		//t_callseq?="I_Call_Sequence"
		public Assignment getT_callseqAssignment_6() { return cT_callseqAssignment_6; }

		//"I_Call_Sequence"
		public Keyword getT_callseqI_Call_SequenceKeyword_6_0() { return cT_callseqI_Call_SequenceKeyword_6_0; }

		//t_eeflow?="I_End_To_End_Flow"
		public Assignment getT_eeflowAssignment_7() { return cT_eeflowAssignment_7; }

		//"I_End_To_End_Flow"
		public Keyword getT_eeflowI_End_To_End_FlowKeyword_7_0() { return cT_eeflowI_End_To_End_FlowKeyword_7_0; }

		//t_proto?="I_Prototype"
		public Assignment getT_protoAssignment_8() { return cT_protoAssignment_8; }

		//"I_Prototype"
		public Keyword getT_protoI_PrototypeKeyword_8_0() { return cT_protoI_PrototypeKeyword_8_0; }

		//t_mode?="I_Mode"
		public Assignment getT_modeAssignment_9() { return cT_modeAssignment_9; }

		//"I_Mode"
		public Keyword getT_modeI_ModeKeyword_9_0() { return cT_modeI_ModeKeyword_9_0; }

		//t_mod_trans?="I_Mode_Transition"
		public Assignment getT_mod_transAssignment_10() { return cT_mod_transAssignment_10; }

		//"I_Mode_Transition"
		public Keyword getT_mod_transI_Mode_TransitionKeyword_10_0() { return cT_mod_transI_Mode_TransitionKeyword_10_0; }

		//t_mode_trig?="I_Mode_Trigger_Id"
		public Assignment getT_mode_trigAssignment_11() { return cT_mode_trigAssignment_11; }

		//"I_Mode_Trigger_Id"
		public Keyword getT_mode_trigI_Mode_Trigger_IdKeyword_11_0() { return cT_mode_trigI_Mode_Trigger_IdKeyword_11_0; }
	}

	public class T_subcomponent_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_subcomponent_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_subAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_subI_ComponentKeyword_0_0 = (Keyword)cT_subAssignment_0.eContents().get(0);
		private final Assignment cT_cimpl_stAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cT_cimpl_stT_component_subtypesParserRuleCall_1_0 = (RuleCall)cT_cimpl_stAssignment_1.eContents().get(0);
		
		//t_subcomponent_subtypes:
		//	t_sub?="I_Component" | t_cimpl_st?=t_component_subtypes;
		@Override public ParserRule getRule() { return rule; }

		//t_sub?="I_Component" | t_cimpl_st?=t_component_subtypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_sub?="I_Component"
		public Assignment getT_subAssignment_0() { return cT_subAssignment_0; }

		//"I_Component"
		public Keyword getT_subI_ComponentKeyword_0_0() { return cT_subI_ComponentKeyword_0_0; }

		//t_cimpl_st?=t_component_subtypes
		public Assignment getT_cimpl_stAssignment_1() { return cT_cimpl_stAssignment_1; }

		//t_component_subtypes
		public RuleCall getT_cimpl_stT_component_subtypesParserRuleCall_1_0() { return cT_cimpl_stT_component_subtypesParserRuleCall_1_0; }
	}

	public class T_component_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_component_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_annex_subAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_annex_subI_Component_AnnexKeyword_0_0 = (Keyword)cT_annex_subAssignment_0.eContents().get(0);
		private final Assignment cT_abstractAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_abstractI_AbstractKeyword_1_0 = (Keyword)cT_abstractAssignment_1.eContents().get(0);
		private final Assignment cT_sysAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_sysI_SystemKeyword_2_0 = (Keyword)cT_sysAssignment_2.eContents().get(0);
		private final Assignment cT_devAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_devI_DeviceKeyword_3_0 = (Keyword)cT_devAssignment_3.eContents().get(0);
		private final Assignment cT_procAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cT_procI_ProcessorKeyword_4_0 = (Keyword)cT_procAssignment_4.eContents().get(0);
		private final Assignment cT_virt_procAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cT_virt_procI_Virtual_ProcessorKeyword_5_0 = (Keyword)cT_virt_procAssignment_5.eContents().get(0);
		private final Assignment cT_busAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cT_busI_BusKeyword_6_0 = (Keyword)cT_busAssignment_6.eContents().get(0);
		private final Assignment cT_vbusAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cT_vbusI_Virtual_BusKeyword_7_0 = (Keyword)cT_vbusAssignment_7.eContents().get(0);
		private final Assignment cT_memAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cT_memI_MemoryKeyword_8_0 = (Keyword)cT_memAssignment_8.eContents().get(0);
		private final Assignment cT_procAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cT_procI_ProcessKeyword_9_0 = (Keyword)cT_procAssignment_9.eContents().get(0);
		private final Assignment cT_tgAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cT_tgI_Thread_GroupKeyword_10_0 = (Keyword)cT_tgAssignment_10.eContents().get(0);
		private final Assignment cT_tAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cT_tI_ThreadKeyword_11_0 = (Keyword)cT_tAssignment_11.eContents().get(0);
		private final Assignment cT_dAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cT_dI_DataKeyword_12_0 = (Keyword)cT_dAssignment_12.eContents().get(0);
		private final Assignment cT_subprogAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final Keyword cT_subprogI_SubprogramKeyword_13_0 = (Keyword)cT_subprogAssignment_13.eContents().get(0);
		private final Assignment cT_subprog_gAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final Keyword cT_subprog_gI_Subprogram_GroupKeyword_14_0 = (Keyword)cT_subprog_gAssignment_14.eContents().get(0);
		
		//t_component_subtypes:
		//	t_annex_sub?="I_Component_Annex" | t_abstract?="I_Abstract" | t_sys?="I_System" | t_dev?="I_Device" |
		//	t_proc?="I_Processor" | t_virt_proc?="I_Virtual_Processor" | t_bus?="I_Bus" | t_vbus?="I_Virtual_Bus" |
		//	t_mem?="I_Memory" | t_proc?="I_Process" | t_tg?="I_Thread_Group" | t_t?="I_Thread" | t_d?="I_Data" |
		//	t_subprog?="I_Subprogram" | t_subprog_g?="I_Subprogram_Group";
		@Override public ParserRule getRule() { return rule; }

		//t_annex_sub?="I_Component_Annex" | t_abstract?="I_Abstract" | t_sys?="I_System" | t_dev?="I_Device" |
		//t_proc?="I_Processor" | t_virt_proc?="I_Virtual_Processor" | t_bus?="I_Bus" | t_vbus?="I_Virtual_Bus" |
		//t_mem?="I_Memory" | t_proc?="I_Process" | t_tg?="I_Thread_Group" | t_t?="I_Thread" | t_d?="I_Data" |
		//t_subprog?="I_Subprogram" | t_subprog_g?="I_Subprogram_Group"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_annex_sub?="I_Component_Annex"
		public Assignment getT_annex_subAssignment_0() { return cT_annex_subAssignment_0; }

		//"I_Component_Annex"
		public Keyword getT_annex_subI_Component_AnnexKeyword_0_0() { return cT_annex_subI_Component_AnnexKeyword_0_0; }

		//t_abstract?="I_Abstract"
		public Assignment getT_abstractAssignment_1() { return cT_abstractAssignment_1; }

		//"I_Abstract"
		public Keyword getT_abstractI_AbstractKeyword_1_0() { return cT_abstractI_AbstractKeyword_1_0; }

		//t_sys?="I_System"
		public Assignment getT_sysAssignment_2() { return cT_sysAssignment_2; }

		//"I_System"
		public Keyword getT_sysI_SystemKeyword_2_0() { return cT_sysI_SystemKeyword_2_0; }

		//t_dev?="I_Device"
		public Assignment getT_devAssignment_3() { return cT_devAssignment_3; }

		//"I_Device"
		public Keyword getT_devI_DeviceKeyword_3_0() { return cT_devI_DeviceKeyword_3_0; }

		//t_proc?="I_Processor"
		public Assignment getT_procAssignment_4() { return cT_procAssignment_4; }

		//"I_Processor"
		public Keyword getT_procI_ProcessorKeyword_4_0() { return cT_procI_ProcessorKeyword_4_0; }

		//t_virt_proc?="I_Virtual_Processor"
		public Assignment getT_virt_procAssignment_5() { return cT_virt_procAssignment_5; }

		//"I_Virtual_Processor"
		public Keyword getT_virt_procI_Virtual_ProcessorKeyword_5_0() { return cT_virt_procI_Virtual_ProcessorKeyword_5_0; }

		//t_bus?="I_Bus"
		public Assignment getT_busAssignment_6() { return cT_busAssignment_6; }

		//"I_Bus"
		public Keyword getT_busI_BusKeyword_6_0() { return cT_busI_BusKeyword_6_0; }

		//t_vbus?="I_Virtual_Bus"
		public Assignment getT_vbusAssignment_7() { return cT_vbusAssignment_7; }

		//"I_Virtual_Bus"
		public Keyword getT_vbusI_Virtual_BusKeyword_7_0() { return cT_vbusI_Virtual_BusKeyword_7_0; }

		//t_mem?="I_Memory"
		public Assignment getT_memAssignment_8() { return cT_memAssignment_8; }

		//"I_Memory"
		public Keyword getT_memI_MemoryKeyword_8_0() { return cT_memI_MemoryKeyword_8_0; }

		//t_proc?="I_Process"
		public Assignment getT_procAssignment_9() { return cT_procAssignment_9; }

		//"I_Process"
		public Keyword getT_procI_ProcessKeyword_9_0() { return cT_procI_ProcessKeyword_9_0; }

		//t_tg?="I_Thread_Group"
		public Assignment getT_tgAssignment_10() { return cT_tgAssignment_10; }

		//"I_Thread_Group"
		public Keyword getT_tgI_Thread_GroupKeyword_10_0() { return cT_tgI_Thread_GroupKeyword_10_0; }

		//t_t?="I_Thread"
		public Assignment getT_tAssignment_11() { return cT_tAssignment_11; }

		//"I_Thread"
		public Keyword getT_tI_ThreadKeyword_11_0() { return cT_tI_ThreadKeyword_11_0; }

		//t_d?="I_Data"
		public Assignment getT_dAssignment_12() { return cT_dAssignment_12; }

		//"I_Data"
		public Keyword getT_dI_DataKeyword_12_0() { return cT_dI_DataKeyword_12_0; }

		//t_subprog?="I_Subprogram"
		public Assignment getT_subprogAssignment_13() { return cT_subprogAssignment_13; }

		//"I_Subprogram"
		public Keyword getT_subprogI_SubprogramKeyword_13_0() { return cT_subprogI_SubprogramKeyword_13_0; }

		//t_subprog_g?="I_Subprogram_Group"
		public Assignment getT_subprog_gAssignment_14() { return cT_subprog_gAssignment_14; }

		//"I_Subprogram_Group"
		public Keyword getT_subprog_gI_Subprogram_GroupKeyword_14_0() { return cT_subprog_gI_Subprogram_GroupKeyword_14_0; }
	}

	public class T_connection_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_connection_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_connAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_connI_ConnectionKeyword_0_0 = (Keyword)cT_connAssignment_0.eContents().get(0);
		private final Assignment cT_feat_connAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_feat_connI_Feature_ConnectionKeyword_1_0 = (Keyword)cT_feat_connAssignment_1.eContents().get(0);
		private final Assignment cT_port_connAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_port_connI_Port_ConnectionKeyword_2_0 = (Keyword)cT_port_connAssignment_2.eContents().get(0);
		private final Assignment cT_parm_connAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_parm_connI_Parameter_ConnectionKeyword_3_0 = (Keyword)cT_parm_connAssignment_3.eContents().get(0);
		private final Assignment cT_acc_conAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cT_acc_conI_Access_ConnectionKeyword_4_0 = (Keyword)cT_acc_conAssignment_4.eContents().get(0);
		private final Assignment cT_fg_connAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cT_fg_connI_Feature_Group_ConnectionKeyword_5_0 = (Keyword)cT_fg_connAssignment_5.eContents().get(0);
		
		//t_connection_subtypes:
		//	t_conn?="I_Connection" | t_feat_conn?="I_Feature_Connection" | t_port_conn?="I_Port_Connection" |
		//	t_parm_conn?="I_Parameter_Connection" | t_acc_con?="I_Access_Connection" | t_fg_conn?="I_Feature_Group_Connection";
		@Override public ParserRule getRule() { return rule; }

		//t_conn?="I_Connection" | t_feat_conn?="I_Feature_Connection" | t_port_conn?="I_Port_Connection" |
		//t_parm_conn?="I_Parameter_Connection" | t_acc_con?="I_Access_Connection" | t_fg_conn?="I_Feature_Group_Connection"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_conn?="I_Connection"
		public Assignment getT_connAssignment_0() { return cT_connAssignment_0; }

		//"I_Connection"
		public Keyword getT_connI_ConnectionKeyword_0_0() { return cT_connI_ConnectionKeyword_0_0; }

		//t_feat_conn?="I_Feature_Connection"
		public Assignment getT_feat_connAssignment_1() { return cT_feat_connAssignment_1; }

		//"I_Feature_Connection"
		public Keyword getT_feat_connI_Feature_ConnectionKeyword_1_0() { return cT_feat_connI_Feature_ConnectionKeyword_1_0; }

		//t_port_conn?="I_Port_Connection"
		public Assignment getT_port_connAssignment_2() { return cT_port_connAssignment_2; }

		//"I_Port_Connection"
		public Keyword getT_port_connI_Port_ConnectionKeyword_2_0() { return cT_port_connI_Port_ConnectionKeyword_2_0; }

		//t_parm_conn?="I_Parameter_Connection"
		public Assignment getT_parm_connAssignment_3() { return cT_parm_connAssignment_3; }

		//"I_Parameter_Connection"
		public Keyword getT_parm_connI_Parameter_ConnectionKeyword_3_0() { return cT_parm_connI_Parameter_ConnectionKeyword_3_0; }

		//t_acc_con?="I_Access_Connection"
		public Assignment getT_acc_conAssignment_4() { return cT_acc_conAssignment_4; }

		//"I_Access_Connection"
		public Keyword getT_acc_conI_Access_ConnectionKeyword_4_0() { return cT_acc_conI_Access_ConnectionKeyword_4_0; }

		//t_fg_conn?="I_Feature_Group_Connection"
		public Assignment getT_fg_connAssignment_5() { return cT_fg_connAssignment_5; }

		//"I_Feature_Group_Connection"
		public Keyword getT_fg_connI_Feature_Group_ConnectionKeyword_5_0() { return cT_fg_connI_Feature_Group_ConnectionKeyword_5_0; }
	}

	public class T_feature_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_feature_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_featAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_featI_FeatureKeyword_0_0 = (Keyword)cT_featAssignment_0.eContents().get(0);
		private final Assignment cT_abs_featAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_abs_featI_Abstract_FeatureKeyword_1_0 = (Keyword)cT_abs_featAssignment_1.eContents().get(0);
		private final Assignment cT_parmAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_parmI_ParameterKeyword_2_0 = (Keyword)cT_parmAssignment_2.eContents().get(0);
		private final Assignment cT_fgAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_fgI_Feature_GroupKeyword_3_0 = (Keyword)cT_fgAssignment_3.eContents().get(0);
		private final RuleCall cT_port_subtypesParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cT_access_subtypesParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//t_feature_subtypes:
		//	t_feat?="I_Feature" | t_abs_feat?="I_Abstract_Feature" | t_parm?="I_Parameter" | t_fg?="I_Feature_Group" |
		//	t_port_subtypes | t_access_subtypes;
		@Override public ParserRule getRule() { return rule; }

		//t_feat?="I_Feature" | t_abs_feat?="I_Abstract_Feature" | t_parm?="I_Parameter" | t_fg?="I_Feature_Group" |
		//t_port_subtypes | t_access_subtypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_feat?="I_Feature"
		public Assignment getT_featAssignment_0() { return cT_featAssignment_0; }

		//"I_Feature"
		public Keyword getT_featI_FeatureKeyword_0_0() { return cT_featI_FeatureKeyword_0_0; }

		//t_abs_feat?="I_Abstract_Feature"
		public Assignment getT_abs_featAssignment_1() { return cT_abs_featAssignment_1; }

		//"I_Abstract_Feature"
		public Keyword getT_abs_featI_Abstract_FeatureKeyword_1_0() { return cT_abs_featI_Abstract_FeatureKeyword_1_0; }

		//t_parm?="I_Parameter"
		public Assignment getT_parmAssignment_2() { return cT_parmAssignment_2; }

		//"I_Parameter"
		public Keyword getT_parmI_ParameterKeyword_2_0() { return cT_parmI_ParameterKeyword_2_0; }

		//t_fg?="I_Feature_Group"
		public Assignment getT_fgAssignment_3() { return cT_fgAssignment_3; }

		//"I_Feature_Group"
		public Keyword getT_fgI_Feature_GroupKeyword_3_0() { return cT_fgI_Feature_GroupKeyword_3_0; }

		//t_port_subtypes
		public RuleCall getT_port_subtypesParserRuleCall_4() { return cT_port_subtypesParserRuleCall_4; }

		//t_access_subtypes
		public RuleCall getT_access_subtypesParserRuleCall_5() { return cT_access_subtypesParserRuleCall_5; }
	}

	public class T_access_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_access_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_accessAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_accessI_AccessKeyword_0_0 = (Keyword)cT_accessAssignment_0.eContents().get(0);
		private final Assignment cT_data_accAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_data_accI_Data_AccessKeyword_1_0 = (Keyword)cT_data_accAssignment_1.eContents().get(0);
		private final Assignment cT_sub_accAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_sub_accI_Subprogram_AccessKeyword_2_0 = (Keyword)cT_sub_accAssignment_2.eContents().get(0);
		private final Assignment cT_sub_gr_accAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_sub_gr_accI_Subprogram_Group_AccessKeyword_3_0 = (Keyword)cT_sub_gr_accAssignment_3.eContents().get(0);
		private final Assignment cT_bus_accAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cT_bus_accI_Bus_AccessKeyword_4_0 = (Keyword)cT_bus_accAssignment_4.eContents().get(0);
		
		//t_access_subtypes:
		//	t_access?="I_Access" | t_data_acc?="I_Data_Access" | t_sub_acc?="I_Subprogram_Access" |
		//	t_sub_gr_acc?="I_Subprogram_Group_Access" | t_bus_acc?="I_Bus_Access";
		@Override public ParserRule getRule() { return rule; }

		//t_access?="I_Access" | t_data_acc?="I_Data_Access" | t_sub_acc?="I_Subprogram_Access" |
		//t_sub_gr_acc?="I_Subprogram_Group_Access" | t_bus_acc?="I_Bus_Access"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_access?="I_Access"
		public Assignment getT_accessAssignment_0() { return cT_accessAssignment_0; }

		//"I_Access"
		public Keyword getT_accessI_AccessKeyword_0_0() { return cT_accessI_AccessKeyword_0_0; }

		//t_data_acc?="I_Data_Access"
		public Assignment getT_data_accAssignment_1() { return cT_data_accAssignment_1; }

		//"I_Data_Access"
		public Keyword getT_data_accI_Data_AccessKeyword_1_0() { return cT_data_accI_Data_AccessKeyword_1_0; }

		//t_sub_acc?="I_Subprogram_Access"
		public Assignment getT_sub_accAssignment_2() { return cT_sub_accAssignment_2; }

		//"I_Subprogram_Access"
		public Keyword getT_sub_accI_Subprogram_AccessKeyword_2_0() { return cT_sub_accI_Subprogram_AccessKeyword_2_0; }

		//t_sub_gr_acc?="I_Subprogram_Group_Access"
		public Assignment getT_sub_gr_accAssignment_3() { return cT_sub_gr_accAssignment_3; }

		//"I_Subprogram_Group_Access"
		public Keyword getT_sub_gr_accI_Subprogram_Group_AccessKeyword_3_0() { return cT_sub_gr_accI_Subprogram_Group_AccessKeyword_3_0; }

		//t_bus_acc?="I_Bus_Access"
		public Assignment getT_bus_accAssignment_4() { return cT_bus_accAssignment_4; }

		//"I_Bus_Access"
		public Keyword getT_bus_accI_Bus_AccessKeyword_4_0() { return cT_bus_accI_Bus_AccessKeyword_4_0; }
	}

	public class T_port_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_port_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_portAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_portI_PortKeyword_0_0 = (Keyword)cT_portAssignment_0.eContents().get(0);
		private final Assignment cT_d_portAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_d_portI_Data_PortKeyword_1_0 = (Keyword)cT_d_portAssignment_1.eContents().get(0);
		private final Assignment cT_ev_portAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_ev_portI_Event_PortKeyword_2_0 = (Keyword)cT_ev_portAssignment_2.eContents().get(0);
		private final Assignment cT_evd_portAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_evd_portI_Event_Data_PortKeyword_3_0 = (Keyword)cT_evd_portAssignment_3.eContents().get(0);
		
		//t_port_subtypes:
		//	t_port?="I_Port" | t_d_port?="I_Data_Port" | t_ev_port?="I_Event_Port" | t_evd_port?="I_Event_Data_Port";
		@Override public ParserRule getRule() { return rule; }

		//t_port?="I_Port" | t_d_port?="I_Data_Port" | t_ev_port?="I_Event_Port" | t_evd_port?="I_Event_Data_Port"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_port?="I_Port"
		public Assignment getT_portAssignment_0() { return cT_portAssignment_0; }

		//"I_Port"
		public Keyword getT_portI_PortKeyword_0_0() { return cT_portI_PortKeyword_0_0; }

		//t_d_port?="I_Data_Port"
		public Assignment getT_d_portAssignment_1() { return cT_d_portAssignment_1; }

		//"I_Data_Port"
		public Keyword getT_d_portI_Data_PortKeyword_1_0() { return cT_d_portI_Data_PortKeyword_1_0; }

		//t_ev_port?="I_Event_Port"
		public Assignment getT_ev_portAssignment_2() { return cT_ev_portAssignment_2; }

		//"I_Event_Port"
		public Keyword getT_ev_portI_Event_PortKeyword_2_0() { return cT_ev_portI_Event_PortKeyword_2_0; }

		//t_evd_port?="I_Event_Data_Port"
		public Assignment getT_evd_portAssignment_3() { return cT_evd_portAssignment_3; }

		//"I_Event_Data_Port"
		public Keyword getT_evd_portI_Event_Data_PortKeyword_3_0() { return cT_evd_portI_Event_Data_PortKeyword_3_0; }
	}

	public class T_flow_spec_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_flow_spec_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_f_specAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_f_specI_Flow_SpecKeyword_0_0 = (Keyword)cT_f_specAssignment_0.eContents().get(0);
		private final Assignment cT_f_spec_sourceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_f_spec_sourceI_Flow_Spec_SourceKeyword_1_0 = (Keyword)cT_f_spec_sourceAssignment_1.eContents().get(0);
		private final Assignment cT_f_spec_sinkAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_f_spec_sinkI_Flow_Spec_SinkKeyword_2_0 = (Keyword)cT_f_spec_sinkAssignment_2.eContents().get(0);
		private final Assignment cT_f_spec_pathAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_f_spec_pathI_Flow_Spec_PathKeyword_3_0 = (Keyword)cT_f_spec_pathAssignment_3.eContents().get(0);
		
		//t_flow_spec_subtypes:
		//	t_f_spec?="I_Flow_Spec" | t_f_spec_source?="I_Flow_Spec_Source" | t_f_spec_sink?="I_Flow_Spec_Sink" |
		//	t_f_spec_path?="I_Flow_Spec_Path";
		@Override public ParserRule getRule() { return rule; }

		//t_f_spec?="I_Flow_Spec" | t_f_spec_source?="I_Flow_Spec_Source" | t_f_spec_sink?="I_Flow_Spec_Sink" |
		//t_f_spec_path?="I_Flow_Spec_Path"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_f_spec?="I_Flow_Spec"
		public Assignment getT_f_specAssignment_0() { return cT_f_specAssignment_0; }

		//"I_Flow_Spec"
		public Keyword getT_f_specI_Flow_SpecKeyword_0_0() { return cT_f_specI_Flow_SpecKeyword_0_0; }

		//t_f_spec_source?="I_Flow_Spec_Source"
		public Assignment getT_f_spec_sourceAssignment_1() { return cT_f_spec_sourceAssignment_1; }

		//"I_Flow_Spec_Source"
		public Keyword getT_f_spec_sourceI_Flow_Spec_SourceKeyword_1_0() { return cT_f_spec_sourceI_Flow_Spec_SourceKeyword_1_0; }

		//t_f_spec_sink?="I_Flow_Spec_Sink"
		public Assignment getT_f_spec_sinkAssignment_2() { return cT_f_spec_sinkAssignment_2; }

		//"I_Flow_Spec_Sink"
		public Keyword getT_f_spec_sinkI_Flow_Spec_SinkKeyword_2_0() { return cT_f_spec_sinkI_Flow_Spec_SinkKeyword_2_0; }

		//t_f_spec_path?="I_Flow_Spec_Path"
		public Assignment getT_f_spec_pathAssignment_3() { return cT_f_spec_pathAssignment_3; }

		//"I_Flow_Spec_Path"
		public Keyword getT_f_spec_pathI_Flow_Spec_PathKeyword_3_0() { return cT_f_spec_pathI_Flow_Spec_PathKeyword_3_0; }
	}

	public class T_flow_impl_subtypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "t_flow_impl_subtypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cT_f_iAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cT_f_iI_Flow_ImplKeyword_0_0 = (Keyword)cT_f_iAssignment_0.eContents().get(0);
		private final Assignment cT_f_i_sourceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cT_f_i_sourceI_Flow_Impl_SourceKeyword_1_0 = (Keyword)cT_f_i_sourceAssignment_1.eContents().get(0);
		private final Assignment cT_f_i_sinkAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cT_f_i_sinkI_Flow_Impl_SinkKeyword_2_0 = (Keyword)cT_f_i_sinkAssignment_2.eContents().get(0);
		private final Assignment cT_f_i_pathAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cT_f_i_pathI_Flow_Impl_PathKeyword_3_0 = (Keyword)cT_f_i_pathAssignment_3.eContents().get(0);
		
		//t_flow_impl_subtypes:
		//	t_f_i?="I_Flow_Impl" | t_f_i_source?="I_Flow_Impl_Source" | t_f_i_sink?="I_Flow_Impl_Sink" |
		//	t_f_i_path?="I_Flow_Impl_Path";
		@Override public ParserRule getRule() { return rule; }

		//t_f_i?="I_Flow_Impl" | t_f_i_source?="I_Flow_Impl_Source" | t_f_i_sink?="I_Flow_Impl_Sink" |
		//t_f_i_path?="I_Flow_Impl_Path"
		public Alternatives getAlternatives() { return cAlternatives; }

		//t_f_i?="I_Flow_Impl"
		public Assignment getT_f_iAssignment_0() { return cT_f_iAssignment_0; }

		//"I_Flow_Impl"
		public Keyword getT_f_iI_Flow_ImplKeyword_0_0() { return cT_f_iI_Flow_ImplKeyword_0_0; }

		//t_f_i_source?="I_Flow_Impl_Source"
		public Assignment getT_f_i_sourceAssignment_1() { return cT_f_i_sourceAssignment_1; }

		//"I_Flow_Impl_Source"
		public Keyword getT_f_i_sourceI_Flow_Impl_SourceKeyword_1_0() { return cT_f_i_sourceI_Flow_Impl_SourceKeyword_1_0; }

		//t_f_i_sink?="I_Flow_Impl_Sink"
		public Assignment getT_f_i_sinkAssignment_2() { return cT_f_i_sinkAssignment_2; }

		//"I_Flow_Impl_Sink"
		public Keyword getT_f_i_sinkI_Flow_Impl_SinkKeyword_2_0() { return cT_f_i_sinkI_Flow_Impl_SinkKeyword_2_0; }

		//t_f_i_path?="I_Flow_Impl_Path"
		public Assignment getT_f_i_pathAssignment_3() { return cT_f_i_pathAssignment_3; }

		//"I_Flow_Impl_Path"
		public Keyword getT_f_i_pathI_Flow_Impl_PathKeyword_3_0() { return cT_f_i_pathI_Flow_Impl_PathKeyword_3_0; }
	}

	public class IntegerRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLowerBoundAlternatives_0_0 = (Alternatives)cLowerBoundAssignment_0.eContents().get(0);
		private final RuleCall cLowerBoundIntegerTermParserRuleCall_0_0_0 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(0);
		private final RuleCall cLowerBoundSignedConstantParserRuleCall_0_0_1 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(1);
		private final RuleCall cLowerBoundConstantValueParserRuleCall_0_0_2 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cUpperBoundAlternatives_2_0 = (Alternatives)cUpperBoundAssignment_2.eContents().get(0);
		private final RuleCall cUpperBoundIntegerTermParserRuleCall_2_0_0 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(0);
		private final RuleCall cUpperBoundSignedConstantParserRuleCall_2_0_1 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(1);
		private final RuleCall cUpperBoundConstantValueParserRuleCall_2_0_2 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(2);
		
		//// from AADL.xtext
		////;returns aadl2::NumericRange:
		//IntegerRange:
		//	lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant |
		//	ConstantValue);
		@Override public ParserRule getRule() { return rule; }

		//lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Group getGroup() { return cGroup; }

		//lowerBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }

		//IntegerTerm | SignedConstant | ConstantValue
		public Alternatives getLowerBoundAlternatives_0_0() { return cLowerBoundAlternatives_0_0; }

		//IntegerTerm
		public RuleCall getLowerBoundIntegerTermParserRuleCall_0_0_0() { return cLowerBoundIntegerTermParserRuleCall_0_0_0; }

		//SignedConstant
		public RuleCall getLowerBoundSignedConstantParserRuleCall_0_0_1() { return cLowerBoundSignedConstantParserRuleCall_0_0_1; }

		//ConstantValue
		public RuleCall getLowerBoundConstantValueParserRuleCall_0_0_2() { return cLowerBoundConstantValueParserRuleCall_0_0_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upperBound=(IntegerTerm | SignedConstant | ConstantValue)
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }

		//IntegerTerm | SignedConstant | ConstantValue
		public Alternatives getUpperBoundAlternatives_2_0() { return cUpperBoundAlternatives_2_0; }

		//IntegerTerm
		public RuleCall getUpperBoundIntegerTermParserRuleCall_2_0_0() { return cUpperBoundIntegerTermParserRuleCall_2_0_0; }

		//SignedConstant
		public RuleCall getUpperBoundSignedConstantParserRuleCall_2_0_1() { return cUpperBoundSignedConstantParserRuleCall_2_0_1; }

		//ConstantValue
		public RuleCall getUpperBoundConstantValueParserRuleCall_2_0_2() { return cUpperBoundConstantValueParserRuleCall_2_0_2; }
	}

	public class RealRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerBoundAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLowerBoundAlternatives_0_0 = (Alternatives)cLowerBoundAssignment_0.eContents().get(0);
		private final RuleCall cLowerBoundRealTermParserRuleCall_0_0_0 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(0);
		private final RuleCall cLowerBoundSignedConstantParserRuleCall_0_0_1 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(1);
		private final RuleCall cLowerBoundConstantValueParserRuleCall_0_0_2 = (RuleCall)cLowerBoundAlternatives_0_0.eContents().get(2);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cUpperBoundAlternatives_2_0 = (Alternatives)cUpperBoundAssignment_2.eContents().get(0);
		private final RuleCall cUpperBoundRealTermParserRuleCall_2_0_0 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(0);
		private final RuleCall cUpperBoundSignedConstantParserRuleCall_2_0_1 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(1);
		private final RuleCall cUpperBoundConstantValueParserRuleCall_2_0_2 = (RuleCall)cUpperBoundAlternatives_2_0.eContents().get(2);
		
		////;returns aadl2::NumericRange:
		//RealRange:
		//	lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue);
		@Override public ParserRule getRule() { return rule; }

		//lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue)
		public Group getGroup() { return cGroup; }

		//lowerBound=(RealTerm | SignedConstant | ConstantValue)
		public Assignment getLowerBoundAssignment_0() { return cLowerBoundAssignment_0; }

		//RealTerm | SignedConstant | ConstantValue
		public Alternatives getLowerBoundAlternatives_0_0() { return cLowerBoundAlternatives_0_0; }

		//RealTerm
		public RuleCall getLowerBoundRealTermParserRuleCall_0_0_0() { return cLowerBoundRealTermParserRuleCall_0_0_0; }

		//SignedConstant
		public RuleCall getLowerBoundSignedConstantParserRuleCall_0_0_1() { return cLowerBoundSignedConstantParserRuleCall_0_0_1; }

		//ConstantValue
		public RuleCall getLowerBoundConstantValueParserRuleCall_0_0_2() { return cLowerBoundConstantValueParserRuleCall_0_0_2; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upperBound=(RealTerm | SignedConstant | ConstantValue)
		public Assignment getUpperBoundAssignment_2() { return cUpperBoundAssignment_2; }

		//RealTerm | SignedConstant | ConstantValue
		public Alternatives getUpperBoundAlternatives_2_0() { return cUpperBoundAlternatives_2_0; }

		//RealTerm
		public RuleCall getUpperBoundRealTermParserRuleCall_2_0_0() { return cUpperBoundRealTermParserRuleCall_2_0_0; }

		//SignedConstant
		public RuleCall getUpperBoundSignedConstantParserRuleCall_2_0_1() { return cUpperBoundSignedConstantParserRuleCall_2_0_1; }

		//ConstantValue
		public RuleCall getUpperBoundConstantValueParserRuleCall_2_0_2() { return cUpperBoundConstantValueParserRuleCall_2_0_2; }
	}

	public class UnnamedIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnnamedIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAadlintegerKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cIntKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeIntegerRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedUnitsTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0 = (RuleCall)cOwnedUnitsTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cUnitsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cReferencedUnitsTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0 = (CrossReference)cReferencedUnitsTypeAssignment_3_1_1.eContents().get(0);
		private final RuleCall cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1 = (RuleCall)cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0.eContents().get(1);
		
		////; returns aadl2::AadlInteger:
		//UnnamedIntegerType: //	{aadl2::AadlInteger} 
		//	{UnnamedIntegerType} ("aadlinteger" | "int") range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
		@Override public ParserRule getRule() { return rule; }

		////	{aadl2::AadlInteger} 
		//{UnnamedIntegerType} ("aadlinteger" | "int") range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Group getGroup() { return cGroup; }

		////	{aadl2::AadlInteger} 
		//{UnnamedIntegerType}
		public Action getUnnamedIntegerTypeAction_0() { return cUnnamedIntegerTypeAction_0; }

		//"aadlinteger" | "int"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"aadlinteger"
		public Keyword getAadlintegerKeyword_1_0() { return cAadlintegerKeyword_1_0; }

		//"int"
		public Keyword getIntKeyword_1_1() { return cIntKeyword_1_1; }

		//range=IntegerRange?
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//IntegerRange
		public RuleCall getRangeIntegerRangeParserRuleCall_2_0() { return cRangeIntegerRangeParserRuleCall_2_0; }

		//(ownedUnitsType=UnnamedUnitsType | "units" referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedUnitsType=UnnamedUnitsType
		public Assignment getOwnedUnitsTypeAssignment_3_0() { return cOwnedUnitsTypeAssignment_3_0; }

		//UnnamedUnitsType
		public RuleCall getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0() { return cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0; }

		//"units" referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"units"
		public Keyword getUnitsKeyword_3_1_0() { return cUnitsKeyword_3_1_0; }

		//referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Assignment getReferencedUnitsTypeAssignment_3_1_1() { return cReferencedUnitsTypeAssignment_3_1_1; }

		//[aadl2::UnitsType|QPREF]
		public CrossReference getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0() { return cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0; }

		//QPREF
		public RuleCall getReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1() { return cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1; }
	}

	public class UnnamedRealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedRealType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnnamedRealTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAadlrealKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRealKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeRealRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedUnitsTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0 = (RuleCall)cOwnedUnitsTypeAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cUnitsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cReferencedUnitsTypeAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0 = (CrossReference)cReferencedUnitsTypeAssignment_3_1_1.eContents().get(0);
		private final RuleCall cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1 = (RuleCall)cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0.eContents().get(1);
		
		//// returns aadl2::AadlReal:
		//UnnamedRealType: //	{aadl2::AadlReal}
		//	{UnnamedRealType} ("aadlreal" | "real") range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
		@Override public ParserRule getRule() { return rule; }

		////	{aadl2::AadlReal}
		//{UnnamedRealType} ("aadlreal" | "real") range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
		//referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Group getGroup() { return cGroup; }

		////	{aadl2::AadlReal}
		//{UnnamedRealType}
		public Action getUnnamedRealTypeAction_0() { return cUnnamedRealTypeAction_0; }

		//"aadlreal" | "real"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"aadlreal"
		public Keyword getAadlrealKeyword_1_0() { return cAadlrealKeyword_1_0; }

		//"real"
		public Keyword getRealKeyword_1_1() { return cRealKeyword_1_1; }

		//range=RealRange?
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//RealRange
		public RuleCall getRangeRealRangeParserRuleCall_2_0() { return cRangeRealRangeParserRuleCall_2_0; }

		//(ownedUnitsType=UnnamedUnitsType | "units" referencedUnitsType=[aadl2::UnitsType|QPREF])?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedUnitsType=UnnamedUnitsType
		public Assignment getOwnedUnitsTypeAssignment_3_0() { return cOwnedUnitsTypeAssignment_3_0; }

		//UnnamedUnitsType
		public RuleCall getOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0() { return cOwnedUnitsTypeUnnamedUnitsTypeParserRuleCall_3_0_0; }

		//"units" referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"units"
		public Keyword getUnitsKeyword_3_1_0() { return cUnitsKeyword_3_1_0; }

		//referencedUnitsType=[aadl2::UnitsType|QPREF]
		public Assignment getReferencedUnitsTypeAssignment_3_1_1() { return cReferencedUnitsTypeAssignment_3_1_1; }

		//[aadl2::UnitsType|QPREF]
		public CrossReference getReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0() { return cReferencedUnitsTypeUnitsTypeCrossReference_3_1_1_0; }

		//QPREF
		public RuleCall getReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1() { return cReferencedUnitsTypeUnitsTypeQPREFParserRuleCall_3_1_1_0_1; }
	}

	public class UnnamedUnitsTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedUnitsType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedLiteralUnitLiteralParserRuleCall_2_0 = (RuleCall)cOwnedLiteralAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0 = (RuleCall)cOwnedLiteralAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnnamedUnitsType returns aadl2::UnitsType:
		//	"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")"
		public Group getGroup() { return cGroup; }

		//"units"
		public Keyword getUnitsKeyword_0() { return cUnitsKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ownedLiteral+=UnitLiteral
		public Assignment getOwnedLiteralAssignment_2() { return cOwnedLiteralAssignment_2; }

		//UnitLiteral
		public RuleCall getOwnedLiteralUnitLiteralParserRuleCall_2_0() { return cOwnedLiteralUnitLiteralParserRuleCall_2_0; }

		//("," ownedLiteral+=UnitLiteralConversion)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ownedLiteral+=UnitLiteralConversion
		public Assignment getOwnedLiteralAssignment_3_1() { return cOwnedLiteralAssignment_3_1; }

		//UnitLiteralConversion
		public RuleCall getOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0() { return cOwnedLiteralUnitLiteralConversionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class UnitLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//UnitLiteral returns aadl2::UnitLiteral:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class UnitLiteralConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitLiteralConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cBaseUnitUnitLiteralCrossReference_2_0 = (CrossReference)cBaseUnitAssignment_2.eContents().get(0);
		private final RuleCall cBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1 = (RuleCall)cBaseUnitUnitLiteralCrossReference_2_0.eContents().get(1);
		private final RuleCall cSTARParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cFactorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFactorNumberValueParserRuleCall_4_0 = (RuleCall)cFactorAssignment_4.eContents().get(0);
		
		//UnitLiteralConversion returns aadl2::UnitLiteral:
		//	name=ID "=>" baseUnit=[aadl2::UnitLiteral] STAR factor=NumberValue;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=>" baseUnit=[aadl2::UnitLiteral] STAR factor=NumberValue
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//baseUnit=[aadl2::UnitLiteral]
		public Assignment getBaseUnitAssignment_2() { return cBaseUnitAssignment_2; }

		//[aadl2::UnitLiteral]
		public CrossReference getBaseUnitUnitLiteralCrossReference_2_0() { return cBaseUnitUnitLiteralCrossReference_2_0; }

		//ID
		public RuleCall getBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1() { return cBaseUnitUnitLiteralIDTerminalRuleCall_2_0_1; }

		//STAR
		public RuleCall getSTARParserRuleCall_3() { return cSTARParserRuleCall_3; }

		//factor=NumberValue
		public Assignment getFactorAssignment_4() { return cFactorAssignment_4; }

		//NumberValue
		public RuleCall getFactorNumberValueParserRuleCall_4_0() { return cFactorNumberValueParserRuleCall_4_0; }
	}

	public class UnnamedBooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedBooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAadlbooleanKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cBoolKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//UnnamedBooleanType returns aadl2::AadlBoolean:
		//	{aadl2::AadlBoolean} ("aadlboolean" | "bool");
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlBoolean} ("aadlboolean" | "bool")
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlBoolean}
		public Action getAadlBooleanAction_0() { return cAadlBooleanAction_0; }

		//"aadlboolean" | "bool"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"aadlboolean"
		public Keyword getAadlbooleanKeyword_1_0() { return cAadlbooleanKeyword_1_0; }

		//"bool"
		public Keyword getBoolKeyword_1_1() { return cBoolKeyword_1_1; }
	}

	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRealLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberValue returns aadl2::NumberValue:
		//	RealLit | IntegerLit;
		@Override public ParserRule getRule() { return rule; }

		//RealLit | IntegerLit
		public Alternatives getAlternatives() { return cAlternatives; }

		//RealLit
		public RuleCall getRealLitParserRuleCall_0() { return cRealLitParserRuleCall_0; }

		//IntegerLit
		public RuleCall getIntegerLitParserRuleCall_1() { return cIntegerLitParserRuleCall_1; }
	}

	public class RealLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RealLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedRealParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealLit returns aadl2::RealLiteral:
		//	value=SignedReal;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedReal
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SignedReal
		public RuleCall getValueSignedRealParserRuleCall_0() { return cValueSignedRealParserRuleCall_0; }
	}

	public class IntegerLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLit returns aadl2::IntegerLiteral:
		//	value=SignedInt;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedInt
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0() { return cValueSignedIntParserRuleCall_0; }
	}

	public class UnnamedStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAadlStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAadlstringKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cStringKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//UnnamedStringType returns aadl2::AadlString:
		//	{aadl2::AadlString} ("aadlstring" | "string");
		@Override public ParserRule getRule() { return rule; }

		//{aadl2::AadlString} ("aadlstring" | "string")
		public Group getGroup() { return cGroup; }

		//{aadl2::AadlString}
		public Action getAadlStringAction_0() { return cAadlStringAction_0; }

		//"aadlstring" | "string"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"aadlstring"
		public Keyword getAadlstringKeyword_1_0() { return cAadlstringKeyword_1_0; }

		//"string"
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }
	}

	public class UnnamedEnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedEnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEnumerationKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEnumKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedLiteralEnumerationLiteralParserRuleCall_2_0 = (RuleCall)cOwnedLiteralAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOwnedLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0 = (RuleCall)cOwnedLiteralAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//UnnamedEnumerationType returns aadl2::EnumerationType:
		//	("enumeration" | "enum") "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
		@Override public ParserRule getRule() { return rule; }

		//("enumeration" | "enum") "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")"
		public Group getGroup() { return cGroup; }

		//"enumeration" | "enum"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"enumeration"
		public Keyword getEnumerationKeyword_0_0() { return cEnumerationKeyword_0_0; }

		//"enum"
		public Keyword getEnumKeyword_0_1() { return cEnumKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ownedLiteral+=EnumerationLiteral
		public Assignment getOwnedLiteralAssignment_2() { return cOwnedLiteralAssignment_2; }

		//EnumerationLiteral
		public RuleCall getOwnedLiteralEnumerationLiteralParserRuleCall_2_0() { return cOwnedLiteralEnumerationLiteralParserRuleCall_2_0; }

		//("," ownedLiteral+=EnumerationLiteral)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//ownedLiteral+=EnumerationLiteral
		public Assignment getOwnedLiteralAssignment_3_1() { return cOwnedLiteralAssignment_3_1; }

		//EnumerationLiteral
		public RuleCall getOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0() { return cOwnedLiteralEnumerationLiteralParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class UnnamedRangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnnamedRangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOwnedNumberTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Alternatives cOwnedNumberTypeAlternatives_2_0_0 = (Alternatives)cOwnedNumberTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_2_0_0_0 = (RuleCall)cOwnedNumberTypeAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cOwnedNumberTypeUnnamedRealTypeParserRuleCall_2_0_0_1 = (RuleCall)cOwnedNumberTypeAlternatives_2_0_0.eContents().get(1);
		private final Assignment cReferencedNumberTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cReferencedNumberTypeNumberTypeCrossReference_2_1_0 = (CrossReference)cReferencedNumberTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cReferencedNumberTypeNumberTypeQPREFParserRuleCall_2_1_0_1 = (RuleCall)cReferencedNumberTypeNumberTypeCrossReference_2_1_0.eContents().get(1);
		
		//// returns aadl2::RangeType:
		//UnnamedRangeType: //	{aadl2::RangeType}
		//	"range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) | referencedNumberType=[aadl2::NumberType|QPREF]);
		@Override public ParserRule getRule() { return rule; }

		////	{aadl2::RangeType}
		//"range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) | referencedNumberType=[aadl2::NumberType|QPREF])
		public Group getGroup() { return cGroup; }

		////	{aadl2::RangeType}
		//"range"
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//ownedNumberType=(UnnamedIntegerType | UnnamedRealType) | referencedNumberType=[aadl2::NumberType|QPREF]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ownedNumberType=(UnnamedIntegerType | UnnamedRealType)
		public Assignment getOwnedNumberTypeAssignment_2_0() { return cOwnedNumberTypeAssignment_2_0; }

		//UnnamedIntegerType | UnnamedRealType
		public Alternatives getOwnedNumberTypeAlternatives_2_0_0() { return cOwnedNumberTypeAlternatives_2_0_0; }

		//UnnamedIntegerType
		public RuleCall getOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_2_0_0_0() { return cOwnedNumberTypeUnnamedIntegerTypeParserRuleCall_2_0_0_0; }

		//UnnamedRealType
		public RuleCall getOwnedNumberTypeUnnamedRealTypeParserRuleCall_2_0_0_1() { return cOwnedNumberTypeUnnamedRealTypeParserRuleCall_2_0_0_1; }

		//referencedNumberType=[aadl2::NumberType|QPREF]
		public Assignment getReferencedNumberTypeAssignment_2_1() { return cReferencedNumberTypeAssignment_2_1; }

		//[aadl2::NumberType|QPREF]
		public CrossReference getReferencedNumberTypeNumberTypeCrossReference_2_1_0() { return cReferencedNumberTypeNumberTypeCrossReference_2_1_0; }

		//QPREF
		public RuleCall getReferencedNumberTypeNumberTypeQPREFParserRuleCall_2_1_0_1() { return cReferencedNumberTypeNumberTypeQPREFParserRuleCall_2_1_0_1; }
	}

	public class FQCREFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQCREF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		
		//// fully qualified classifier name (always includes package name
		//FQCREF:
		//	(ID "::")+ ID -> ("." ID)?;
		@Override public ParserRule getRule() { return rule; }

		//(ID "::")+ ID -> ("." ID)?
		public Group getGroup() { return cGroup; }

		//(ID "::")+
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//-> ("." ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"." ID
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"."
		public Keyword getFullStopKeyword_2_0_0() { return cFullStopKeyword_2_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_0_1() { return cIDTerminalRuleCall_2_0_1; }
	}
	
	
	private final MCSGrammarRootElements pMCSGrammarRoot;
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final MCSAnnexLibraryElements pMCSAnnexLibrary;
	private final MCSFileElements pMCSFile;
	private final MCSAnnexSubclauseElements pMCSAnnexSubclause;
	private final File_nameElements pFile_name;
	private final Type_declarationElements pType_declaration;
	private final Constant_declarationElements pConstant_declaration;
	private final Function_declarationElements pFunction_declaration;
	private final Theorem_declarationElements pTheorem_declaration;
	private final Theorem_rootElements pTheorem_root;
	private final FunctionBodyElements pFunctionBody;
	private final TheoremBodyElements pTheoremBody;
	private final ParameterizedStringElements pParameterizedString;
	private final ParameterElements pParameter;
	private final TextParmElements pTextParm;
	private final McsTypedNameElements pMcsTypedName;
	private final Theorem_callElements pTheorem_call;
	private final Classifier_literalElements pClassifier_literal;
	private final RealTermElements pRealTerm;
	private final UnsignedRealElements pUnsignedReal;
	private final IntegerTermElements pIntegerTerm;
	private final UnsignedIntElements pUnsignedInt;
	private final RangeElements pRange;
	private final RefTermElements pRefTerm;
	private final NestedDotIDElements pNestedDotID;
	private final Mcs_name_refElements pMcs_name_ref;
	private final MethodChainElements pMethodChain;
	private final BuiltInFnCallElements pBuiltInFnCall;
	private final FnCallElements pFnCall;
	private final ExprElements pExpr;
	private final FailExprElements pFailExpr;
	private final ImpliesExprElements pImpliesExpr;
	private final OrExprElements pOrExpr;
	private final AndExprElements pAndExpr;
	private final InstanceOfExprElements pInstanceOfExpr;
	private final RelationalOpElements pRelationalOp;
	private final RelationalExprElements pRelationalExpr;
	private final PlusExprElements pPlusExpr;
	private final TimesExprElements pTimesExpr;
	private final PrefixExprElements pPrefixExpr;
	private final PostCastExprElements pPostCastExpr;
	private final MCSNameExprElements pMCSNameExpr;
	private final Expression_termElements pExpression_term;
	private final BuiltInFnElements pBuiltInFn;
	private final Type_expressionElements pType_expression;
	private final Basic_typeElements pBasic_type;
	private final Composite_typeElements pComposite_type;
	private final Mapping_typeElements pMapping_type;
	private final Set_typeElements pSet_type;
	private final List_typeElements pList_type;
	private final Union_typeElements pUnion_type;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final Element_typeElements pElement_type;
	private final ClassifiersElements pClassifiers;
	private final T_classifier_subtypesElements pT_classifier_subtypes;
	private final InstancesElements pInstances;
	private final T_instance_subtypesElements pT_instance_subtypes;
	private final T_subcomponent_subtypesElements pT_subcomponent_subtypes;
	private final T_component_subtypesElements pT_component_subtypes;
	private final T_connection_subtypesElements pT_connection_subtypes;
	private final T_feature_subtypesElements pT_feature_subtypes;
	private final T_access_subtypesElements pT_access_subtypes;
	private final T_port_subtypesElements pT_port_subtypes;
	private final T_flow_spec_subtypesElements pT_flow_spec_subtypes;
	private final T_flow_impl_subtypesElements pT_flow_impl_subtypes;
	private final IntegerRangeElements pIntegerRange;
	private final RealRangeElements pRealRange;
	private final UnnamedIntegerTypeElements pUnnamedIntegerType;
	private final UnnamedRealTypeElements pUnnamedRealType;
	private final UnnamedUnitsTypeElements pUnnamedUnitsType;
	private final UnitLiteralElements pUnitLiteral;
	private final UnitLiteralConversionElements pUnitLiteralConversion;
	private final UnnamedBooleanTypeElements pUnnamedBooleanType;
	private final NumberValueElements pNumberValue;
	private final RealLitElements pRealLit;
	private final IntegerLitElements pIntegerLit;
	private final UnnamedStringTypeElements pUnnamedStringType;
	private final UnnamedEnumerationTypeElements pUnnamedEnumerationType;
	private final UnnamedRangeTypeElements pUnnamedRangeType;
	private final FQCREFElements pFQCREF;
	
	private final Grammar grammar;

	private final PropertiesGrammarAccess gaProperties;

	@Inject
	public MCSGrammarAccess(GrammarProvider grammarProvider,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaProperties = gaProperties;
		this.pMCSGrammarRoot = new MCSGrammarRootElements();
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pMCSAnnexLibrary = new MCSAnnexLibraryElements();
		this.pMCSFile = new MCSFileElements();
		this.pMCSAnnexSubclause = new MCSAnnexSubclauseElements();
		this.pFile_name = new File_nameElements();
		this.pType_declaration = new Type_declarationElements();
		this.pConstant_declaration = new Constant_declarationElements();
		this.pFunction_declaration = new Function_declarationElements();
		this.pTheorem_declaration = new Theorem_declarationElements();
		this.pTheorem_root = new Theorem_rootElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pTheoremBody = new TheoremBodyElements();
		this.pParameterizedString = new ParameterizedStringElements();
		this.pParameter = new ParameterElements();
		this.pTextParm = new TextParmElements();
		this.pMcsTypedName = new McsTypedNameElements();
		this.pTheorem_call = new Theorem_callElements();
		this.pClassifier_literal = new Classifier_literalElements();
		this.pRealTerm = new RealTermElements();
		this.pUnsignedReal = new UnsignedRealElements();
		this.pIntegerTerm = new IntegerTermElements();
		this.pUnsignedInt = new UnsignedIntElements();
		this.pRange = new RangeElements();
		this.pRefTerm = new RefTermElements();
		this.pNestedDotID = new NestedDotIDElements();
		this.pMcs_name_ref = new Mcs_name_refElements();
		this.pMethodChain = new MethodChainElements();
		this.pBuiltInFnCall = new BuiltInFnCallElements();
		this.pFnCall = new FnCallElements();
		this.pExpr = new ExprElements();
		this.pFailExpr = new FailExprElements();
		this.pImpliesExpr = new ImpliesExprElements();
		this.pOrExpr = new OrExprElements();
		this.pAndExpr = new AndExprElements();
		this.pInstanceOfExpr = new InstanceOfExprElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pRelationalExpr = new RelationalExprElements();
		this.pPlusExpr = new PlusExprElements();
		this.pTimesExpr = new TimesExprElements();
		this.pPrefixExpr = new PrefixExprElements();
		this.pPostCastExpr = new PostCastExprElements();
		this.pMCSNameExpr = new MCSNameExprElements();
		this.pExpression_term = new Expression_termElements();
		this.pBuiltInFn = new BuiltInFnElements();
		this.pType_expression = new Type_expressionElements();
		this.pBasic_type = new Basic_typeElements();
		this.pComposite_type = new Composite_typeElements();
		this.pMapping_type = new Mapping_typeElements();
		this.pSet_type = new Set_typeElements();
		this.pList_type = new List_typeElements();
		this.pUnion_type = new Union_typeElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.pElement_type = new Element_typeElements();
		this.pClassifiers = new ClassifiersElements();
		this.pT_classifier_subtypes = new T_classifier_subtypesElements();
		this.pInstances = new InstancesElements();
		this.pT_instance_subtypes = new T_instance_subtypesElements();
		this.pT_subcomponent_subtypes = new T_subcomponent_subtypesElements();
		this.pT_component_subtypes = new T_component_subtypesElements();
		this.pT_connection_subtypes = new T_connection_subtypesElements();
		this.pT_feature_subtypes = new T_feature_subtypesElements();
		this.pT_access_subtypes = new T_access_subtypesElements();
		this.pT_port_subtypes = new T_port_subtypesElements();
		this.pT_flow_spec_subtypes = new T_flow_spec_subtypesElements();
		this.pT_flow_impl_subtypes = new T_flow_impl_subtypesElements();
		this.pIntegerRange = new IntegerRangeElements();
		this.pRealRange = new RealRangeElements();
		this.pUnnamedIntegerType = new UnnamedIntegerTypeElements();
		this.pUnnamedRealType = new UnnamedRealTypeElements();
		this.pUnnamedUnitsType = new UnnamedUnitsTypeElements();
		this.pUnitLiteral = new UnitLiteralElements();
		this.pUnitLiteralConversion = new UnitLiteralConversionElements();
		this.pUnnamedBooleanType = new UnnamedBooleanTypeElements();
		this.pNumberValue = new NumberValueElements();
		this.pRealLit = new RealLitElements();
		this.pIntegerLit = new IntegerLitElements();
		this.pUnnamedStringType = new UnnamedStringTypeElements();
		this.pUnnamedEnumerationType = new UnnamedEnumerationTypeElements();
		this.pUnnamedRangeType = new UnnamedRangeTypeElements();
		this.pFQCREF = new FQCREFElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.xtext.aadl2.mcs.MCS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	////import "http://www.eclipse.org/xtext/xbase/Xbase"
	//MCSGrammarRoot:
	//	"annex" lib=MCSAnnexLibrary | "mcs" file=MCSFile | "subclause" subclause=MCSAnnexSubclause;
	public MCSGrammarRootElements getMCSGrammarRootAccess() {
		return pMCSGrammarRoot;
	}
	
	public ParserRule getMCSGrammarRootRule() {
		return getMCSGrammarRootAccess().getRule();
	}

	//AnnexLibrary returns aadl2::AnnexLibrary:
	//	MCSAnnexLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//AnnexSubclause returns aadl2::AnnexSubclause:
	//	MCSAnnexSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//MCSAnnexLibrary:
	//	{MCSAnnexLibrary} ("types" types+=Type_declaration+)? ("constants" constants+=Constant_declaration+)? ("functions"
	//	functions+=Function_declaration+)? ("theorems" theorems+=Theorem_declaration+)?;
	public MCSAnnexLibraryElements getMCSAnnexLibraryAccess() {
		return pMCSAnnexLibrary;
	}
	
	public ParserRule getMCSAnnexLibraryRule() {
		return getMCSAnnexLibraryAccess().getRule();
	}

	//MCSFile:
	//	{MCSFile} ("with" importedUnit+=[aadl2::ModelUnit] ("," importedUnit+=[aadl2::ModelUnit])*)+ ("import"
	//	files+=File_name ("," files+=File_name)*)* ("types" types+=Type_declaration+)? ("constants"
	//	constants+=Constant_declaration+)? ("functions" functions+=Function_declaration+)? ("theorems"
	//	theorems+=Theorem_declaration+)? ("constraints" calls+=Theorem_call+)?;
	public MCSFileElements getMCSFileAccess() {
		return pMCSFile;
	}
	
	public ParserRule getMCSFileRule() {
		return getMCSFileAccess().getRule();
	}

	//MCSAnnexSubclause:
	//	{MCSAnnexSubclause} calls+=Theorem_call?;
	public MCSAnnexSubclauseElements getMCSAnnexSubclauseAccess() {
		return pMCSAnnexSubclause;
	}
	
	public ParserRule getMCSAnnexSubclauseRule() {
		return getMCSAnnexSubclauseAccess().getRule();
	}

	//File_name:
	//	STRING;
	public File_nameElements getFile_nameAccess() {
		return pFile_name;
	}
	
	public ParserRule getFile_nameRule() {
		return getFile_nameAccess().getRule();
	}

	//Type_declaration:
	//	"type" name=ID "=" type=Type_expression ";";
	public Type_declarationElements getType_declarationAccess() {
		return pType_declaration;
	}
	
	public ParserRule getType_declarationRule() {
		return getType_declarationAccess().getRule();
	}

	//Constant_declaration:
	//	"const"? const=McsTypedName "=" left_expr=Expr ";";
	public Constant_declarationElements getConstant_declarationAccess() {
		return pConstant_declaration;
	}
	
	public ParserRule getConstant_declarationRule() {
		return getConstant_declarationAccess().getRule();
	}

	//Function_declaration returns Function:
	//	name=ID => "(" (args+=Parameter ("," args+=Parameter)*)? ")" body=FunctionBody;
	public Function_declarationElements getFunction_declarationAccess() {
		return pFunction_declaration;
	}
	
	public ParserRule getFunction_declarationRule() {
		return getFunction_declarationAccess().getRule();
	}

	//Theorem_declaration returns Theorem:
	//	name=ID t_root?=Theorem_root? => "(" (args+=Parameter ("," args+=Parameter)*)? ")" body=TheoremBody;
	public Theorem_declarationElements getTheorem_declarationAccess() {
		return pTheorem_declaration;
	}
	
	public ParserRule getTheorem_declarationRule() {
		return getTheorem_declarationAccess().getRule();
	}

	//Theorem_root:
	//	"<" "root" ":" (nilroot?="nil" | classifier=Classifiers) ">";
	public Theorem_rootElements getTheorem_rootAccess() {
		return pTheorem_root;
	}
	
	public ParserRule getTheorem_rootRule() {
		return getTheorem_rootAccess().getRule();
	}

	//FunctionBody:
	//	{FunctionBody} ":" type=Type_expression "=" expr=Expr;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}

	//TheoremBody:
	//	{TheoremBody} "<=" string+=ParameterizedString+ expr=Expr;
	public TheoremBodyElements getTheoremBodyAccess() {
		return pTheoremBody;
	}
	
	public ParserRule getTheoremBodyRule() {
		return getTheoremBodyAccess().getRule();
	}

	//ParameterizedString:
	//	"**" claim+=TextParm+ "**";
	public ParameterizedStringElements getParameterizedStringAccess() {
		return pParameterizedString;
	}
	
	public ParserRule getParameterizedStringRule() {
		return getParameterizedStringAccess().getRule();
	}

	////Arg types are used for functions, claims, and quantifiers
	//Parameter:
	//	McsTypedName;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//TextParm:
	//	{ClaimString} str=StringTerm | {ClaimArg} textarg=MCSNameExpr ("%" unit=[aadl2::UnitLiteral])?;
	public TextParmElements getTextParmAccess() {
		return pTextParm;
	}
	
	public ParserRule getTextParmRule() {
		return getTextParmAccess().getRule();
	}

	//McsTypedName:
	//	name=ID (":" type=Type_expression | "in" expr=Expr);
	public McsTypedNameElements getMcsTypedNameAccess() {
		return pMcsTypedName;
	}
	
	public ParserRule getMcsTypedNameRule() {
		return getMcsTypedNameAccess().getRule();
	}

	//Theorem_call returns TheoremCall:
	//	("check" | "prove") tname=[Theorem] ("<" ("nil" | croot=Classifier_literal) ">")? "(" (actarg+=Expr (","
	//	actarg+=Expr)*)? ")";
	public Theorem_callElements getTheorem_callAccess() {
		return pTheorem_call;
	}
	
	public ParserRule getTheorem_callRule() {
		return getTheorem_callAccess().getRule();
	}

	//Classifier_literal:
	//	-> classlit=[aadl2::ComponentClassifier|FQCREF] | nameref=Mcs_name_ref;
	public Classifier_literalElements getClassifier_literalAccess() {
		return pClassifier_literal;
	}
	
	public ParserRule getClassifier_literalRule() {
		return getClassifier_literalAccess().getRule();
	}

	//RealTerm returns aadl2::RealLiteral:
	//	value=UnsignedReal unit=[aadl2::UnitLiteral]?;
	public RealTermElements getRealTermAccess() {
		return pRealTerm;
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//UnsignedReal returns aadl2::Real:
	//	REAL_LIT;
	public UnsignedRealElements getUnsignedRealAccess() {
		return pUnsignedReal;
	}
	
	public ParserRule getUnsignedRealRule() {
		return getUnsignedRealAccess().getRule();
	}

	//IntegerTerm returns aadl2::IntegerLiteral:
	//	value=UnsignedInt unit=[aadl2::UnitLiteral]?;
	public IntegerTermElements getIntegerTermAccess() {
		return pIntegerTerm;
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//UnsignedInt returns aadl2::Integer:
	//	INTEGER_LIT;
	public UnsignedIntElements getUnsignedIntAccess() {
		return pUnsignedInt;
	}
	
	public ParserRule getUnsignedIntRule() {
		return getUnsignedIntAccess().getRule();
	}

	//Range:
	//	lowerBound=(IntegerTerm | RealTerm) ".." upperBound=(IntegerTerm | RealTerm);
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//RefTerm:
	//	"reference" "(" (root?="root" ".")? sub= //ContainmentPath
	//	NestedDotID ")";
	public RefTermElements getRefTermAccess() {
		return pRefTerm;
	}
	
	public ParserRule getRefTermRule() {
		return getRefTermAccess().getRule();
	}

	//NestedDotID:
	//	base=[aadl2::NamedElement] ("." sub=NestedDotID)?;
	public NestedDotIDElements getNestedDotIDAccess() {
		return pNestedDotID;
	}
	
	public ParserRule getNestedDotIDRule() {
		return getNestedDotIDAccess().getRule();
	}

	//Mcs_name_ref:
	//	ref=[McsTypedName] -> (chain=MethodChain)?;
	public Mcs_name_refElements getMcs_name_refAccess() {
		return pMcs_name_ref;
	}
	
	public ParserRule getMcs_name_refRule() {
		return getMcs_name_refAccess().getRule();
	}

	//MethodChain:
	//	{MethodChain} -> ("." (builtin+=BuiltInFnCall | method+=FnCall))*;
	public MethodChainElements getMethodChainAccess() {
		return pMethodChain;
	}
	
	public ParserRule getMethodChainRule() {
		return getMethodChainAccess().getRule();
	}

	//BuiltInFnCall:
	//	fn=BuiltInFn "(" (args+=Expr ("," args+=Expr)*)? ")" => ("<" newtype=Type_expression ">")?;
	public BuiltInFnCallElements getBuiltInFnCallAccess() {
		return pBuiltInFnCall;
	}
	
	public ParserRule getBuiltInFnCallRule() {
		return getBuiltInFnCallAccess().getRule();
	}

	//FnCall:
	//	fn=[Function] "(" (args+=Expr ("," args+=Expr)*)? ")" => ("<" newtype=Type_expression ">")?;
	public FnCallElements getFnCallAccess() {
		return pFnCall;
	}
	
	public ParserRule getFnCallRule() {
		return getFnCallAccess().getRule();
	}

	//Expr:
	//	FailExpr;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//FailExpr returns Expr:
	//	ImpliesExpr (=> ({BinaryExpr.left=current} op="fail") right=ParameterizedString)?;
	public FailExprElements getFailExprAccess() {
		return pFailExpr;
	}
	
	public ParserRule getFailExprRule() {
		return getFailExprAccess().getRule();
	}

	//ImpliesExpr returns Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op="=>") right=ImpliesExpr)?;
	public ImpliesExprElements getImpliesExprAccess() {
		return pImpliesExpr;
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//OrExpr returns Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} op="or") right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns Expr:
	//	InstanceOfExpr (=> ({BinaryExpr.left=current} (op="and" | op="andthen")) right=InstanceOfExpr)*;
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//InstanceOfExpr returns Expr:
	//	RelationalExpr (=> ({InstanceOfExpr.expr=current} "instanceof") type=Type_expression)?;
	public InstanceOfExprElements getInstanceOfExprAccess() {
		return pInstanceOfExpr;
	}
	
	public ParserRule getInstanceOfExprRule() {
		return getInstanceOfExprAccess().getRule();
	}

	//RelationalOp:
	//	"<" | "<=" | ">" | ">=" | "=" | "<>";
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	//RelationalExpr returns Expr:
	//	PlusExpr (=> ({BinaryExpr.left=current} op=RelationalOp) right=PlusExpr)?;
	public RelationalExprElements getRelationalExprAccess() {
		return pRelationalExpr;
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}

	//PlusExpr returns Expr:
	//	TimesExpr (=> ({BinaryExpr.left=current} op=("+" | "-")) right=TimesExpr)*;
	public PlusExprElements getPlusExprAccess() {
		return pPlusExpr;
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}

	//TimesExpr returns Expr:
	//	PrefixExpr (=> ({BinaryExpr.left=current} op=("*" | "/" | "%")) right=PrefixExpr)*;
	public TimesExprElements getTimesExprAccess() {
		return pTimesExpr;
	}
	
	public ParserRule getTimesExprRule() {
		return getTimesExprAccess().getRule();
	}

	//PrefixExpr returns Expr:
	//	{UnaryExpr} op=("-" | "not") expr=PrefixExpr //|   {PreCastExpr} '(' type=Type_expression ')' expr=PrefixExpr
	//	| PostCastExpr;
	public PrefixExprElements getPrefixExprAccess() {
		return pPrefixExpr;
	}
	
	public ParserRule getPrefixExprRule() {
		return getPrefixExprAccess().getRule();
	}

	//PostCastExpr:
	//	{PostCastExpr} expr=Expression_term -> ("<" newtype=Type_expression ">")? -> (chain=MethodChain)?;
	public PostCastExprElements getPostCastExprAccess() {
		return pPostCastExpr;
	}
	
	public ParserRule getPostCastExprRule() {
		return getPostCastExprAccess().getRule();
	}

	//MCSNameExpr:
	//	{MCSNameExpr} (root?="root" | iroot?="iroot" | nil?="nil" | empty?="empty" | allmodes?="allmodes" | =>
	//	typednameref=Mcs_name_ref);
	public MCSNameExprElements getMCSNameExprAccess() {
		return pMCSNameExpr;
	}
	
	public ParserRule getMCSNameExprRule() {
		return getMCSNameExprAccess().getRule();
	}

	//Expression_term returns Expr:
	//	MCSNameExpr | {PkgExpr} "package" "(" package=[aadl2::AadlPackage] ")" | {CompExpr} classifier= // rules identical to
	//	ComponentClassifierTerm | {RefExpr} reference= // Properties.xtext expressions
	//	RefTerm | {ThisExpr} "this" ("." sub=NestedDotID)? // from Properties grammar
	//	| {IntExpr} val=IntegerTerm | {RealExpr} val=RealTerm | {BoolExpr} val=BooleanLiteral | {StringExpr} val=StringTerm |
	//	{Range} val= // Int and Real Range from AADL.xtext
	//	Range | {IfThenElseExpr} "if" cond=Expr "then" then=Expr "else" else=Expr | {QuantifiedExpr} quant=("forall" |
	//	"foreach" | "exists") ("(" / *|Domain* / args+=Parameter ")")+ "." expr=Expr | {BuiltInFnCallExpr}
	//	builtin=BuiltInFnCall | {FnCallExpr} fn=FnCall | {TheoremCallExpr} fn=Theorem_call | {FilterSet} list?="list"? "{"
	//	exp=Expr ({FilterMapExpr.map=current} "for" ("(" / *|Domain* / args+=Parameter ")")+ ("|" filter=Expr)? |
	//	{SetExpr.exprs+=current} ("," exprs+=Expr)*) "}" | {MappingExpr} "[" expr1=Expr "," expr2=Expr "]" | {EmptySetExpr}
	//	"{" "}" | {LetExpr} "let" local=McsTypedName "=" expr1=Expr ";" expr2=Expr | "(" Expr ")";
	public Expression_termElements getExpression_termAccess() {
		return pExpression_term;
	}
	
	public ParserRule getExpression_termRule() {
		return getExpression_termAccess().getRule();
	}

	//BuiltInFn: // real primary type methods
	//	"has_range" // integer and real primary type 
	//	// range of integer, real primary type 
	//	// string primary type 
	//	// set methods
	//	// set and list methods 
	//	// list methods
	//	// mapping methods
	//	// T_Element methods
	//	// T_Package methods
	//	// T_Classifier methods
	//	// T_Classifier and I_Component methods
	//	//	C_Impl methods
	//	//	C_Feature_Group methods
	//	//	T_Instance methods
	//	//	I_Component methods
	//	// 	I_Component, I_Feature and I_Call_Sequence methods
	//	// 	I_Component and I_Call_Sequence methods
	//	//	I_Subprogram_Call methods
	//	//	I_Connection methods
	//	//	I_Feature, I_Flow_Spec I_End_To_End methods
	//	//	I_Feature methods
	//	//	I_Feature group methods
	//	//	I_Flow_Spec, I_Flow_Impl methods
	//	//	I_Flow_Impl,I_End_To_End_Flow methods
	//	//	I_End_To_End_Flow methods
	//	//	I_Prototype methods
	//	//	I_Mode methods
	//	//	I_Mode_Transition methods
	//	| "range" | "floor" | "ceiling" | "has_units" | "unit_literal" | "upper" | "lower" | "has_delta" | "delta" | "concat" |
	//	"eq" | "less" | "case_eq" | "case_less" | "in" | "union" | "intersect" | "has_member" | "size" | "sum" | "max" |
	//	"min" | "get" | "sublist" | "join" | "as_set" | "key" | "val" | "qualified_name" | "local_name" | "path_name_of" |
	//	"package_name" | "is_owned_by" | "has_parent" | "parent" | "owner" | "equal" | "element_type" | "has_property" | "#?"
	//	| "property" | "#" | "imports" | "classifiers" | "has_extends" | "extends" | "category" | "has_bindings" |
	//	"bindings_map" | "component_type" | "is_of_type" | "has_inverse" | "inverse" | "contaned" | "in_modes" |
	//	"is_prototype_ref" | "prototype" | "is_c_type_instance" | "c_type" | // duplicate names | 'has_bindings' | 'bindings_map'
	//	"class" | "array_cardinal" | "modes" | "modes_map" | "mode_state_machine" | "mode_transitions" | "subcomponents" |
	//	"instances" | "features" | "flat_features" | "connections" | "call_target" | "is_bidirectional" | "source" |
	//	"destination" | "is_refined" | "is_partial" | // % duplicate | 'prototype' | 'array_cardinal'
	//	"has_prototype_ref" | "has_classifier_type" | "classifier_type" | "direction" | // duplicate | 'has_bindings' | 'bindings_map' |	'features' | 'flat_features' 
	//	"is_inverse" | //duplicate | 'is_refined'
	//	"feature" | //duplicate for I_Flow_Impl | 'feature' 
	//	"path" | //duplicate |	'is_refined' | 'path' 
	//	"transitive_path" | "is_component_prototype" | "type_literal" | "has_list" | "is_feature_prototype" | "is_fg_prototype"
	//	| "has_classifier_reference" | "classifier_reference" | "is_initial_mode" | "is_required_mode" | "mapped_set" |
	//	"is_named" | "transition_name" | "transition_triggers" | "start_mode_state" | "end_mode_state";
	public BuiltInFnElements getBuiltInFnAccess() {
		return pBuiltInFn;
	}
	
	public ParserRule getBuiltInFnRule() {
		return getBuiltInFnAccess().getRule();
	}

	//// Type rules
	//Type_expression:
	//	basic=Basic_type | composite=Composite_type | element=Element_type;
	public Type_expressionElements getType_expressionAccess() {
		return pType_expression;
	}
	
	public ParserRule getType_expressionRule() {
		return getType_expressionAccess().getRule();
	}

	//// basic types rules
	//Basic_type:
	//	{Basic_type} (ptype="property_type" // from core AADL, shortcuts supported
	//	| pref="property_ref" | bool=UnnamedBooleanType | string=UnnamedStringType | enumer=UnnamedEnumerationType |
	//	units=UnnamedUnitsType | integer=UnnamedIntegerType | real=UnnamedRealType | range=UnnamedRangeType | typename= // must be a user defined type
	//	[Type_declaration]);
	public Basic_typeElements getBasic_typeAccess() {
		return pBasic_type;
	}
	
	public ParserRule getBasic_typeRule() {
		return getBasic_typeAccess().getRule();
	}

	//// composite type rules
	//Composite_type:
	//	Mapping_type | Set_type | List_type | Union_type;
	public Composite_typeElements getComposite_typeAccess() {
		return pComposite_type;
	}
	
	public ParserRule getComposite_typeRule() {
		return getComposite_typeAccess().getRule();
	}

	//Mapping_type:
	//	"[" key=Type_expression "to" val=Type_expression "]";
	public Mapping_typeElements getMapping_typeAccess() {
		return pMapping_type;
	}
	
	public ParserRule getMapping_typeRule() {
		return getMapping_typeAccess().getRule();
	}

	//Set_type:
	//	"{" root_type=Type_expression "}" | "set" "<" root_type=Type_expression ">";
	public Set_typeElements getSet_typeAccess() {
		return pSet_type;
	}
	
	public ParserRule getSet_typeRule() {
		return getSet_typeAccess().getRule();
	}

	//List_type:
	//	"(" root_type=Type_expression ")" | "list" "<" root_type=Type_expression ">";
	public List_typeElements getList_typeAccess() {
		return pList_type;
	}
	
	public ParserRule getList_typeRule() {
		return getList_typeAccess().getRule();
	}

	//Union_type:
	//	"union" "(" types+=Type_expression ("," type+=Type_expression)* ")";
	public Union_typeElements getUnion_typeAccess() {
		return pUnion_type;
	}
	
	public ParserRule getUnion_typeRule() {
		return getUnion_typeAccess().getRule();
	}

	//EnumerationLiteral returns aadl2::EnumerationLiteral:
	//	name=STRING;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	////element type rules
	//Element_type:
	//	telem?="T_Element" | tpack?="T_Package" | t_class?=Classifiers | t_inst?=Instances;
	public Element_typeElements getElement_typeAccess() {
		return pElement_type;
	}
	
	public ParserRule getElement_typeRule() {
		return getElement_typeAccess().getRule();
	}

	//Classifiers:
	//	t_class?="T_Classifier" | t_class_subtype?=T_classifier_subtypes;
	public ClassifiersElements getClassifiersAccess() {
		return pClassifiers;
	}
	
	public ParserRule getClassifiersRule() {
		return getClassifiersAccess().getRule();
	}

	//T_classifier_subtypes:
	//	t_ctype?="C_Type" | t_cimpl?="C_Impl" | t_fgclass?="C_Feature_Group" | t_annexclass?="C_Annex";
	public T_classifier_subtypesElements getT_classifier_subtypesAccess() {
		return pT_classifier_subtypes;
	}
	
	public ParserRule getT_classifier_subtypesRule() {
		return getT_classifier_subtypesAccess().getRule();
	}

	//Instances:
	//	inst?="T_Instance" | t_inst_st?=t_instance_subtypes;
	public InstancesElements getInstancesAccess() {
		return pInstances;
	}
	
	public ParserRule getInstancesRule() {
		return getInstancesAccess().getRule();
	}

	//t_instance_subtypes:
	//	t_subc_st?=t_subcomponent_subtypes | t_connection_subtypes | t_feature_subtypes | t_flow_spec_subtypes |
	//	t_flow_impl_subtypes | t_sbcall?="I_Subprogram_Call" | t_callseq?="I_Call_Sequence" | t_eeflow?="I_End_To_End_Flow" |
	//	t_proto?="I_Prototype" | t_mode?="I_Mode" | t_mod_trans?="I_Mode_Transition" | t_mode_trig?="I_Mode_Trigger_Id";
	public T_instance_subtypesElements getT_instance_subtypesAccess() {
		return pT_instance_subtypes;
	}
	
	public ParserRule getT_instance_subtypesRule() {
		return getT_instance_subtypesAccess().getRule();
	}

	//t_subcomponent_subtypes:
	//	t_sub?="I_Component" | t_cimpl_st?=t_component_subtypes;
	public T_subcomponent_subtypesElements getT_subcomponent_subtypesAccess() {
		return pT_subcomponent_subtypes;
	}
	
	public ParserRule getT_subcomponent_subtypesRule() {
		return getT_subcomponent_subtypesAccess().getRule();
	}

	//t_component_subtypes:
	//	t_annex_sub?="I_Component_Annex" | t_abstract?="I_Abstract" | t_sys?="I_System" | t_dev?="I_Device" |
	//	t_proc?="I_Processor" | t_virt_proc?="I_Virtual_Processor" | t_bus?="I_Bus" | t_vbus?="I_Virtual_Bus" |
	//	t_mem?="I_Memory" | t_proc?="I_Process" | t_tg?="I_Thread_Group" | t_t?="I_Thread" | t_d?="I_Data" |
	//	t_subprog?="I_Subprogram" | t_subprog_g?="I_Subprogram_Group";
	public T_component_subtypesElements getT_component_subtypesAccess() {
		return pT_component_subtypes;
	}
	
	public ParserRule getT_component_subtypesRule() {
		return getT_component_subtypesAccess().getRule();
	}

	//t_connection_subtypes:
	//	t_conn?="I_Connection" | t_feat_conn?="I_Feature_Connection" | t_port_conn?="I_Port_Connection" |
	//	t_parm_conn?="I_Parameter_Connection" | t_acc_con?="I_Access_Connection" | t_fg_conn?="I_Feature_Group_Connection";
	public T_connection_subtypesElements getT_connection_subtypesAccess() {
		return pT_connection_subtypes;
	}
	
	public ParserRule getT_connection_subtypesRule() {
		return getT_connection_subtypesAccess().getRule();
	}

	//t_feature_subtypes:
	//	t_feat?="I_Feature" | t_abs_feat?="I_Abstract_Feature" | t_parm?="I_Parameter" | t_fg?="I_Feature_Group" |
	//	t_port_subtypes | t_access_subtypes;
	public T_feature_subtypesElements getT_feature_subtypesAccess() {
		return pT_feature_subtypes;
	}
	
	public ParserRule getT_feature_subtypesRule() {
		return getT_feature_subtypesAccess().getRule();
	}

	//t_access_subtypes:
	//	t_access?="I_Access" | t_data_acc?="I_Data_Access" | t_sub_acc?="I_Subprogram_Access" |
	//	t_sub_gr_acc?="I_Subprogram_Group_Access" | t_bus_acc?="I_Bus_Access";
	public T_access_subtypesElements getT_access_subtypesAccess() {
		return pT_access_subtypes;
	}
	
	public ParserRule getT_access_subtypesRule() {
		return getT_access_subtypesAccess().getRule();
	}

	//t_port_subtypes:
	//	t_port?="I_Port" | t_d_port?="I_Data_Port" | t_ev_port?="I_Event_Port" | t_evd_port?="I_Event_Data_Port";
	public T_port_subtypesElements getT_port_subtypesAccess() {
		return pT_port_subtypes;
	}
	
	public ParserRule getT_port_subtypesRule() {
		return getT_port_subtypesAccess().getRule();
	}

	//t_flow_spec_subtypes:
	//	t_f_spec?="I_Flow_Spec" | t_f_spec_source?="I_Flow_Spec_Source" | t_f_spec_sink?="I_Flow_Spec_Sink" |
	//	t_f_spec_path?="I_Flow_Spec_Path";
	public T_flow_spec_subtypesElements getT_flow_spec_subtypesAccess() {
		return pT_flow_spec_subtypes;
	}
	
	public ParserRule getT_flow_spec_subtypesRule() {
		return getT_flow_spec_subtypesAccess().getRule();
	}

	//t_flow_impl_subtypes:
	//	t_f_i?="I_Flow_Impl" | t_f_i_source?="I_Flow_Impl_Source" | t_f_i_sink?="I_Flow_Impl_Sink" |
	//	t_f_i_path?="I_Flow_Impl_Path";
	public T_flow_impl_subtypesElements getT_flow_impl_subtypesAccess() {
		return pT_flow_impl_subtypes;
	}
	
	public ParserRule getT_flow_impl_subtypesRule() {
		return getT_flow_impl_subtypesAccess().getRule();
	}

	//// from AADL.xtext
	////;returns aadl2::NumericRange:
	//IntegerRange:
	//	lowerBound=(IntegerTerm | SignedConstant | ConstantValue) ".." upperBound=(IntegerTerm | SignedConstant |
	//	ConstantValue);
	public IntegerRangeElements getIntegerRangeAccess() {
		return pIntegerRange;
	}
	
	public ParserRule getIntegerRangeRule() {
		return getIntegerRangeAccess().getRule();
	}

	////;returns aadl2::NumericRange:
	//RealRange:
	//	lowerBound=(RealTerm | SignedConstant | ConstantValue) ".." upperBound=(RealTerm | SignedConstant | ConstantValue);
	public RealRangeElements getRealRangeAccess() {
		return pRealRange;
	}
	
	public ParserRule getRealRangeRule() {
		return getRealRangeAccess().getRule();
	}

	////; returns aadl2::AadlInteger:
	//UnnamedIntegerType: //	{aadl2::AadlInteger} 
	//	{UnnamedIntegerType} ("aadlinteger" | "int") range=IntegerRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public UnnamedIntegerTypeElements getUnnamedIntegerTypeAccess() {
		return pUnnamedIntegerType;
	}
	
	public ParserRule getUnnamedIntegerTypeRule() {
		return getUnnamedIntegerTypeAccess().getRule();
	}

	//// returns aadl2::AadlReal:
	//UnnamedRealType: //	{aadl2::AadlReal}
	//	{UnnamedRealType} ("aadlreal" | "real") range=RealRange? (ownedUnitsType=UnnamedUnitsType | "units"
	//	referencedUnitsType=[aadl2::UnitsType|QPREF])?;
	public UnnamedRealTypeElements getUnnamedRealTypeAccess() {
		return pUnnamedRealType;
	}
	
	public ParserRule getUnnamedRealTypeRule() {
		return getUnnamedRealTypeAccess().getRule();
	}

	//UnnamedUnitsType returns aadl2::UnitsType:
	//	"units" "(" ownedLiteral+=UnitLiteral ("," ownedLiteral+=UnitLiteralConversion)* ")";
	public UnnamedUnitsTypeElements getUnnamedUnitsTypeAccess() {
		return pUnnamedUnitsType;
	}
	
	public ParserRule getUnnamedUnitsTypeRule() {
		return getUnnamedUnitsTypeAccess().getRule();
	}

	//UnitLiteral returns aadl2::UnitLiteral:
	//	name=ID;
	public UnitLiteralElements getUnitLiteralAccess() {
		return pUnitLiteral;
	}
	
	public ParserRule getUnitLiteralRule() {
		return getUnitLiteralAccess().getRule();
	}

	//UnitLiteralConversion returns aadl2::UnitLiteral:
	//	name=ID "=>" baseUnit=[aadl2::UnitLiteral] STAR factor=NumberValue;
	public UnitLiteralConversionElements getUnitLiteralConversionAccess() {
		return pUnitLiteralConversion;
	}
	
	public ParserRule getUnitLiteralConversionRule() {
		return getUnitLiteralConversionAccess().getRule();
	}

	//UnnamedBooleanType returns aadl2::AadlBoolean:
	//	{aadl2::AadlBoolean} ("aadlboolean" | "bool");
	public UnnamedBooleanTypeElements getUnnamedBooleanTypeAccess() {
		return pUnnamedBooleanType;
	}
	
	public ParserRule getUnnamedBooleanTypeRule() {
		return getUnnamedBooleanTypeAccess().getRule();
	}

	//NumberValue returns aadl2::NumberValue:
	//	RealLit | IntegerLit;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//RealLit returns aadl2::RealLiteral:
	//	value=SignedReal;
	public RealLitElements getRealLitAccess() {
		return pRealLit;
	}
	
	public ParserRule getRealLitRule() {
		return getRealLitAccess().getRule();
	}

	//IntegerLit returns aadl2::IntegerLiteral:
	//	value=SignedInt;
	public IntegerLitElements getIntegerLitAccess() {
		return pIntegerLit;
	}
	
	public ParserRule getIntegerLitRule() {
		return getIntegerLitAccess().getRule();
	}

	//UnnamedStringType returns aadl2::AadlString:
	//	{aadl2::AadlString} ("aadlstring" | "string");
	public UnnamedStringTypeElements getUnnamedStringTypeAccess() {
		return pUnnamedStringType;
	}
	
	public ParserRule getUnnamedStringTypeRule() {
		return getUnnamedStringTypeAccess().getRule();
	}

	//UnnamedEnumerationType returns aadl2::EnumerationType:
	//	("enumeration" | "enum") "(" ownedLiteral+=EnumerationLiteral ("," ownedLiteral+=EnumerationLiteral)* ")";
	public UnnamedEnumerationTypeElements getUnnamedEnumerationTypeAccess() {
		return pUnnamedEnumerationType;
	}
	
	public ParserRule getUnnamedEnumerationTypeRule() {
		return getUnnamedEnumerationTypeAccess().getRule();
	}

	//// returns aadl2::RangeType:
	//UnnamedRangeType: //	{aadl2::RangeType}
	//	"range" "of" (ownedNumberType=(UnnamedIntegerType | UnnamedRealType) | referencedNumberType=[aadl2::NumberType|QPREF]);
	public UnnamedRangeTypeElements getUnnamedRangeTypeAccess() {
		return pUnnamedRangeType;
	}
	
	public ParserRule getUnnamedRangeTypeRule() {
		return getUnnamedRangeTypeAccess().getRule();
	}

	//// fully qualified classifier name (always includes package name
	//FQCREF:
	//	(ID "::")+ ID -> ("." ID)?;
	public FQCREFElements getFQCREFAccess() {
		return pFQCREF;
	}
	
	public ParserRule getFQCREFRule() {
		return getFQCREFAccess().getRule();
	}

	//PModel returns aadl2::Element: //| BasicPropertyAssociation | PropertyAssociation
	// ContainedPropertyAssociation;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	// ContainedPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("applies" "to" appliesTo+=ContainmentPath (","
	//	appliesTo+=ContainmentPath)*)? ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] "=>" ownedValue+=PropertyValue ";";
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	////	( 'annex' containmentPathElement+=AnnexPath )?
	// ContainmentPath returns aadl2::ContainedNamedElement:
	//	path=ContainmentPathElement;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	// //	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//
	//ModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression "in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")";
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression // phf made this optional: need to check separately that only the last one is optional
	//
	//	("in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")")?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	// PropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression returns aadl2::PropertyExpression: //	OldRecordTerm |
	// RecordTerm | ReferenceTerm |
	//	ComponentClassifierTerm | ComputedTerm | StringTerm | NumericRangeTerm | RealTerm | IntegerTerm | ListTerm |
	//	BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm returns aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral returns aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?="true" | "false");
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue returns aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm returns aadl2::ReferenceValue:
	//	"reference" "(" path=ContainmentPathElement //	( 'annex' ID '{**' 
	//
	//	//	containmentPathElement+=ContainmentPathElement
	// //	( '.' containmentPathElement+=ContainmentPathElement)*
	//
	//	//	'**}')?
	// ")";
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm returns aadl2::RecordValue:
	//	"[" ownedFieldValue+=FieldPropertyAssociation+ "]";
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm returns aadl2::RecordValue:
	//	"(" ownedFieldValue+=FieldPropertyAssociation+ ")";
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm returns aadl2::ComputedValue:
	//	"compute" "(" function=ID ")";
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm returns aadl2::ClassifierValue:
	//	"classifier" "(" classifier=[aadl2::ComponentClassifier|QCREF] ")";
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm returns aadl2::ListValue:
	//	{aadl2::ListValue} "(" (ownedListElement+=PropertyExpression ("," ownedListElement+=PropertyExpression)*)? ")";
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation returns aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty] "=>" ownedValue=PropertyExpression ";";
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	// // need to add annex path element
	// //	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//
	//ContainmentPathElement returns aadl2::ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange?) ("." path=ContainmentPathElement)?;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	// "{" STAR STAR ID STAR STAR "}";
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus returns aadl2::OperationKind:
	//	"+" | "-";
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm returns aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString: // remove quotes from string in ValueConverter
	// STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange returns aadl2::ArrayRange:
	//	{aadl2::ArrayRange} "[" lowerBound=INTVALUE (".." upperBound=INTVALUE)? "]";
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant returns aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//SignedInt returns aadl2::Integer:
	//	("+" | "-")? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedReal returns aadl2::Real:
	//	("+" | "-")? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm returns aadl2::RangeValue:
	//	minimum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	// NumAlt ".." maximum=
	//	//(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	// NumAlt ("delta" delta=
	//	//(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	// NumAlt)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt returns aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE returns aadl2::Integer: //NUMERAL 	
	// INTEGER_LIT;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	////terminal NUMERAL:
	// //	(DIGIT)+('_' (DIGIT)+)*
	// //;
	// //terminal INT returns ecore::EInt: (DIGIT)+('_' (DIGIT)+)*;
	//
	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	("e" | "E") "+"? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("." DIGIT+ ("_" DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("#" BASED_INTEGER "#" INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID "::" ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ("::" ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID ("." ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	"*";
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	// terminal ID:
	//	("a".."z" | "A".."Z") ("_"? ("a".."z" | "A".."Z" | "0".."9"))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
